// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'database.dart';

// **************************************************************************
// MoorGenerator
// **************************************************************************

// ignore_for_file: unnecessary_brace_in_string_interps, unnecessary_this
class Cfop extends DataClass implements Insertable<Cfop> {
  final int id;
  final int codigo;
  final String descricao;
  final String aplicacao;
  Cfop({@required this.id, this.codigo, this.descricao, this.aplicacao});
  factory Cfop.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return Cfop(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      codigo: intType.mapFromDatabaseResponse(data['${effectivePrefix}CODIGO']),
      descricao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
      aplicacao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}APLICACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || codigo != null) {
      map['CODIGO'] = Variable<int>(codigo);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || aplicacao != null) {
      map['APLICACAO'] = Variable<String>(aplicacao);
    }
    return map;
  }

  CfopsCompanion toCompanion(bool nullToAbsent) {
    return CfopsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      aplicacao: aplicacao == null && nullToAbsent
          ? const Value.absent()
          : Value(aplicacao),
    );
  }

  factory Cfop.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Cfop(
      id: serializer.fromJson<int>(json['id']),
      codigo: serializer.fromJson<int>(json['codigo']),
      descricao: serializer.fromJson<String>(json['descricao']),
      aplicacao: serializer.fromJson<String>(json['aplicacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'codigo': serializer.toJson<int>(codigo),
      'descricao': serializer.toJson<String>(descricao),
      'aplicacao': serializer.toJson<String>(aplicacao),
    };
  }

  Cfop copyWith({int id, int codigo, String descricao, String aplicacao}) =>
      Cfop(
        id: id ?? this.id,
        codigo: codigo ?? this.codigo,
        descricao: descricao ?? this.descricao,
        aplicacao: aplicacao ?? this.aplicacao,
      );
  @override
  String toString() {
    return (StringBuffer('Cfop(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao, ')
          ..write('aplicacao: $aplicacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(id.hashCode,
      $mrjc(codigo.hashCode, $mrjc(descricao.hashCode, aplicacao.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is Cfop &&
          other.id == this.id &&
          other.codigo == this.codigo &&
          other.descricao == this.descricao &&
          other.aplicacao == this.aplicacao);
}

class CfopsCompanion extends UpdateCompanion<Cfop> {
  final Value<int> id;
  final Value<int> codigo;
  final Value<String> descricao;
  final Value<String> aplicacao;
  const CfopsCompanion({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.aplicacao = const Value.absent(),
  });
  CfopsCompanion.insert({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.aplicacao = const Value.absent(),
  });
  static Insertable<Cfop> custom({
    Expression<int> id,
    Expression<int> codigo,
    Expression<String> descricao,
    Expression<String> aplicacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (codigo != null) 'CODIGO': codigo,
      if (descricao != null) 'DESCRICAO': descricao,
      if (aplicacao != null) 'APLICACAO': aplicacao,
    });
  }

  CfopsCompanion copyWith(
      {Value<int> id,
      Value<int> codigo,
      Value<String> descricao,
      Value<String> aplicacao}) {
    return CfopsCompanion(
      id: id ?? this.id,
      codigo: codigo ?? this.codigo,
      descricao: descricao ?? this.descricao,
      aplicacao: aplicacao ?? this.aplicacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (codigo.present) {
      map['CODIGO'] = Variable<int>(codigo.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (aplicacao.present) {
      map['APLICACAO'] = Variable<String>(aplicacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CfopsCompanion(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao, ')
          ..write('aplicacao: $aplicacao')
          ..write(')'))
        .toString();
  }
}

class $CfopsTable extends Cfops with TableInfo<$CfopsTable, Cfop> {
  final GeneratedDatabase _db;
  final String _alias;
  $CfopsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  GeneratedIntColumn _codigo;
  @override
  GeneratedIntColumn get codigo => _codigo ??= _constructCodigo();
  GeneratedIntColumn _constructCodigo() {
    return GeneratedIntColumn(
      'CODIGO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  GeneratedTextColumn _descricao;
  @override
  GeneratedTextColumn get descricao => _descricao ??= _constructDescricao();
  GeneratedTextColumn _constructDescricao() {
    return GeneratedTextColumn('DESCRICAO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _aplicacaoMeta = const VerificationMeta('aplicacao');
  GeneratedTextColumn _aplicacao;
  @override
  GeneratedTextColumn get aplicacao => _aplicacao ??= _constructAplicacao();
  GeneratedTextColumn _constructAplicacao() {
    return GeneratedTextColumn('APLICACAO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  @override
  List<GeneratedColumn> get $columns => [id, codigo, descricao, aplicacao];
  @override
  $CfopsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'CFOP';
  @override
  final String actualTableName = 'CFOP';
  @override
  VerificationContext validateIntegrity(Insertable<Cfop> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('CODIGO')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['CODIGO'], _codigoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO'], _descricaoMeta));
    }
    if (data.containsKey('APLICACAO')) {
      context.handle(_aplicacaoMeta,
          aplicacao.isAcceptableOrUnknown(data['APLICACAO'], _aplicacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Cfop map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return Cfop.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $CfopsTable createAlias(String alias) {
    return $CfopsTable(_db, alias);
  }
}

class Cliente extends DataClass implements Insertable<Cliente> {
  final int id;
  final String nome;
  final String fantasia;
  final String email;
  final String url;
  final String cpfCnpj;
  final String rg;
  final String orgaoRg;
  final DateTime dataEmissaoRg;
  final String sexo;
  final String inscricaoEstadual;
  final String inscricaoMunicipal;
  final String tipoPessoa;
  final DateTime dataCadastro;
  final String logradouro;
  final String numero;
  final String complemento;
  final String cep;
  final String bairro;
  final String cidade;
  final String uf;
  final String telefone;
  final String celular;
  final String contato;
  final int codigoIbgeCidade;
  final int codigoIbgeUf;
  Cliente(
      {@required this.id,
      this.nome,
      this.fantasia,
      this.email,
      this.url,
      this.cpfCnpj,
      this.rg,
      this.orgaoRg,
      this.dataEmissaoRg,
      this.sexo,
      this.inscricaoEstadual,
      this.inscricaoMunicipal,
      this.tipoPessoa,
      this.dataCadastro,
      this.logradouro,
      this.numero,
      this.complemento,
      this.cep,
      this.bairro,
      this.cidade,
      this.uf,
      this.telefone,
      this.celular,
      this.contato,
      this.codigoIbgeCidade,
      this.codigoIbgeUf});
  factory Cliente.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    return Cliente(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      nome: stringType.mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
      fantasia: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}FANTASIA']),
      email:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
      url: stringType.mapFromDatabaseResponse(data['${effectivePrefix}URL']),
      cpfCnpj: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CPF_CNPJ']),
      rg: stringType.mapFromDatabaseResponse(data['${effectivePrefix}RG']),
      orgaoRg: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}ORGAO_RG']),
      dataEmissaoRg: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO_RG']),
      sexo: stringType.mapFromDatabaseResponse(data['${effectivePrefix}SEXO']),
      inscricaoEstadual: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
      inscricaoMunicipal: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
      tipoPessoa: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_PESSOA']),
      dataCadastro: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_CADASTRO']),
      logradouro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
      numero:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
      complemento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
      cep: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
      bairro:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
      cidade:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CIDADE']),
      uf: stringType.mapFromDatabaseResponse(data['${effectivePrefix}UF']),
      telefone: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
      celular:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CELULAR']),
      contato:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CONTATO']),
      codigoIbgeCidade: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
      codigoIbgeUf: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_IBGE_UF']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || fantasia != null) {
      map['FANTASIA'] = Variable<String>(fantasia);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || url != null) {
      map['URL'] = Variable<String>(url);
    }
    if (!nullToAbsent || cpfCnpj != null) {
      map['CPF_CNPJ'] = Variable<String>(cpfCnpj);
    }
    if (!nullToAbsent || rg != null) {
      map['RG'] = Variable<String>(rg);
    }
    if (!nullToAbsent || orgaoRg != null) {
      map['ORGAO_RG'] = Variable<String>(orgaoRg);
    }
    if (!nullToAbsent || dataEmissaoRg != null) {
      map['DATA_EMISSAO_RG'] = Variable<DateTime>(dataEmissaoRg);
    }
    if (!nullToAbsent || sexo != null) {
      map['SEXO'] = Variable<String>(sexo);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || inscricaoMunicipal != null) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal);
    }
    if (!nullToAbsent || tipoPessoa != null) {
      map['TIPO_PESSOA'] = Variable<String>(tipoPessoa);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['CIDADE'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || celular != null) {
      map['CELULAR'] = Variable<String>(celular);
    }
    if (!nullToAbsent || contato != null) {
      map['CONTATO'] = Variable<String>(contato);
    }
    if (!nullToAbsent || codigoIbgeCidade != null) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade);
    }
    if (!nullToAbsent || codigoIbgeUf != null) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf);
    }
    return map;
  }

  ClientesCompanion toCompanion(bool nullToAbsent) {
    return ClientesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      fantasia: fantasia == null && nullToAbsent
          ? const Value.absent()
          : Value(fantasia),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      url: url == null && nullToAbsent ? const Value.absent() : Value(url),
      cpfCnpj: cpfCnpj == null && nullToAbsent
          ? const Value.absent()
          : Value(cpfCnpj),
      rg: rg == null && nullToAbsent ? const Value.absent() : Value(rg),
      orgaoRg: orgaoRg == null && nullToAbsent
          ? const Value.absent()
          : Value(orgaoRg),
      dataEmissaoRg: dataEmissaoRg == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissaoRg),
      sexo: sexo == null && nullToAbsent ? const Value.absent() : Value(sexo),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
      inscricaoMunicipal: inscricaoMunicipal == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoMunicipal),
      tipoPessoa: tipoPessoa == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoPessoa),
      dataCadastro: dataCadastro == null && nullToAbsent
          ? const Value.absent()
          : Value(dataCadastro),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      cidade:
          cidade == null && nullToAbsent ? const Value.absent() : Value(cidade),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      contato: contato == null && nullToAbsent
          ? const Value.absent()
          : Value(contato),
      codigoIbgeCidade: codigoIbgeCidade == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeCidade),
      codigoIbgeUf: codigoIbgeUf == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeUf),
    );
  }

  factory Cliente.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Cliente(
      id: serializer.fromJson<int>(json['id']),
      nome: serializer.fromJson<String>(json['nome']),
      fantasia: serializer.fromJson<String>(json['fantasia']),
      email: serializer.fromJson<String>(json['email']),
      url: serializer.fromJson<String>(json['url']),
      cpfCnpj: serializer.fromJson<String>(json['cpfCnpj']),
      rg: serializer.fromJson<String>(json['rg']),
      orgaoRg: serializer.fromJson<String>(json['orgaoRg']),
      dataEmissaoRg: serializer.fromJson<DateTime>(json['dataEmissaoRg']),
      sexo: serializer.fromJson<String>(json['sexo']),
      inscricaoEstadual: serializer.fromJson<String>(json['inscricaoEstadual']),
      inscricaoMunicipal:
          serializer.fromJson<String>(json['inscricaoMunicipal']),
      tipoPessoa: serializer.fromJson<String>(json['tipoPessoa']),
      dataCadastro: serializer.fromJson<DateTime>(json['dataCadastro']),
      logradouro: serializer.fromJson<String>(json['logradouro']),
      numero: serializer.fromJson<String>(json['numero']),
      complemento: serializer.fromJson<String>(json['complemento']),
      cep: serializer.fromJson<String>(json['cep']),
      bairro: serializer.fromJson<String>(json['bairro']),
      cidade: serializer.fromJson<String>(json['cidade']),
      uf: serializer.fromJson<String>(json['uf']),
      telefone: serializer.fromJson<String>(json['telefone']),
      celular: serializer.fromJson<String>(json['celular']),
      contato: serializer.fromJson<String>(json['contato']),
      codigoIbgeCidade: serializer.fromJson<int>(json['codigoIbgeCidade']),
      codigoIbgeUf: serializer.fromJson<int>(json['codigoIbgeUf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'nome': serializer.toJson<String>(nome),
      'fantasia': serializer.toJson<String>(fantasia),
      'email': serializer.toJson<String>(email),
      'url': serializer.toJson<String>(url),
      'cpfCnpj': serializer.toJson<String>(cpfCnpj),
      'rg': serializer.toJson<String>(rg),
      'orgaoRg': serializer.toJson<String>(orgaoRg),
      'dataEmissaoRg': serializer.toJson<DateTime>(dataEmissaoRg),
      'sexo': serializer.toJson<String>(sexo),
      'inscricaoEstadual': serializer.toJson<String>(inscricaoEstadual),
      'inscricaoMunicipal': serializer.toJson<String>(inscricaoMunicipal),
      'tipoPessoa': serializer.toJson<String>(tipoPessoa),
      'dataCadastro': serializer.toJson<DateTime>(dataCadastro),
      'logradouro': serializer.toJson<String>(logradouro),
      'numero': serializer.toJson<String>(numero),
      'complemento': serializer.toJson<String>(complemento),
      'cep': serializer.toJson<String>(cep),
      'bairro': serializer.toJson<String>(bairro),
      'cidade': serializer.toJson<String>(cidade),
      'uf': serializer.toJson<String>(uf),
      'telefone': serializer.toJson<String>(telefone),
      'celular': serializer.toJson<String>(celular),
      'contato': serializer.toJson<String>(contato),
      'codigoIbgeCidade': serializer.toJson<int>(codigoIbgeCidade),
      'codigoIbgeUf': serializer.toJson<int>(codigoIbgeUf),
    };
  }

  Cliente copyWith(
          {int id,
          String nome,
          String fantasia,
          String email,
          String url,
          String cpfCnpj,
          String rg,
          String orgaoRg,
          DateTime dataEmissaoRg,
          String sexo,
          String inscricaoEstadual,
          String inscricaoMunicipal,
          String tipoPessoa,
          DateTime dataCadastro,
          String logradouro,
          String numero,
          String complemento,
          String cep,
          String bairro,
          String cidade,
          String uf,
          String telefone,
          String celular,
          String contato,
          int codigoIbgeCidade,
          int codigoIbgeUf}) =>
      Cliente(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        fantasia: fantasia ?? this.fantasia,
        email: email ?? this.email,
        url: url ?? this.url,
        cpfCnpj: cpfCnpj ?? this.cpfCnpj,
        rg: rg ?? this.rg,
        orgaoRg: orgaoRg ?? this.orgaoRg,
        dataEmissaoRg: dataEmissaoRg ?? this.dataEmissaoRg,
        sexo: sexo ?? this.sexo,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
        inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
        tipoPessoa: tipoPessoa ?? this.tipoPessoa,
        dataCadastro: dataCadastro ?? this.dataCadastro,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        cep: cep ?? this.cep,
        bairro: bairro ?? this.bairro,
        cidade: cidade ?? this.cidade,
        uf: uf ?? this.uf,
        telefone: telefone ?? this.telefone,
        celular: celular ?? this.celular,
        contato: contato ?? this.contato,
        codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
        codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
      );
  @override
  String toString() {
    return (StringBuffer('Cliente(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('email: $email, ')
          ..write('url: $url, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rg: $rg, ')
          ..write('orgaoRg: $orgaoRg, ')
          ..write('dataEmissaoRg: $dataEmissaoRg, ')
          ..write('sexo: $sexo, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoPessoa: $tipoPessoa, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          nome.hashCode,
          $mrjc(
              fantasia.hashCode,
              $mrjc(
                  email.hashCode,
                  $mrjc(
                      url.hashCode,
                      $mrjc(
                          cpfCnpj.hashCode,
                          $mrjc(
                              rg.hashCode,
                              $mrjc(
                                  orgaoRg.hashCode,
                                  $mrjc(
                                      dataEmissaoRg.hashCode,
                                      $mrjc(
                                          sexo.hashCode,
                                          $mrjc(
                                              inscricaoEstadual.hashCode,
                                              $mrjc(
                                                  inscricaoMunicipal.hashCode,
                                                  $mrjc(
                                                      tipoPessoa.hashCode,
                                                      $mrjc(
                                                          dataCadastro.hashCode,
                                                          $mrjc(
                                                              logradouro
                                                                  .hashCode,
                                                              $mrjc(
                                                                  numero
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      complemento
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          cep
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              bairro.hashCode,
                                                                              $mrjc(cidade.hashCode, $mrjc(uf.hashCode, $mrjc(telefone.hashCode, $mrjc(celular.hashCode, $mrjc(contato.hashCode, $mrjc(codigoIbgeCidade.hashCode, codigoIbgeUf.hashCode))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is Cliente &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.fantasia == this.fantasia &&
          other.email == this.email &&
          other.url == this.url &&
          other.cpfCnpj == this.cpfCnpj &&
          other.rg == this.rg &&
          other.orgaoRg == this.orgaoRg &&
          other.dataEmissaoRg == this.dataEmissaoRg &&
          other.sexo == this.sexo &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.inscricaoMunicipal == this.inscricaoMunicipal &&
          other.tipoPessoa == this.tipoPessoa &&
          other.dataCadastro == this.dataCadastro &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.cep == this.cep &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.uf == this.uf &&
          other.telefone == this.telefone &&
          other.celular == this.celular &&
          other.contato == this.contato &&
          other.codigoIbgeCidade == this.codigoIbgeCidade &&
          other.codigoIbgeUf == this.codigoIbgeUf);
}

class ClientesCompanion extends UpdateCompanion<Cliente> {
  final Value<int> id;
  final Value<String> nome;
  final Value<String> fantasia;
  final Value<String> email;
  final Value<String> url;
  final Value<String> cpfCnpj;
  final Value<String> rg;
  final Value<String> orgaoRg;
  final Value<DateTime> dataEmissaoRg;
  final Value<String> sexo;
  final Value<String> inscricaoEstadual;
  final Value<String> inscricaoMunicipal;
  final Value<String> tipoPessoa;
  final Value<DateTime> dataCadastro;
  final Value<String> logradouro;
  final Value<String> numero;
  final Value<String> complemento;
  final Value<String> cep;
  final Value<String> bairro;
  final Value<String> cidade;
  final Value<String> uf;
  final Value<String> telefone;
  final Value<String> celular;
  final Value<String> contato;
  final Value<int> codigoIbgeCidade;
  final Value<int> codigoIbgeUf;
  const ClientesCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.email = const Value.absent(),
    this.url = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rg = const Value.absent(),
    this.orgaoRg = const Value.absent(),
    this.dataEmissaoRg = const Value.absent(),
    this.sexo = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoPessoa = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
  });
  ClientesCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.email = const Value.absent(),
    this.url = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rg = const Value.absent(),
    this.orgaoRg = const Value.absent(),
    this.dataEmissaoRg = const Value.absent(),
    this.sexo = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoPessoa = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
  });
  static Insertable<Cliente> custom({
    Expression<int> id,
    Expression<String> nome,
    Expression<String> fantasia,
    Expression<String> email,
    Expression<String> url,
    Expression<String> cpfCnpj,
    Expression<String> rg,
    Expression<String> orgaoRg,
    Expression<DateTime> dataEmissaoRg,
    Expression<String> sexo,
    Expression<String> inscricaoEstadual,
    Expression<String> inscricaoMunicipal,
    Expression<String> tipoPessoa,
    Expression<DateTime> dataCadastro,
    Expression<String> logradouro,
    Expression<String> numero,
    Expression<String> complemento,
    Expression<String> cep,
    Expression<String> bairro,
    Expression<String> cidade,
    Expression<String> uf,
    Expression<String> telefone,
    Expression<String> celular,
    Expression<String> contato,
    Expression<int> codigoIbgeCidade,
    Expression<int> codigoIbgeUf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (fantasia != null) 'FANTASIA': fantasia,
      if (email != null) 'EMAIL': email,
      if (url != null) 'URL': url,
      if (cpfCnpj != null) 'CPF_CNPJ': cpfCnpj,
      if (rg != null) 'RG': rg,
      if (orgaoRg != null) 'ORGAO_RG': orgaoRg,
      if (dataEmissaoRg != null) 'DATA_EMISSAO_RG': dataEmissaoRg,
      if (sexo != null) 'SEXO': sexo,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
      if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
      if (tipoPessoa != null) 'TIPO_PESSOA': tipoPessoa,
      if (dataCadastro != null) 'DATA_CADASTRO': dataCadastro,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (cep != null) 'CEP': cep,
      if (bairro != null) 'BAIRRO': bairro,
      if (cidade != null) 'CIDADE': cidade,
      if (uf != null) 'UF': uf,
      if (telefone != null) 'TELEFONE': telefone,
      if (celular != null) 'CELULAR': celular,
      if (contato != null) 'CONTATO': contato,
      if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
      if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
    });
  }

  ClientesCompanion copyWith(
      {Value<int> id,
      Value<String> nome,
      Value<String> fantasia,
      Value<String> email,
      Value<String> url,
      Value<String> cpfCnpj,
      Value<String> rg,
      Value<String> orgaoRg,
      Value<DateTime> dataEmissaoRg,
      Value<String> sexo,
      Value<String> inscricaoEstadual,
      Value<String> inscricaoMunicipal,
      Value<String> tipoPessoa,
      Value<DateTime> dataCadastro,
      Value<String> logradouro,
      Value<String> numero,
      Value<String> complemento,
      Value<String> cep,
      Value<String> bairro,
      Value<String> cidade,
      Value<String> uf,
      Value<String> telefone,
      Value<String> celular,
      Value<String> contato,
      Value<int> codigoIbgeCidade,
      Value<int> codigoIbgeUf}) {
    return ClientesCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      fantasia: fantasia ?? this.fantasia,
      email: email ?? this.email,
      url: url ?? this.url,
      cpfCnpj: cpfCnpj ?? this.cpfCnpj,
      rg: rg ?? this.rg,
      orgaoRg: orgaoRg ?? this.orgaoRg,
      dataEmissaoRg: dataEmissaoRg ?? this.dataEmissaoRg,
      sexo: sexo ?? this.sexo,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
      tipoPessoa: tipoPessoa ?? this.tipoPessoa,
      dataCadastro: dataCadastro ?? this.dataCadastro,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      cep: cep ?? this.cep,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      uf: uf ?? this.uf,
      telefone: telefone ?? this.telefone,
      celular: celular ?? this.celular,
      contato: contato ?? this.contato,
      codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
      codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (fantasia.present) {
      map['FANTASIA'] = Variable<String>(fantasia.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (url.present) {
      map['URL'] = Variable<String>(url.value);
    }
    if (cpfCnpj.present) {
      map['CPF_CNPJ'] = Variable<String>(cpfCnpj.value);
    }
    if (rg.present) {
      map['RG'] = Variable<String>(rg.value);
    }
    if (orgaoRg.present) {
      map['ORGAO_RG'] = Variable<String>(orgaoRg.value);
    }
    if (dataEmissaoRg.present) {
      map['DATA_EMISSAO_RG'] = Variable<DateTime>(dataEmissaoRg.value);
    }
    if (sexo.present) {
      map['SEXO'] = Variable<String>(sexo.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    if (inscricaoMunicipal.present) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal.value);
    }
    if (tipoPessoa.present) {
      map['TIPO_PESSOA'] = Variable<String>(tipoPessoa.value);
    }
    if (dataCadastro.present) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['CIDADE'] = Variable<String>(cidade.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (celular.present) {
      map['CELULAR'] = Variable<String>(celular.value);
    }
    if (contato.present) {
      map['CONTATO'] = Variable<String>(contato.value);
    }
    if (codigoIbgeCidade.present) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade.value);
    }
    if (codigoIbgeUf.present) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ClientesCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('email: $email, ')
          ..write('url: $url, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rg: $rg, ')
          ..write('orgaoRg: $orgaoRg, ')
          ..write('dataEmissaoRg: $dataEmissaoRg, ')
          ..write('sexo: $sexo, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoPessoa: $tipoPessoa, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf')
          ..write(')'))
        .toString();
  }
}

class $ClientesTable extends Clientes with TableInfo<$ClientesTable, Cliente> {
  final GeneratedDatabase _db;
  final String _alias;
  $ClientesTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  GeneratedTextColumn _nome;
  @override
  GeneratedTextColumn get nome => _nome ??= _constructNome();
  GeneratedTextColumn _constructNome() {
    return GeneratedTextColumn('NOME', $tableName, true,
        minTextLength: 1, maxTextLength: 150);
  }

  final VerificationMeta _fantasiaMeta = const VerificationMeta('fantasia');
  GeneratedTextColumn _fantasia;
  @override
  GeneratedTextColumn get fantasia => _fantasia ??= _constructFantasia();
  GeneratedTextColumn _constructFantasia() {
    return GeneratedTextColumn('FANTASIA', $tableName, true,
        minTextLength: 1, maxTextLength: 150);
  }

  final VerificationMeta _emailMeta = const VerificationMeta('email');
  GeneratedTextColumn _email;
  @override
  GeneratedTextColumn get email => _email ??= _constructEmail();
  GeneratedTextColumn _constructEmail() {
    return GeneratedTextColumn('EMAIL', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _urlMeta = const VerificationMeta('url');
  GeneratedTextColumn _url;
  @override
  GeneratedTextColumn get url => _url ??= _constructUrl();
  GeneratedTextColumn _constructUrl() {
    return GeneratedTextColumn('URL', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _cpfCnpjMeta = const VerificationMeta('cpfCnpj');
  GeneratedTextColumn _cpfCnpj;
  @override
  GeneratedTextColumn get cpfCnpj => _cpfCnpj ??= _constructCpfCnpj();
  GeneratedTextColumn _constructCpfCnpj() {
    return GeneratedTextColumn('CPF_CNPJ', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _rgMeta = const VerificationMeta('rg');
  GeneratedTextColumn _rg;
  @override
  GeneratedTextColumn get rg => _rg ??= _constructRg();
  GeneratedTextColumn _constructRg() {
    return GeneratedTextColumn('RG', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _orgaoRgMeta = const VerificationMeta('orgaoRg');
  GeneratedTextColumn _orgaoRg;
  @override
  GeneratedTextColumn get orgaoRg => _orgaoRg ??= _constructOrgaoRg();
  GeneratedTextColumn _constructOrgaoRg() {
    return GeneratedTextColumn('ORGAO_RG', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _dataEmissaoRgMeta =
      const VerificationMeta('dataEmissaoRg');
  GeneratedDateTimeColumn _dataEmissaoRg;
  @override
  GeneratedDateTimeColumn get dataEmissaoRg =>
      _dataEmissaoRg ??= _constructDataEmissaoRg();
  GeneratedDateTimeColumn _constructDataEmissaoRg() {
    return GeneratedDateTimeColumn(
      'DATA_EMISSAO_RG',
      $tableName,
      true,
    );
  }

  final VerificationMeta _sexoMeta = const VerificationMeta('sexo');
  GeneratedTextColumn _sexo;
  @override
  GeneratedTextColumn get sexo => _sexo ??= _constructSexo();
  GeneratedTextColumn _constructSexo() {
    return GeneratedTextColumn('SEXO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  GeneratedTextColumn _inscricaoEstadual;
  @override
  GeneratedTextColumn get inscricaoEstadual =>
      _inscricaoEstadual ??= _constructInscricaoEstadual();
  GeneratedTextColumn _constructInscricaoEstadual() {
    return GeneratedTextColumn('INSCRICAO_ESTADUAL', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _inscricaoMunicipalMeta =
      const VerificationMeta('inscricaoMunicipal');
  GeneratedTextColumn _inscricaoMunicipal;
  @override
  GeneratedTextColumn get inscricaoMunicipal =>
      _inscricaoMunicipal ??= _constructInscricaoMunicipal();
  GeneratedTextColumn _constructInscricaoMunicipal() {
    return GeneratedTextColumn('INSCRICAO_MUNICIPAL', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _tipoPessoaMeta = const VerificationMeta('tipoPessoa');
  GeneratedTextColumn _tipoPessoa;
  @override
  GeneratedTextColumn get tipoPessoa => _tipoPessoa ??= _constructTipoPessoa();
  GeneratedTextColumn _constructTipoPessoa() {
    return GeneratedTextColumn('TIPO_PESSOA', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _dataCadastroMeta =
      const VerificationMeta('dataCadastro');
  GeneratedDateTimeColumn _dataCadastro;
  @override
  GeneratedDateTimeColumn get dataCadastro =>
      _dataCadastro ??= _constructDataCadastro();
  GeneratedDateTimeColumn _constructDataCadastro() {
    return GeneratedDateTimeColumn(
      'DATA_CADASTRO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  GeneratedTextColumn _logradouro;
  @override
  GeneratedTextColumn get logradouro => _logradouro ??= _constructLogradouro();
  GeneratedTextColumn _constructLogradouro() {
    return GeneratedTextColumn('LOGRADOURO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  GeneratedTextColumn _numero;
  @override
  GeneratedTextColumn get numero => _numero ??= _constructNumero();
  GeneratedTextColumn _constructNumero() {
    return GeneratedTextColumn('NUMERO', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  GeneratedTextColumn _complemento;
  @override
  GeneratedTextColumn get complemento =>
      _complemento ??= _constructComplemento();
  GeneratedTextColumn _constructComplemento() {
    return GeneratedTextColumn('COMPLEMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  GeneratedTextColumn _cep;
  @override
  GeneratedTextColumn get cep => _cep ??= _constructCep();
  GeneratedTextColumn _constructCep() {
    return GeneratedTextColumn('CEP', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  GeneratedTextColumn _bairro;
  @override
  GeneratedTextColumn get bairro => _bairro ??= _constructBairro();
  GeneratedTextColumn _constructBairro() {
    return GeneratedTextColumn('BAIRRO', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  GeneratedTextColumn _cidade;
  @override
  GeneratedTextColumn get cidade => _cidade ??= _constructCidade();
  GeneratedTextColumn _constructCidade() {
    return GeneratedTextColumn('CIDADE', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  GeneratedTextColumn _uf;
  @override
  GeneratedTextColumn get uf => _uf ??= _constructUf();
  GeneratedTextColumn _constructUf() {
    return GeneratedTextColumn('UF', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  GeneratedTextColumn _telefone;
  @override
  GeneratedTextColumn get telefone => _telefone ??= _constructTelefone();
  GeneratedTextColumn _constructTelefone() {
    return GeneratedTextColumn('TELEFONE', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  GeneratedTextColumn _celular;
  @override
  GeneratedTextColumn get celular => _celular ??= _constructCelular();
  GeneratedTextColumn _constructCelular() {
    return GeneratedTextColumn('CELULAR', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _contatoMeta = const VerificationMeta('contato');
  GeneratedTextColumn _contato;
  @override
  GeneratedTextColumn get contato => _contato ??= _constructContato();
  GeneratedTextColumn _constructContato() {
    return GeneratedTextColumn('CONTATO', $tableName, true,
        minTextLength: 1, maxTextLength: 50);
  }

  final VerificationMeta _codigoIbgeCidadeMeta =
      const VerificationMeta('codigoIbgeCidade');
  GeneratedIntColumn _codigoIbgeCidade;
  @override
  GeneratedIntColumn get codigoIbgeCidade =>
      _codigoIbgeCidade ??= _constructCodigoIbgeCidade();
  GeneratedIntColumn _constructCodigoIbgeCidade() {
    return GeneratedIntColumn(
      'CODIGO_IBGE_CIDADE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _codigoIbgeUfMeta =
      const VerificationMeta('codigoIbgeUf');
  GeneratedIntColumn _codigoIbgeUf;
  @override
  GeneratedIntColumn get codigoIbgeUf =>
      _codigoIbgeUf ??= _constructCodigoIbgeUf();
  GeneratedIntColumn _constructCodigoIbgeUf() {
    return GeneratedIntColumn(
      'CODIGO_IBGE_UF',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        nome,
        fantasia,
        email,
        url,
        cpfCnpj,
        rg,
        orgaoRg,
        dataEmissaoRg,
        sexo,
        inscricaoEstadual,
        inscricaoMunicipal,
        tipoPessoa,
        dataCadastro,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        telefone,
        celular,
        contato,
        codigoIbgeCidade,
        codigoIbgeUf
      ];
  @override
  $ClientesTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'CLIENTE';
  @override
  final String actualTableName = 'CLIENTE';
  @override
  VerificationContext validateIntegrity(Insertable<Cliente> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME'], _nomeMeta));
    }
    if (data.containsKey('FANTASIA')) {
      context.handle(_fantasiaMeta,
          fantasia.isAcceptableOrUnknown(data['FANTASIA'], _fantasiaMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL'], _emailMeta));
    }
    if (data.containsKey('URL')) {
      context.handle(
          _urlMeta, url.isAcceptableOrUnknown(data['URL'], _urlMeta));
    }
    if (data.containsKey('CPF_CNPJ')) {
      context.handle(_cpfCnpjMeta,
          cpfCnpj.isAcceptableOrUnknown(data['CPF_CNPJ'], _cpfCnpjMeta));
    }
    if (data.containsKey('RG')) {
      context.handle(_rgMeta, rg.isAcceptableOrUnknown(data['RG'], _rgMeta));
    }
    if (data.containsKey('ORGAO_RG')) {
      context.handle(_orgaoRgMeta,
          orgaoRg.isAcceptableOrUnknown(data['ORGAO_RG'], _orgaoRgMeta));
    }
    if (data.containsKey('DATA_EMISSAO_RG')) {
      context.handle(
          _dataEmissaoRgMeta,
          dataEmissaoRg.isAcceptableOrUnknown(
              data['DATA_EMISSAO_RG'], _dataEmissaoRgMeta));
    }
    if (data.containsKey('SEXO')) {
      context.handle(
          _sexoMeta, sexo.isAcceptableOrUnknown(data['SEXO'], _sexoMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL'], _inscricaoEstadualMeta));
    }
    if (data.containsKey('INSCRICAO_MUNICIPAL')) {
      context.handle(
          _inscricaoMunicipalMeta,
          inscricaoMunicipal.isAcceptableOrUnknown(
              data['INSCRICAO_MUNICIPAL'], _inscricaoMunicipalMeta));
    }
    if (data.containsKey('TIPO_PESSOA')) {
      context.handle(
          _tipoPessoaMeta,
          tipoPessoa.isAcceptableOrUnknown(
              data['TIPO_PESSOA'], _tipoPessoaMeta));
    }
    if (data.containsKey('DATA_CADASTRO')) {
      context.handle(
          _dataCadastroMeta,
          dataCadastro.isAcceptableOrUnknown(
              data['DATA_CADASTRO'], _dataCadastroMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO'], _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO'], _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO'], _complementoMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP'], _cepMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO'], _bairroMeta));
    }
    if (data.containsKey('CIDADE')) {
      context.handle(_cidadeMeta,
          cidade.isAcceptableOrUnknown(data['CIDADE'], _cidadeMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF'], _ufMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE'], _telefoneMeta));
    }
    if (data.containsKey('CELULAR')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['CELULAR'], _celularMeta));
    }
    if (data.containsKey('CONTATO')) {
      context.handle(_contatoMeta,
          contato.isAcceptableOrUnknown(data['CONTATO'], _contatoMeta));
    }
    if (data.containsKey('CODIGO_IBGE_CIDADE')) {
      context.handle(
          _codigoIbgeCidadeMeta,
          codigoIbgeCidade.isAcceptableOrUnknown(
              data['CODIGO_IBGE_CIDADE'], _codigoIbgeCidadeMeta));
    }
    if (data.containsKey('CODIGO_IBGE_UF')) {
      context.handle(
          _codigoIbgeUfMeta,
          codigoIbgeUf.isAcceptableOrUnknown(
              data['CODIGO_IBGE_UF'], _codigoIbgeUfMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Cliente map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return Cliente.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $ClientesTable createAlias(String alias) {
    return $ClientesTable(_db, alias);
  }
}

class Colaborador extends DataClass implements Insertable<Colaborador> {
  final int id;
  final String nome;
  final String cpf;
  final String telefone;
  final String celular;
  final String email;
  final double comissaoVista;
  final double comissaoPrazo;
  final String nivelAutorizacao;
  Colaborador(
      {@required this.id,
      this.nome,
      this.cpf,
      this.telefone,
      this.celular,
      this.email,
      this.comissaoVista,
      this.comissaoPrazo,
      this.nivelAutorizacao});
  factory Colaborador.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return Colaborador(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      nome: stringType.mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
      cpf: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
      telefone: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
      celular:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CELULAR']),
      email:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
      comissaoVista: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}COMISSAO_VISTA']),
      comissaoPrazo: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}COMISSAO_PRAZO']),
      nivelAutorizacao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}NIVEL_AUTORIZACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || celular != null) {
      map['CELULAR'] = Variable<String>(celular);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || comissaoVista != null) {
      map['COMISSAO_VISTA'] = Variable<double>(comissaoVista);
    }
    if (!nullToAbsent || comissaoPrazo != null) {
      map['COMISSAO_PRAZO'] = Variable<double>(comissaoPrazo);
    }
    if (!nullToAbsent || nivelAutorizacao != null) {
      map['NIVEL_AUTORIZACAO'] = Variable<String>(nivelAutorizacao);
    }
    return map;
  }

  ColaboradorsCompanion toCompanion(bool nullToAbsent) {
    return ColaboradorsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      comissaoVista: comissaoVista == null && nullToAbsent
          ? const Value.absent()
          : Value(comissaoVista),
      comissaoPrazo: comissaoPrazo == null && nullToAbsent
          ? const Value.absent()
          : Value(comissaoPrazo),
      nivelAutorizacao: nivelAutorizacao == null && nullToAbsent
          ? const Value.absent()
          : Value(nivelAutorizacao),
    );
  }

  factory Colaborador.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Colaborador(
      id: serializer.fromJson<int>(json['id']),
      nome: serializer.fromJson<String>(json['nome']),
      cpf: serializer.fromJson<String>(json['cpf']),
      telefone: serializer.fromJson<String>(json['telefone']),
      celular: serializer.fromJson<String>(json['celular']),
      email: serializer.fromJson<String>(json['email']),
      comissaoVista: serializer.fromJson<double>(json['comissaoVista']),
      comissaoPrazo: serializer.fromJson<double>(json['comissaoPrazo']),
      nivelAutorizacao: serializer.fromJson<String>(json['nivelAutorizacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'nome': serializer.toJson<String>(nome),
      'cpf': serializer.toJson<String>(cpf),
      'telefone': serializer.toJson<String>(telefone),
      'celular': serializer.toJson<String>(celular),
      'email': serializer.toJson<String>(email),
      'comissaoVista': serializer.toJson<double>(comissaoVista),
      'comissaoPrazo': serializer.toJson<double>(comissaoPrazo),
      'nivelAutorizacao': serializer.toJson<String>(nivelAutorizacao),
    };
  }

  Colaborador copyWith(
          {int id,
          String nome,
          String cpf,
          String telefone,
          String celular,
          String email,
          double comissaoVista,
          double comissaoPrazo,
          String nivelAutorizacao}) =>
      Colaborador(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        cpf: cpf ?? this.cpf,
        telefone: telefone ?? this.telefone,
        celular: celular ?? this.celular,
        email: email ?? this.email,
        comissaoVista: comissaoVista ?? this.comissaoVista,
        comissaoPrazo: comissaoPrazo ?? this.comissaoPrazo,
        nivelAutorizacao: nivelAutorizacao ?? this.nivelAutorizacao,
      );
  @override
  String toString() {
    return (StringBuffer('Colaborador(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('cpf: $cpf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('email: $email, ')
          ..write('comissaoVista: $comissaoVista, ')
          ..write('comissaoPrazo: $comissaoPrazo, ')
          ..write('nivelAutorizacao: $nivelAutorizacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          nome.hashCode,
          $mrjc(
              cpf.hashCode,
              $mrjc(
                  telefone.hashCode,
                  $mrjc(
                      celular.hashCode,
                      $mrjc(
                          email.hashCode,
                          $mrjc(
                              comissaoVista.hashCode,
                              $mrjc(comissaoPrazo.hashCode,
                                  nivelAutorizacao.hashCode)))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is Colaborador &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.cpf == this.cpf &&
          other.telefone == this.telefone &&
          other.celular == this.celular &&
          other.email == this.email &&
          other.comissaoVista == this.comissaoVista &&
          other.comissaoPrazo == this.comissaoPrazo &&
          other.nivelAutorizacao == this.nivelAutorizacao);
}

class ColaboradorsCompanion extends UpdateCompanion<Colaborador> {
  final Value<int> id;
  final Value<String> nome;
  final Value<String> cpf;
  final Value<String> telefone;
  final Value<String> celular;
  final Value<String> email;
  final Value<double> comissaoVista;
  final Value<double> comissaoPrazo;
  final Value<String> nivelAutorizacao;
  const ColaboradorsCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.cpf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.email = const Value.absent(),
    this.comissaoVista = const Value.absent(),
    this.comissaoPrazo = const Value.absent(),
    this.nivelAutorizacao = const Value.absent(),
  });
  ColaboradorsCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.cpf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.email = const Value.absent(),
    this.comissaoVista = const Value.absent(),
    this.comissaoPrazo = const Value.absent(),
    this.nivelAutorizacao = const Value.absent(),
  });
  static Insertable<Colaborador> custom({
    Expression<int> id,
    Expression<String> nome,
    Expression<String> cpf,
    Expression<String> telefone,
    Expression<String> celular,
    Expression<String> email,
    Expression<double> comissaoVista,
    Expression<double> comissaoPrazo,
    Expression<String> nivelAutorizacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (cpf != null) 'CPF': cpf,
      if (telefone != null) 'TELEFONE': telefone,
      if (celular != null) 'CELULAR': celular,
      if (email != null) 'EMAIL': email,
      if (comissaoVista != null) 'COMISSAO_VISTA': comissaoVista,
      if (comissaoPrazo != null) 'COMISSAO_PRAZO': comissaoPrazo,
      if (nivelAutorizacao != null) 'NIVEL_AUTORIZACAO': nivelAutorizacao,
    });
  }

  ColaboradorsCompanion copyWith(
      {Value<int> id,
      Value<String> nome,
      Value<String> cpf,
      Value<String> telefone,
      Value<String> celular,
      Value<String> email,
      Value<double> comissaoVista,
      Value<double> comissaoPrazo,
      Value<String> nivelAutorizacao}) {
    return ColaboradorsCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      cpf: cpf ?? this.cpf,
      telefone: telefone ?? this.telefone,
      celular: celular ?? this.celular,
      email: email ?? this.email,
      comissaoVista: comissaoVista ?? this.comissaoVista,
      comissaoPrazo: comissaoPrazo ?? this.comissaoPrazo,
      nivelAutorizacao: nivelAutorizacao ?? this.nivelAutorizacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (celular.present) {
      map['CELULAR'] = Variable<String>(celular.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (comissaoVista.present) {
      map['COMISSAO_VISTA'] = Variable<double>(comissaoVista.value);
    }
    if (comissaoPrazo.present) {
      map['COMISSAO_PRAZO'] = Variable<double>(comissaoPrazo.value);
    }
    if (nivelAutorizacao.present) {
      map['NIVEL_AUTORIZACAO'] = Variable<String>(nivelAutorizacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ColaboradorsCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('cpf: $cpf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('email: $email, ')
          ..write('comissaoVista: $comissaoVista, ')
          ..write('comissaoPrazo: $comissaoPrazo, ')
          ..write('nivelAutorizacao: $nivelAutorizacao')
          ..write(')'))
        .toString();
  }
}

class $ColaboradorsTable extends Colaboradors
    with TableInfo<$ColaboradorsTable, Colaborador> {
  final GeneratedDatabase _db;
  final String _alias;
  $ColaboradorsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  GeneratedTextColumn _nome;
  @override
  GeneratedTextColumn get nome => _nome ??= _constructNome();
  GeneratedTextColumn _constructNome() {
    return GeneratedTextColumn('NOME', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  GeneratedTextColumn _cpf;
  @override
  GeneratedTextColumn get cpf => _cpf ??= _constructCpf();
  GeneratedTextColumn _constructCpf() {
    return GeneratedTextColumn('CPF', $tableName, true,
        minTextLength: 1, maxTextLength: 11);
  }

  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  GeneratedTextColumn _telefone;
  @override
  GeneratedTextColumn get telefone => _telefone ??= _constructTelefone();
  GeneratedTextColumn _constructTelefone() {
    return GeneratedTextColumn('TELEFONE', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  GeneratedTextColumn _celular;
  @override
  GeneratedTextColumn get celular => _celular ??= _constructCelular();
  GeneratedTextColumn _constructCelular() {
    return GeneratedTextColumn('CELULAR', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _emailMeta = const VerificationMeta('email');
  GeneratedTextColumn _email;
  @override
  GeneratedTextColumn get email => _email ??= _constructEmail();
  GeneratedTextColumn _constructEmail() {
    return GeneratedTextColumn('EMAIL', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _comissaoVistaMeta =
      const VerificationMeta('comissaoVista');
  GeneratedRealColumn _comissaoVista;
  @override
  GeneratedRealColumn get comissaoVista =>
      _comissaoVista ??= _constructComissaoVista();
  GeneratedRealColumn _constructComissaoVista() {
    return GeneratedRealColumn(
      'COMISSAO_VISTA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _comissaoPrazoMeta =
      const VerificationMeta('comissaoPrazo');
  GeneratedRealColumn _comissaoPrazo;
  @override
  GeneratedRealColumn get comissaoPrazo =>
      _comissaoPrazo ??= _constructComissaoPrazo();
  GeneratedRealColumn _constructComissaoPrazo() {
    return GeneratedRealColumn(
      'COMISSAO_PRAZO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nivelAutorizacaoMeta =
      const VerificationMeta('nivelAutorizacao');
  GeneratedTextColumn _nivelAutorizacao;
  @override
  GeneratedTextColumn get nivelAutorizacao =>
      _nivelAutorizacao ??= _constructNivelAutorizacao();
  GeneratedTextColumn _constructNivelAutorizacao() {
    return GeneratedTextColumn('NIVEL_AUTORIZACAO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        nome,
        cpf,
        telefone,
        celular,
        email,
        comissaoVista,
        comissaoPrazo,
        nivelAutorizacao
      ];
  @override
  $ColaboradorsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'COLABORADOR';
  @override
  final String actualTableName = 'COLABORADOR';
  @override
  VerificationContext validateIntegrity(Insertable<Colaborador> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME'], _nomeMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF'], _cpfMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE'], _telefoneMeta));
    }
    if (data.containsKey('CELULAR')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['CELULAR'], _celularMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL'], _emailMeta));
    }
    if (data.containsKey('COMISSAO_VISTA')) {
      context.handle(
          _comissaoVistaMeta,
          comissaoVista.isAcceptableOrUnknown(
              data['COMISSAO_VISTA'], _comissaoVistaMeta));
    }
    if (data.containsKey('COMISSAO_PRAZO')) {
      context.handle(
          _comissaoPrazoMeta,
          comissaoPrazo.isAcceptableOrUnknown(
              data['COMISSAO_PRAZO'], _comissaoPrazoMeta));
    }
    if (data.containsKey('NIVEL_AUTORIZACAO')) {
      context.handle(
          _nivelAutorizacaoMeta,
          nivelAutorizacao.isAcceptableOrUnknown(
              data['NIVEL_AUTORIZACAO'], _nivelAutorizacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Colaborador map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return Colaborador.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $ColaboradorsTable createAlias(String alias) {
    return $ColaboradorsTable(_db, alias);
  }
}

class CompraPedidoCabecalho extends DataClass
    implements Insertable<CompraPedidoCabecalho> {
  final int id;
  final int idColaborador;
  final int idFornecedor;
  final DateTime dataPedido;
  final DateTime dataPrevisaoEntrega;
  final DateTime dataPrevisaoPagamento;
  final String localEntrega;
  final String localCobranca;
  final String contato;
  final double valorSubtotal;
  final double taxaDesconto;
  final double valorDesconto;
  final double valorTotal;
  final String formaPagamento;
  final String geraFinanceiro;
  final int quantidadeParcelas;
  final DateTime diaPrimeiroVencimento;
  final int intervaloEntreParcelas;
  final String diaFixoParcela;
  final DateTime dataRecebimentoItens;
  final String horaRecebimentoItens;
  final String atualizouEstoque;
  final String numeroDocumentoEntrada;
  CompraPedidoCabecalho(
      {@required this.id,
      this.idColaborador,
      this.idFornecedor,
      this.dataPedido,
      this.dataPrevisaoEntrega,
      this.dataPrevisaoPagamento,
      this.localEntrega,
      this.localCobranca,
      this.contato,
      this.valorSubtotal,
      this.taxaDesconto,
      this.valorDesconto,
      this.valorTotal,
      this.formaPagamento,
      this.geraFinanceiro,
      this.quantidadeParcelas,
      this.diaPrimeiroVencimento,
      this.intervaloEntreParcelas,
      this.diaFixoParcela,
      this.dataRecebimentoItens,
      this.horaRecebimentoItens,
      this.atualizouEstoque,
      this.numeroDocumentoEntrada});
  factory CompraPedidoCabecalho.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return CompraPedidoCabecalho(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idColaborador: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_COLABORADOR']),
      idFornecedor: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_FORNECEDOR']),
      dataPedido: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_PEDIDO']),
      dataPrevisaoEntrega: dateTimeType.mapFromDatabaseResponse(
          data['${effectivePrefix}DATA_PREVISAO_ENTREGA']),
      dataPrevisaoPagamento: dateTimeType.mapFromDatabaseResponse(
          data['${effectivePrefix}DATA_PREVISAO_PAGAMENTO']),
      localEntrega: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}LOCAL_ENTREGA']),
      localCobranca: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}LOCAL_COBRANCA']),
      contato:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CONTATO']),
      valorSubtotal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_SUBTOTAL']),
      taxaDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
      valorDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
      valorTotal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL']),
      formaPagamento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}FORMA_PAGAMENTO']),
      geraFinanceiro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}GERA_FINANCEIRO']),
      quantidadeParcelas: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}QUANTIDADE_PARCELAS']),
      diaPrimeiroVencimento: dateTimeType.mapFromDatabaseResponse(
          data['${effectivePrefix}DIA_PRIMEIRO_VENCIMENTO']),
      intervaloEntreParcelas: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}INTERVALO_ENTRE_PARCELAS']),
      diaFixoParcela: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DIA_FIXO_PARCELA']),
      dataRecebimentoItens: dateTimeType.mapFromDatabaseResponse(
          data['${effectivePrefix}DATA_RECEBIMENTO_ITENS']),
      horaRecebimentoItens: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}HORA_RECEBIMENTO_ITENS']),
      atualizouEstoque: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}ATUALIZOU_ESTOQUE']),
      numeroDocumentoEntrada: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}NUMERO_DOCUMENTO_ENTRADA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || idFornecedor != null) {
      map['ID_FORNECEDOR'] = Variable<int>(idFornecedor);
    }
    if (!nullToAbsent || dataPedido != null) {
      map['DATA_PEDIDO'] = Variable<DateTime>(dataPedido);
    }
    if (!nullToAbsent || dataPrevisaoEntrega != null) {
      map['DATA_PREVISAO_ENTREGA'] = Variable<DateTime>(dataPrevisaoEntrega);
    }
    if (!nullToAbsent || dataPrevisaoPagamento != null) {
      map['DATA_PREVISAO_PAGAMENTO'] =
          Variable<DateTime>(dataPrevisaoPagamento);
    }
    if (!nullToAbsent || localEntrega != null) {
      map['LOCAL_ENTREGA'] = Variable<String>(localEntrega);
    }
    if (!nullToAbsent || localCobranca != null) {
      map['LOCAL_COBRANCA'] = Variable<String>(localCobranca);
    }
    if (!nullToAbsent || contato != null) {
      map['CONTATO'] = Variable<String>(contato);
    }
    if (!nullToAbsent || valorSubtotal != null) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || formaPagamento != null) {
      map['FORMA_PAGAMENTO'] = Variable<String>(formaPagamento);
    }
    if (!nullToAbsent || geraFinanceiro != null) {
      map['GERA_FINANCEIRO'] = Variable<String>(geraFinanceiro);
    }
    if (!nullToAbsent || quantidadeParcelas != null) {
      map['QUANTIDADE_PARCELAS'] = Variable<int>(quantidadeParcelas);
    }
    if (!nullToAbsent || diaPrimeiroVencimento != null) {
      map['DIA_PRIMEIRO_VENCIMENTO'] =
          Variable<DateTime>(diaPrimeiroVencimento);
    }
    if (!nullToAbsent || intervaloEntreParcelas != null) {
      map['INTERVALO_ENTRE_PARCELAS'] = Variable<int>(intervaloEntreParcelas);
    }
    if (!nullToAbsent || diaFixoParcela != null) {
      map['DIA_FIXO_PARCELA'] = Variable<String>(diaFixoParcela);
    }
    if (!nullToAbsent || dataRecebimentoItens != null) {
      map['DATA_RECEBIMENTO_ITENS'] = Variable<DateTime>(dataRecebimentoItens);
    }
    if (!nullToAbsent || horaRecebimentoItens != null) {
      map['HORA_RECEBIMENTO_ITENS'] = Variable<String>(horaRecebimentoItens);
    }
    if (!nullToAbsent || atualizouEstoque != null) {
      map['ATUALIZOU_ESTOQUE'] = Variable<String>(atualizouEstoque);
    }
    if (!nullToAbsent || numeroDocumentoEntrada != null) {
      map['NUMERO_DOCUMENTO_ENTRADA'] =
          Variable<String>(numeroDocumentoEntrada);
    }
    return map;
  }

  CompraPedidoCabecalhosCompanion toCompanion(bool nullToAbsent) {
    return CompraPedidoCabecalhosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idColaborador: idColaborador == null && nullToAbsent
          ? const Value.absent()
          : Value(idColaborador),
      idFornecedor: idFornecedor == null && nullToAbsent
          ? const Value.absent()
          : Value(idFornecedor),
      dataPedido: dataPedido == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPedido),
      dataPrevisaoEntrega: dataPrevisaoEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPrevisaoEntrega),
      dataPrevisaoPagamento: dataPrevisaoPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPrevisaoPagamento),
      localEntrega: localEntrega == null && nullToAbsent
          ? const Value.absent()
          : Value(localEntrega),
      localCobranca: localCobranca == null && nullToAbsent
          ? const Value.absent()
          : Value(localCobranca),
      contato: contato == null && nullToAbsent
          ? const Value.absent()
          : Value(contato),
      valorSubtotal: valorSubtotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorSubtotal),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
      formaPagamento: formaPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(formaPagamento),
      geraFinanceiro: geraFinanceiro == null && nullToAbsent
          ? const Value.absent()
          : Value(geraFinanceiro),
      quantidadeParcelas: quantidadeParcelas == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeParcelas),
      diaPrimeiroVencimento: diaPrimeiroVencimento == null && nullToAbsent
          ? const Value.absent()
          : Value(diaPrimeiroVencimento),
      intervaloEntreParcelas: intervaloEntreParcelas == null && nullToAbsent
          ? const Value.absent()
          : Value(intervaloEntreParcelas),
      diaFixoParcela: diaFixoParcela == null && nullToAbsent
          ? const Value.absent()
          : Value(diaFixoParcela),
      dataRecebimentoItens: dataRecebimentoItens == null && nullToAbsent
          ? const Value.absent()
          : Value(dataRecebimentoItens),
      horaRecebimentoItens: horaRecebimentoItens == null && nullToAbsent
          ? const Value.absent()
          : Value(horaRecebimentoItens),
      atualizouEstoque: atualizouEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(atualizouEstoque),
      numeroDocumentoEntrada: numeroDocumentoEntrada == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroDocumentoEntrada),
    );
  }

  factory CompraPedidoCabecalho.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CompraPedidoCabecalho(
      id: serializer.fromJson<int>(json['id']),
      idColaborador: serializer.fromJson<int>(json['idColaborador']),
      idFornecedor: serializer.fromJson<int>(json['idFornecedor']),
      dataPedido: serializer.fromJson<DateTime>(json['dataPedido']),
      dataPrevisaoEntrega:
          serializer.fromJson<DateTime>(json['dataPrevisaoEntrega']),
      dataPrevisaoPagamento:
          serializer.fromJson<DateTime>(json['dataPrevisaoPagamento']),
      localEntrega: serializer.fromJson<String>(json['localEntrega']),
      localCobranca: serializer.fromJson<String>(json['localCobranca']),
      contato: serializer.fromJson<String>(json['contato']),
      valorSubtotal: serializer.fromJson<double>(json['valorSubtotal']),
      taxaDesconto: serializer.fromJson<double>(json['taxaDesconto']),
      valorDesconto: serializer.fromJson<double>(json['valorDesconto']),
      valorTotal: serializer.fromJson<double>(json['valorTotal']),
      formaPagamento: serializer.fromJson<String>(json['formaPagamento']),
      geraFinanceiro: serializer.fromJson<String>(json['geraFinanceiro']),
      quantidadeParcelas: serializer.fromJson<int>(json['quantidadeParcelas']),
      diaPrimeiroVencimento:
          serializer.fromJson<DateTime>(json['diaPrimeiroVencimento']),
      intervaloEntreParcelas:
          serializer.fromJson<int>(json['intervaloEntreParcelas']),
      diaFixoParcela: serializer.fromJson<String>(json['diaFixoParcela']),
      dataRecebimentoItens:
          serializer.fromJson<DateTime>(json['dataRecebimentoItens']),
      horaRecebimentoItens:
          serializer.fromJson<String>(json['horaRecebimentoItens']),
      atualizouEstoque: serializer.fromJson<String>(json['atualizouEstoque']),
      numeroDocumentoEntrada:
          serializer.fromJson<String>(json['numeroDocumentoEntrada']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idColaborador': serializer.toJson<int>(idColaborador),
      'idFornecedor': serializer.toJson<int>(idFornecedor),
      'dataPedido': serializer.toJson<DateTime>(dataPedido),
      'dataPrevisaoEntrega': serializer.toJson<DateTime>(dataPrevisaoEntrega),
      'dataPrevisaoPagamento':
          serializer.toJson<DateTime>(dataPrevisaoPagamento),
      'localEntrega': serializer.toJson<String>(localEntrega),
      'localCobranca': serializer.toJson<String>(localCobranca),
      'contato': serializer.toJson<String>(contato),
      'valorSubtotal': serializer.toJson<double>(valorSubtotal),
      'taxaDesconto': serializer.toJson<double>(taxaDesconto),
      'valorDesconto': serializer.toJson<double>(valorDesconto),
      'valorTotal': serializer.toJson<double>(valorTotal),
      'formaPagamento': serializer.toJson<String>(formaPagamento),
      'geraFinanceiro': serializer.toJson<String>(geraFinanceiro),
      'quantidadeParcelas': serializer.toJson<int>(quantidadeParcelas),
      'diaPrimeiroVencimento':
          serializer.toJson<DateTime>(diaPrimeiroVencimento),
      'intervaloEntreParcelas': serializer.toJson<int>(intervaloEntreParcelas),
      'diaFixoParcela': serializer.toJson<String>(diaFixoParcela),
      'dataRecebimentoItens': serializer.toJson<DateTime>(dataRecebimentoItens),
      'horaRecebimentoItens': serializer.toJson<String>(horaRecebimentoItens),
      'atualizouEstoque': serializer.toJson<String>(atualizouEstoque),
      'numeroDocumentoEntrada':
          serializer.toJson<String>(numeroDocumentoEntrada),
    };
  }

  CompraPedidoCabecalho copyWith(
          {int id,
          int idColaborador,
          int idFornecedor,
          DateTime dataPedido,
          DateTime dataPrevisaoEntrega,
          DateTime dataPrevisaoPagamento,
          String localEntrega,
          String localCobranca,
          String contato,
          double valorSubtotal,
          double taxaDesconto,
          double valorDesconto,
          double valorTotal,
          String formaPagamento,
          String geraFinanceiro,
          int quantidadeParcelas,
          DateTime diaPrimeiroVencimento,
          int intervaloEntreParcelas,
          String diaFixoParcela,
          DateTime dataRecebimentoItens,
          String horaRecebimentoItens,
          String atualizouEstoque,
          String numeroDocumentoEntrada}) =>
      CompraPedidoCabecalho(
        id: id ?? this.id,
        idColaborador: idColaborador ?? this.idColaborador,
        idFornecedor: idFornecedor ?? this.idFornecedor,
        dataPedido: dataPedido ?? this.dataPedido,
        dataPrevisaoEntrega: dataPrevisaoEntrega ?? this.dataPrevisaoEntrega,
        dataPrevisaoPagamento:
            dataPrevisaoPagamento ?? this.dataPrevisaoPagamento,
        localEntrega: localEntrega ?? this.localEntrega,
        localCobranca: localCobranca ?? this.localCobranca,
        contato: contato ?? this.contato,
        valorSubtotal: valorSubtotal ?? this.valorSubtotal,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorTotal: valorTotal ?? this.valorTotal,
        formaPagamento: formaPagamento ?? this.formaPagamento,
        geraFinanceiro: geraFinanceiro ?? this.geraFinanceiro,
        quantidadeParcelas: quantidadeParcelas ?? this.quantidadeParcelas,
        diaPrimeiroVencimento:
            diaPrimeiroVencimento ?? this.diaPrimeiroVencimento,
        intervaloEntreParcelas:
            intervaloEntreParcelas ?? this.intervaloEntreParcelas,
        diaFixoParcela: diaFixoParcela ?? this.diaFixoParcela,
        dataRecebimentoItens: dataRecebimentoItens ?? this.dataRecebimentoItens,
        horaRecebimentoItens: horaRecebimentoItens ?? this.horaRecebimentoItens,
        atualizouEstoque: atualizouEstoque ?? this.atualizouEstoque,
        numeroDocumentoEntrada:
            numeroDocumentoEntrada ?? this.numeroDocumentoEntrada,
      );
  @override
  String toString() {
    return (StringBuffer('CompraPedidoCabecalho(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idFornecedor: $idFornecedor, ')
          ..write('dataPedido: $dataPedido, ')
          ..write('dataPrevisaoEntrega: $dataPrevisaoEntrega, ')
          ..write('dataPrevisaoPagamento: $dataPrevisaoPagamento, ')
          ..write('localEntrega: $localEntrega, ')
          ..write('localCobranca: $localCobranca, ')
          ..write('contato: $contato, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('formaPagamento: $formaPagamento, ')
          ..write('geraFinanceiro: $geraFinanceiro, ')
          ..write('quantidadeParcelas: $quantidadeParcelas, ')
          ..write('diaPrimeiroVencimento: $diaPrimeiroVencimento, ')
          ..write('intervaloEntreParcelas: $intervaloEntreParcelas, ')
          ..write('diaFixoParcela: $diaFixoParcela, ')
          ..write('dataRecebimentoItens: $dataRecebimentoItens, ')
          ..write('horaRecebimentoItens: $horaRecebimentoItens, ')
          ..write('atualizouEstoque: $atualizouEstoque, ')
          ..write('numeroDocumentoEntrada: $numeroDocumentoEntrada')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idColaborador.hashCode,
          $mrjc(
              idFornecedor.hashCode,
              $mrjc(
                  dataPedido.hashCode,
                  $mrjc(
                      dataPrevisaoEntrega.hashCode,
                      $mrjc(
                          dataPrevisaoPagamento.hashCode,
                          $mrjc(
                              localEntrega.hashCode,
                              $mrjc(
                                  localCobranca.hashCode,
                                  $mrjc(
                                      contato.hashCode,
                                      $mrjc(
                                          valorSubtotal.hashCode,
                                          $mrjc(
                                              taxaDesconto.hashCode,
                                              $mrjc(
                                                  valorDesconto.hashCode,
                                                  $mrjc(
                                                      valorTotal.hashCode,
                                                      $mrjc(
                                                          formaPagamento
                                                              .hashCode,
                                                          $mrjc(
                                                              geraFinanceiro
                                                                  .hashCode,
                                                              $mrjc(
                                                                  quantidadeParcelas
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      diaPrimeiroVencimento
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          intervaloEntreParcelas
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              diaFixoParcela.hashCode,
                                                                              $mrjc(dataRecebimentoItens.hashCode, $mrjc(horaRecebimentoItens.hashCode, $mrjc(atualizouEstoque.hashCode, numeroDocumentoEntrada.hashCode)))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is CompraPedidoCabecalho &&
          other.id == this.id &&
          other.idColaborador == this.idColaborador &&
          other.idFornecedor == this.idFornecedor &&
          other.dataPedido == this.dataPedido &&
          other.dataPrevisaoEntrega == this.dataPrevisaoEntrega &&
          other.dataPrevisaoPagamento == this.dataPrevisaoPagamento &&
          other.localEntrega == this.localEntrega &&
          other.localCobranca == this.localCobranca &&
          other.contato == this.contato &&
          other.valorSubtotal == this.valorSubtotal &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorDesconto == this.valorDesconto &&
          other.valorTotal == this.valorTotal &&
          other.formaPagamento == this.formaPagamento &&
          other.geraFinanceiro == this.geraFinanceiro &&
          other.quantidadeParcelas == this.quantidadeParcelas &&
          other.diaPrimeiroVencimento == this.diaPrimeiroVencimento &&
          other.intervaloEntreParcelas == this.intervaloEntreParcelas &&
          other.diaFixoParcela == this.diaFixoParcela &&
          other.dataRecebimentoItens == this.dataRecebimentoItens &&
          other.horaRecebimentoItens == this.horaRecebimentoItens &&
          other.atualizouEstoque == this.atualizouEstoque &&
          other.numeroDocumentoEntrada == this.numeroDocumentoEntrada);
}

class CompraPedidoCabecalhosCompanion
    extends UpdateCompanion<CompraPedidoCabecalho> {
  final Value<int> id;
  final Value<int> idColaborador;
  final Value<int> idFornecedor;
  final Value<DateTime> dataPedido;
  final Value<DateTime> dataPrevisaoEntrega;
  final Value<DateTime> dataPrevisaoPagamento;
  final Value<String> localEntrega;
  final Value<String> localCobranca;
  final Value<String> contato;
  final Value<double> valorSubtotal;
  final Value<double> taxaDesconto;
  final Value<double> valorDesconto;
  final Value<double> valorTotal;
  final Value<String> formaPagamento;
  final Value<String> geraFinanceiro;
  final Value<int> quantidadeParcelas;
  final Value<DateTime> diaPrimeiroVencimento;
  final Value<int> intervaloEntreParcelas;
  final Value<String> diaFixoParcela;
  final Value<DateTime> dataRecebimentoItens;
  final Value<String> horaRecebimentoItens;
  final Value<String> atualizouEstoque;
  final Value<String> numeroDocumentoEntrada;
  const CompraPedidoCabecalhosCompanion({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idFornecedor = const Value.absent(),
    this.dataPedido = const Value.absent(),
    this.dataPrevisaoEntrega = const Value.absent(),
    this.dataPrevisaoPagamento = const Value.absent(),
    this.localEntrega = const Value.absent(),
    this.localCobranca = const Value.absent(),
    this.contato = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.formaPagamento = const Value.absent(),
    this.geraFinanceiro = const Value.absent(),
    this.quantidadeParcelas = const Value.absent(),
    this.diaPrimeiroVencimento = const Value.absent(),
    this.intervaloEntreParcelas = const Value.absent(),
    this.diaFixoParcela = const Value.absent(),
    this.dataRecebimentoItens = const Value.absent(),
    this.horaRecebimentoItens = const Value.absent(),
    this.atualizouEstoque = const Value.absent(),
    this.numeroDocumentoEntrada = const Value.absent(),
  });
  CompraPedidoCabecalhosCompanion.insert({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idFornecedor = const Value.absent(),
    this.dataPedido = const Value.absent(),
    this.dataPrevisaoEntrega = const Value.absent(),
    this.dataPrevisaoPagamento = const Value.absent(),
    this.localEntrega = const Value.absent(),
    this.localCobranca = const Value.absent(),
    this.contato = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.formaPagamento = const Value.absent(),
    this.geraFinanceiro = const Value.absent(),
    this.quantidadeParcelas = const Value.absent(),
    this.diaPrimeiroVencimento = const Value.absent(),
    this.intervaloEntreParcelas = const Value.absent(),
    this.diaFixoParcela = const Value.absent(),
    this.dataRecebimentoItens = const Value.absent(),
    this.horaRecebimentoItens = const Value.absent(),
    this.atualizouEstoque = const Value.absent(),
    this.numeroDocumentoEntrada = const Value.absent(),
  });
  static Insertable<CompraPedidoCabecalho> custom({
    Expression<int> id,
    Expression<int> idColaborador,
    Expression<int> idFornecedor,
    Expression<DateTime> dataPedido,
    Expression<DateTime> dataPrevisaoEntrega,
    Expression<DateTime> dataPrevisaoPagamento,
    Expression<String> localEntrega,
    Expression<String> localCobranca,
    Expression<String> contato,
    Expression<double> valorSubtotal,
    Expression<double> taxaDesconto,
    Expression<double> valorDesconto,
    Expression<double> valorTotal,
    Expression<String> formaPagamento,
    Expression<String> geraFinanceiro,
    Expression<int> quantidadeParcelas,
    Expression<DateTime> diaPrimeiroVencimento,
    Expression<int> intervaloEntreParcelas,
    Expression<String> diaFixoParcela,
    Expression<DateTime> dataRecebimentoItens,
    Expression<String> horaRecebimentoItens,
    Expression<String> atualizouEstoque,
    Expression<String> numeroDocumentoEntrada,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
      if (idFornecedor != null) 'ID_FORNECEDOR': idFornecedor,
      if (dataPedido != null) 'DATA_PEDIDO': dataPedido,
      if (dataPrevisaoEntrega != null)
        'DATA_PREVISAO_ENTREGA': dataPrevisaoEntrega,
      if (dataPrevisaoPagamento != null)
        'DATA_PREVISAO_PAGAMENTO': dataPrevisaoPagamento,
      if (localEntrega != null) 'LOCAL_ENTREGA': localEntrega,
      if (localCobranca != null) 'LOCAL_COBRANCA': localCobranca,
      if (contato != null) 'CONTATO': contato,
      if (valorSubtotal != null) 'VALOR_SUBTOTAL': valorSubtotal,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
      if (formaPagamento != null) 'FORMA_PAGAMENTO': formaPagamento,
      if (geraFinanceiro != null) 'GERA_FINANCEIRO': geraFinanceiro,
      if (quantidadeParcelas != null) 'QUANTIDADE_PARCELAS': quantidadeParcelas,
      if (diaPrimeiroVencimento != null)
        'DIA_PRIMEIRO_VENCIMENTO': diaPrimeiroVencimento,
      if (intervaloEntreParcelas != null)
        'INTERVALO_ENTRE_PARCELAS': intervaloEntreParcelas,
      if (diaFixoParcela != null) 'DIA_FIXO_PARCELA': diaFixoParcela,
      if (dataRecebimentoItens != null)
        'DATA_RECEBIMENTO_ITENS': dataRecebimentoItens,
      if (horaRecebimentoItens != null)
        'HORA_RECEBIMENTO_ITENS': horaRecebimentoItens,
      if (atualizouEstoque != null) 'ATUALIZOU_ESTOQUE': atualizouEstoque,
      if (numeroDocumentoEntrada != null)
        'NUMERO_DOCUMENTO_ENTRADA': numeroDocumentoEntrada,
    });
  }

  CompraPedidoCabecalhosCompanion copyWith(
      {Value<int> id,
      Value<int> idColaborador,
      Value<int> idFornecedor,
      Value<DateTime> dataPedido,
      Value<DateTime> dataPrevisaoEntrega,
      Value<DateTime> dataPrevisaoPagamento,
      Value<String> localEntrega,
      Value<String> localCobranca,
      Value<String> contato,
      Value<double> valorSubtotal,
      Value<double> taxaDesconto,
      Value<double> valorDesconto,
      Value<double> valorTotal,
      Value<String> formaPagamento,
      Value<String> geraFinanceiro,
      Value<int> quantidadeParcelas,
      Value<DateTime> diaPrimeiroVencimento,
      Value<int> intervaloEntreParcelas,
      Value<String> diaFixoParcela,
      Value<DateTime> dataRecebimentoItens,
      Value<String> horaRecebimentoItens,
      Value<String> atualizouEstoque,
      Value<String> numeroDocumentoEntrada}) {
    return CompraPedidoCabecalhosCompanion(
      id: id ?? this.id,
      idColaborador: idColaborador ?? this.idColaborador,
      idFornecedor: idFornecedor ?? this.idFornecedor,
      dataPedido: dataPedido ?? this.dataPedido,
      dataPrevisaoEntrega: dataPrevisaoEntrega ?? this.dataPrevisaoEntrega,
      dataPrevisaoPagamento:
          dataPrevisaoPagamento ?? this.dataPrevisaoPagamento,
      localEntrega: localEntrega ?? this.localEntrega,
      localCobranca: localCobranca ?? this.localCobranca,
      contato: contato ?? this.contato,
      valorSubtotal: valorSubtotal ?? this.valorSubtotal,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorTotal: valorTotal ?? this.valorTotal,
      formaPagamento: formaPagamento ?? this.formaPagamento,
      geraFinanceiro: geraFinanceiro ?? this.geraFinanceiro,
      quantidadeParcelas: quantidadeParcelas ?? this.quantidadeParcelas,
      diaPrimeiroVencimento:
          diaPrimeiroVencimento ?? this.diaPrimeiroVencimento,
      intervaloEntreParcelas:
          intervaloEntreParcelas ?? this.intervaloEntreParcelas,
      diaFixoParcela: diaFixoParcela ?? this.diaFixoParcela,
      dataRecebimentoItens: dataRecebimentoItens ?? this.dataRecebimentoItens,
      horaRecebimentoItens: horaRecebimentoItens ?? this.horaRecebimentoItens,
      atualizouEstoque: atualizouEstoque ?? this.atualizouEstoque,
      numeroDocumentoEntrada:
          numeroDocumentoEntrada ?? this.numeroDocumentoEntrada,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idColaborador.present) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador.value);
    }
    if (idFornecedor.present) {
      map['ID_FORNECEDOR'] = Variable<int>(idFornecedor.value);
    }
    if (dataPedido.present) {
      map['DATA_PEDIDO'] = Variable<DateTime>(dataPedido.value);
    }
    if (dataPrevisaoEntrega.present) {
      map['DATA_PREVISAO_ENTREGA'] =
          Variable<DateTime>(dataPrevisaoEntrega.value);
    }
    if (dataPrevisaoPagamento.present) {
      map['DATA_PREVISAO_PAGAMENTO'] =
          Variable<DateTime>(dataPrevisaoPagamento.value);
    }
    if (localEntrega.present) {
      map['LOCAL_ENTREGA'] = Variable<String>(localEntrega.value);
    }
    if (localCobranca.present) {
      map['LOCAL_COBRANCA'] = Variable<String>(localCobranca.value);
    }
    if (contato.present) {
      map['CONTATO'] = Variable<String>(contato.value);
    }
    if (valorSubtotal.present) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    if (formaPagamento.present) {
      map['FORMA_PAGAMENTO'] = Variable<String>(formaPagamento.value);
    }
    if (geraFinanceiro.present) {
      map['GERA_FINANCEIRO'] = Variable<String>(geraFinanceiro.value);
    }
    if (quantidadeParcelas.present) {
      map['QUANTIDADE_PARCELAS'] = Variable<int>(quantidadeParcelas.value);
    }
    if (diaPrimeiroVencimento.present) {
      map['DIA_PRIMEIRO_VENCIMENTO'] =
          Variable<DateTime>(diaPrimeiroVencimento.value);
    }
    if (intervaloEntreParcelas.present) {
      map['INTERVALO_ENTRE_PARCELAS'] =
          Variable<int>(intervaloEntreParcelas.value);
    }
    if (diaFixoParcela.present) {
      map['DIA_FIXO_PARCELA'] = Variable<String>(diaFixoParcela.value);
    }
    if (dataRecebimentoItens.present) {
      map['DATA_RECEBIMENTO_ITENS'] =
          Variable<DateTime>(dataRecebimentoItens.value);
    }
    if (horaRecebimentoItens.present) {
      map['HORA_RECEBIMENTO_ITENS'] =
          Variable<String>(horaRecebimentoItens.value);
    }
    if (atualizouEstoque.present) {
      map['ATUALIZOU_ESTOQUE'] = Variable<String>(atualizouEstoque.value);
    }
    if (numeroDocumentoEntrada.present) {
      map['NUMERO_DOCUMENTO_ENTRADA'] =
          Variable<String>(numeroDocumentoEntrada.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CompraPedidoCabecalhosCompanion(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idFornecedor: $idFornecedor, ')
          ..write('dataPedido: $dataPedido, ')
          ..write('dataPrevisaoEntrega: $dataPrevisaoEntrega, ')
          ..write('dataPrevisaoPagamento: $dataPrevisaoPagamento, ')
          ..write('localEntrega: $localEntrega, ')
          ..write('localCobranca: $localCobranca, ')
          ..write('contato: $contato, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('formaPagamento: $formaPagamento, ')
          ..write('geraFinanceiro: $geraFinanceiro, ')
          ..write('quantidadeParcelas: $quantidadeParcelas, ')
          ..write('diaPrimeiroVencimento: $diaPrimeiroVencimento, ')
          ..write('intervaloEntreParcelas: $intervaloEntreParcelas, ')
          ..write('diaFixoParcela: $diaFixoParcela, ')
          ..write('dataRecebimentoItens: $dataRecebimentoItens, ')
          ..write('horaRecebimentoItens: $horaRecebimentoItens, ')
          ..write('atualizouEstoque: $atualizouEstoque, ')
          ..write('numeroDocumentoEntrada: $numeroDocumentoEntrada')
          ..write(')'))
        .toString();
  }
}

class $CompraPedidoCabecalhosTable extends CompraPedidoCabecalhos
    with TableInfo<$CompraPedidoCabecalhosTable, CompraPedidoCabecalho> {
  final GeneratedDatabase _db;
  final String _alias;
  $CompraPedidoCabecalhosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idColaboradorMeta =
      const VerificationMeta('idColaborador');
  GeneratedIntColumn _idColaborador;
  @override
  GeneratedIntColumn get idColaborador =>
      _idColaborador ??= _constructIdColaborador();
  GeneratedIntColumn _constructIdColaborador() {
    return GeneratedIntColumn('ID_COLABORADOR', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
  }

  final VerificationMeta _idFornecedorMeta =
      const VerificationMeta('idFornecedor');
  GeneratedIntColumn _idFornecedor;
  @override
  GeneratedIntColumn get idFornecedor =>
      _idFornecedor ??= _constructIdFornecedor();
  GeneratedIntColumn _constructIdFornecedor() {
    return GeneratedIntColumn('ID_FORNECEDOR', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES FORNECEDOR(ID)');
  }

  final VerificationMeta _dataPedidoMeta = const VerificationMeta('dataPedido');
  GeneratedDateTimeColumn _dataPedido;
  @override
  GeneratedDateTimeColumn get dataPedido =>
      _dataPedido ??= _constructDataPedido();
  GeneratedDateTimeColumn _constructDataPedido() {
    return GeneratedDateTimeColumn(
      'DATA_PEDIDO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataPrevisaoEntregaMeta =
      const VerificationMeta('dataPrevisaoEntrega');
  GeneratedDateTimeColumn _dataPrevisaoEntrega;
  @override
  GeneratedDateTimeColumn get dataPrevisaoEntrega =>
      _dataPrevisaoEntrega ??= _constructDataPrevisaoEntrega();
  GeneratedDateTimeColumn _constructDataPrevisaoEntrega() {
    return GeneratedDateTimeColumn(
      'DATA_PREVISAO_ENTREGA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataPrevisaoPagamentoMeta =
      const VerificationMeta('dataPrevisaoPagamento');
  GeneratedDateTimeColumn _dataPrevisaoPagamento;
  @override
  GeneratedDateTimeColumn get dataPrevisaoPagamento =>
      _dataPrevisaoPagamento ??= _constructDataPrevisaoPagamento();
  GeneratedDateTimeColumn _constructDataPrevisaoPagamento() {
    return GeneratedDateTimeColumn(
      'DATA_PREVISAO_PAGAMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _localEntregaMeta =
      const VerificationMeta('localEntrega');
  GeneratedTextColumn _localEntrega;
  @override
  GeneratedTextColumn get localEntrega =>
      _localEntrega ??= _constructLocalEntrega();
  GeneratedTextColumn _constructLocalEntrega() {
    return GeneratedTextColumn('LOCAL_ENTREGA', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _localCobrancaMeta =
      const VerificationMeta('localCobranca');
  GeneratedTextColumn _localCobranca;
  @override
  GeneratedTextColumn get localCobranca =>
      _localCobranca ??= _constructLocalCobranca();
  GeneratedTextColumn _constructLocalCobranca() {
    return GeneratedTextColumn('LOCAL_COBRANCA', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _contatoMeta = const VerificationMeta('contato');
  GeneratedTextColumn _contato;
  @override
  GeneratedTextColumn get contato => _contato ??= _constructContato();
  GeneratedTextColumn _constructContato() {
    return GeneratedTextColumn('CONTATO', $tableName, true,
        minTextLength: 1, maxTextLength: 50);
  }

  final VerificationMeta _valorSubtotalMeta =
      const VerificationMeta('valorSubtotal');
  GeneratedRealColumn _valorSubtotal;
  @override
  GeneratedRealColumn get valorSubtotal =>
      _valorSubtotal ??= _constructValorSubtotal();
  GeneratedRealColumn _constructValorSubtotal() {
    return GeneratedRealColumn(
      'VALOR_SUBTOTAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  GeneratedRealColumn _taxaDesconto;
  @override
  GeneratedRealColumn get taxaDesconto =>
      _taxaDesconto ??= _constructTaxaDesconto();
  GeneratedRealColumn _constructTaxaDesconto() {
    return GeneratedRealColumn(
      'TAXA_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  GeneratedRealColumn _valorDesconto;
  @override
  GeneratedRealColumn get valorDesconto =>
      _valorDesconto ??= _constructValorDesconto();
  GeneratedRealColumn _constructValorDesconto() {
    return GeneratedRealColumn(
      'VALOR_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  GeneratedRealColumn _valorTotal;
  @override
  GeneratedRealColumn get valorTotal => _valorTotal ??= _constructValorTotal();
  GeneratedRealColumn _constructValorTotal() {
    return GeneratedRealColumn(
      'VALOR_TOTAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _formaPagamentoMeta =
      const VerificationMeta('formaPagamento');
  GeneratedTextColumn _formaPagamento;
  @override
  GeneratedTextColumn get formaPagamento =>
      _formaPagamento ??= _constructFormaPagamento();
  GeneratedTextColumn _constructFormaPagamento() {
    return GeneratedTextColumn('FORMA_PAGAMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _geraFinanceiroMeta =
      const VerificationMeta('geraFinanceiro');
  GeneratedTextColumn _geraFinanceiro;
  @override
  GeneratedTextColumn get geraFinanceiro =>
      _geraFinanceiro ??= _constructGeraFinanceiro();
  GeneratedTextColumn _constructGeraFinanceiro() {
    return GeneratedTextColumn('GERA_FINANCEIRO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _quantidadeParcelasMeta =
      const VerificationMeta('quantidadeParcelas');
  GeneratedIntColumn _quantidadeParcelas;
  @override
  GeneratedIntColumn get quantidadeParcelas =>
      _quantidadeParcelas ??= _constructQuantidadeParcelas();
  GeneratedIntColumn _constructQuantidadeParcelas() {
    return GeneratedIntColumn(
      'QUANTIDADE_PARCELAS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _diaPrimeiroVencimentoMeta =
      const VerificationMeta('diaPrimeiroVencimento');
  GeneratedDateTimeColumn _diaPrimeiroVencimento;
  @override
  GeneratedDateTimeColumn get diaPrimeiroVencimento =>
      _diaPrimeiroVencimento ??= _constructDiaPrimeiroVencimento();
  GeneratedDateTimeColumn _constructDiaPrimeiroVencimento() {
    return GeneratedDateTimeColumn(
      'DIA_PRIMEIRO_VENCIMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _intervaloEntreParcelasMeta =
      const VerificationMeta('intervaloEntreParcelas');
  GeneratedIntColumn _intervaloEntreParcelas;
  @override
  GeneratedIntColumn get intervaloEntreParcelas =>
      _intervaloEntreParcelas ??= _constructIntervaloEntreParcelas();
  GeneratedIntColumn _constructIntervaloEntreParcelas() {
    return GeneratedIntColumn(
      'INTERVALO_ENTRE_PARCELAS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _diaFixoParcelaMeta =
      const VerificationMeta('diaFixoParcela');
  GeneratedTextColumn _diaFixoParcela;
  @override
  GeneratedTextColumn get diaFixoParcela =>
      _diaFixoParcela ??= _constructDiaFixoParcela();
  GeneratedTextColumn _constructDiaFixoParcela() {
    return GeneratedTextColumn('DIA_FIXO_PARCELA', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _dataRecebimentoItensMeta =
      const VerificationMeta('dataRecebimentoItens');
  GeneratedDateTimeColumn _dataRecebimentoItens;
  @override
  GeneratedDateTimeColumn get dataRecebimentoItens =>
      _dataRecebimentoItens ??= _constructDataRecebimentoItens();
  GeneratedDateTimeColumn _constructDataRecebimentoItens() {
    return GeneratedDateTimeColumn(
      'DATA_RECEBIMENTO_ITENS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaRecebimentoItensMeta =
      const VerificationMeta('horaRecebimentoItens');
  GeneratedTextColumn _horaRecebimentoItens;
  @override
  GeneratedTextColumn get horaRecebimentoItens =>
      _horaRecebimentoItens ??= _constructHoraRecebimentoItens();
  GeneratedTextColumn _constructHoraRecebimentoItens() {
    return GeneratedTextColumn('HORA_RECEBIMENTO_ITENS', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _atualizouEstoqueMeta =
      const VerificationMeta('atualizouEstoque');
  GeneratedTextColumn _atualizouEstoque;
  @override
  GeneratedTextColumn get atualizouEstoque =>
      _atualizouEstoque ??= _constructAtualizouEstoque();
  GeneratedTextColumn _constructAtualizouEstoque() {
    return GeneratedTextColumn('ATUALIZOU_ESTOQUE', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _numeroDocumentoEntradaMeta =
      const VerificationMeta('numeroDocumentoEntrada');
  GeneratedTextColumn _numeroDocumentoEntrada;
  @override
  GeneratedTextColumn get numeroDocumentoEntrada =>
      _numeroDocumentoEntrada ??= _constructNumeroDocumentoEntrada();
  GeneratedTextColumn _constructNumeroDocumentoEntrada() {
    return GeneratedTextColumn('NUMERO_DOCUMENTO_ENTRADA', $tableName, true,
        minTextLength: 1, maxTextLength: 50);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idColaborador,
        idFornecedor,
        dataPedido,
        dataPrevisaoEntrega,
        dataPrevisaoPagamento,
        localEntrega,
        localCobranca,
        contato,
        valorSubtotal,
        taxaDesconto,
        valorDesconto,
        valorTotal,
        formaPagamento,
        geraFinanceiro,
        quantidadeParcelas,
        diaPrimeiroVencimento,
        intervaloEntreParcelas,
        diaFixoParcela,
        dataRecebimentoItens,
        horaRecebimentoItens,
        atualizouEstoque,
        numeroDocumentoEntrada
      ];
  @override
  $CompraPedidoCabecalhosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'COMPRA_PEDIDO_CABECALHO';
  @override
  final String actualTableName = 'COMPRA_PEDIDO_CABECALHO';
  @override
  VerificationContext validateIntegrity(
      Insertable<CompraPedidoCabecalho> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_COLABORADOR')) {
      context.handle(
          _idColaboradorMeta,
          idColaborador.isAcceptableOrUnknown(
              data['ID_COLABORADOR'], _idColaboradorMeta));
    }
    if (data.containsKey('ID_FORNECEDOR')) {
      context.handle(
          _idFornecedorMeta,
          idFornecedor.isAcceptableOrUnknown(
              data['ID_FORNECEDOR'], _idFornecedorMeta));
    }
    if (data.containsKey('DATA_PEDIDO')) {
      context.handle(
          _dataPedidoMeta,
          dataPedido.isAcceptableOrUnknown(
              data['DATA_PEDIDO'], _dataPedidoMeta));
    }
    if (data.containsKey('DATA_PREVISAO_ENTREGA')) {
      context.handle(
          _dataPrevisaoEntregaMeta,
          dataPrevisaoEntrega.isAcceptableOrUnknown(
              data['DATA_PREVISAO_ENTREGA'], _dataPrevisaoEntregaMeta));
    }
    if (data.containsKey('DATA_PREVISAO_PAGAMENTO')) {
      context.handle(
          _dataPrevisaoPagamentoMeta,
          dataPrevisaoPagamento.isAcceptableOrUnknown(
              data['DATA_PREVISAO_PAGAMENTO'], _dataPrevisaoPagamentoMeta));
    }
    if (data.containsKey('LOCAL_ENTREGA')) {
      context.handle(
          _localEntregaMeta,
          localEntrega.isAcceptableOrUnknown(
              data['LOCAL_ENTREGA'], _localEntregaMeta));
    }
    if (data.containsKey('LOCAL_COBRANCA')) {
      context.handle(
          _localCobrancaMeta,
          localCobranca.isAcceptableOrUnknown(
              data['LOCAL_COBRANCA'], _localCobrancaMeta));
    }
    if (data.containsKey('CONTATO')) {
      context.handle(_contatoMeta,
          contato.isAcceptableOrUnknown(data['CONTATO'], _contatoMeta));
    }
    if (data.containsKey('VALOR_SUBTOTAL')) {
      context.handle(
          _valorSubtotalMeta,
          valorSubtotal.isAcceptableOrUnknown(
              data['VALOR_SUBTOTAL'], _valorSubtotalMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO'], _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO'], _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL'], _valorTotalMeta));
    }
    if (data.containsKey('FORMA_PAGAMENTO')) {
      context.handle(
          _formaPagamentoMeta,
          formaPagamento.isAcceptableOrUnknown(
              data['FORMA_PAGAMENTO'], _formaPagamentoMeta));
    }
    if (data.containsKey('GERA_FINANCEIRO')) {
      context.handle(
          _geraFinanceiroMeta,
          geraFinanceiro.isAcceptableOrUnknown(
              data['GERA_FINANCEIRO'], _geraFinanceiroMeta));
    }
    if (data.containsKey('QUANTIDADE_PARCELAS')) {
      context.handle(
          _quantidadeParcelasMeta,
          quantidadeParcelas.isAcceptableOrUnknown(
              data['QUANTIDADE_PARCELAS'], _quantidadeParcelasMeta));
    }
    if (data.containsKey('DIA_PRIMEIRO_VENCIMENTO')) {
      context.handle(
          _diaPrimeiroVencimentoMeta,
          diaPrimeiroVencimento.isAcceptableOrUnknown(
              data['DIA_PRIMEIRO_VENCIMENTO'], _diaPrimeiroVencimentoMeta));
    }
    if (data.containsKey('INTERVALO_ENTRE_PARCELAS')) {
      context.handle(
          _intervaloEntreParcelasMeta,
          intervaloEntreParcelas.isAcceptableOrUnknown(
              data['INTERVALO_ENTRE_PARCELAS'], _intervaloEntreParcelasMeta));
    }
    if (data.containsKey('DIA_FIXO_PARCELA')) {
      context.handle(
          _diaFixoParcelaMeta,
          diaFixoParcela.isAcceptableOrUnknown(
              data['DIA_FIXO_PARCELA'], _diaFixoParcelaMeta));
    }
    if (data.containsKey('DATA_RECEBIMENTO_ITENS')) {
      context.handle(
          _dataRecebimentoItensMeta,
          dataRecebimentoItens.isAcceptableOrUnknown(
              data['DATA_RECEBIMENTO_ITENS'], _dataRecebimentoItensMeta));
    }
    if (data.containsKey('HORA_RECEBIMENTO_ITENS')) {
      context.handle(
          _horaRecebimentoItensMeta,
          horaRecebimentoItens.isAcceptableOrUnknown(
              data['HORA_RECEBIMENTO_ITENS'], _horaRecebimentoItensMeta));
    }
    if (data.containsKey('ATUALIZOU_ESTOQUE')) {
      context.handle(
          _atualizouEstoqueMeta,
          atualizouEstoque.isAcceptableOrUnknown(
              data['ATUALIZOU_ESTOQUE'], _atualizouEstoqueMeta));
    }
    if (data.containsKey('NUMERO_DOCUMENTO_ENTRADA')) {
      context.handle(
          _numeroDocumentoEntradaMeta,
          numeroDocumentoEntrada.isAcceptableOrUnknown(
              data['NUMERO_DOCUMENTO_ENTRADA'], _numeroDocumentoEntradaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CompraPedidoCabecalho map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return CompraPedidoCabecalho.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $CompraPedidoCabecalhosTable createAlias(String alias) {
    return $CompraPedidoCabecalhosTable(_db, alias);
  }
}

class CompraPedidoDetalhe extends DataClass
    implements Insertable<CompraPedidoDetalhe> {
  final int id;
  final int idCompraPedidoCabecalho;
  final int idProduto;
  final double quantidade;
  final double valorUnitario;
  final double valorSubtotal;
  final double taxaDesconto;
  final double valorDesconto;
  final double valorTotal;
  final String cst;
  final String csosn;
  final int cfop;
  CompraPedidoDetalhe(
      {@required this.id,
      this.idCompraPedidoCabecalho,
      this.idProduto,
      this.quantidade,
      this.valorUnitario,
      this.valorSubtotal,
      this.taxaDesconto,
      this.valorDesconto,
      this.valorTotal,
      this.cst,
      this.csosn,
      this.cfop});
  factory CompraPedidoDetalhe.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final doubleType = db.typeSystem.forDartType<double>();
    final stringType = db.typeSystem.forDartType<String>();
    return CompraPedidoDetalhe(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idCompraPedidoCabecalho: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_COMPRA_PEDIDO_CABECALHO']),
      idProduto:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
      quantidade: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
      valorUnitario: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_UNITARIO']),
      valorSubtotal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_SUBTOTAL']),
      taxaDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
      valorDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
      valorTotal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL']),
      cst: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CST']),
      csosn:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CSOSN']),
      cfop: intType.mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCompraPedidoCabecalho != null) {
      map['ID_COMPRA_PEDIDO_CABECALHO'] =
          Variable<int>(idCompraPedidoCabecalho);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<double>(quantidade);
    }
    if (!nullToAbsent || valorUnitario != null) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario);
    }
    if (!nullToAbsent || valorSubtotal != null) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || cst != null) {
      map['CST'] = Variable<String>(cst);
    }
    if (!nullToAbsent || csosn != null) {
      map['CSOSN'] = Variable<String>(csosn);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    return map;
  }

  CompraPedidoDetalhesCompanion toCompanion(bool nullToAbsent) {
    return CompraPedidoDetalhesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCompraPedidoCabecalho: idCompraPedidoCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idCompraPedidoCabecalho),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
      valorUnitario: valorUnitario == null && nullToAbsent
          ? const Value.absent()
          : Value(valorUnitario),
      valorSubtotal: valorSubtotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorSubtotal),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
      cst: cst == null && nullToAbsent ? const Value.absent() : Value(cst),
      csosn:
          csosn == null && nullToAbsent ? const Value.absent() : Value(csosn),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
    );
  }

  factory CompraPedidoDetalhe.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return CompraPedidoDetalhe(
      id: serializer.fromJson<int>(json['id']),
      idCompraPedidoCabecalho:
          serializer.fromJson<int>(json['idCompraPedidoCabecalho']),
      idProduto: serializer.fromJson<int>(json['idProduto']),
      quantidade: serializer.fromJson<double>(json['quantidade']),
      valorUnitario: serializer.fromJson<double>(json['valorUnitario']),
      valorSubtotal: serializer.fromJson<double>(json['valorSubtotal']),
      taxaDesconto: serializer.fromJson<double>(json['taxaDesconto']),
      valorDesconto: serializer.fromJson<double>(json['valorDesconto']),
      valorTotal: serializer.fromJson<double>(json['valorTotal']),
      cst: serializer.fromJson<String>(json['cst']),
      csosn: serializer.fromJson<String>(json['csosn']),
      cfop: serializer.fromJson<int>(json['cfop']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idCompraPedidoCabecalho':
          serializer.toJson<int>(idCompraPedidoCabecalho),
      'idProduto': serializer.toJson<int>(idProduto),
      'quantidade': serializer.toJson<double>(quantidade),
      'valorUnitario': serializer.toJson<double>(valorUnitario),
      'valorSubtotal': serializer.toJson<double>(valorSubtotal),
      'taxaDesconto': serializer.toJson<double>(taxaDesconto),
      'valorDesconto': serializer.toJson<double>(valorDesconto),
      'valorTotal': serializer.toJson<double>(valorTotal),
      'cst': serializer.toJson<String>(cst),
      'csosn': serializer.toJson<String>(csosn),
      'cfop': serializer.toJson<int>(cfop),
    };
  }

  CompraPedidoDetalhe copyWith(
          {int id,
          int idCompraPedidoCabecalho,
          int idProduto,
          double quantidade,
          double valorUnitario,
          double valorSubtotal,
          double taxaDesconto,
          double valorDesconto,
          double valorTotal,
          String cst,
          String csosn,
          int cfop}) =>
      CompraPedidoDetalhe(
        id: id ?? this.id,
        idCompraPedidoCabecalho:
            idCompraPedidoCabecalho ?? this.idCompraPedidoCabecalho,
        idProduto: idProduto ?? this.idProduto,
        quantidade: quantidade ?? this.quantidade,
        valorUnitario: valorUnitario ?? this.valorUnitario,
        valorSubtotal: valorSubtotal ?? this.valorSubtotal,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorTotal: valorTotal ?? this.valorTotal,
        cst: cst ?? this.cst,
        csosn: csosn ?? this.csosn,
        cfop: cfop ?? this.cfop,
      );
  @override
  String toString() {
    return (StringBuffer('CompraPedidoDetalhe(')
          ..write('id: $id, ')
          ..write('idCompraPedidoCabecalho: $idCompraPedidoCabecalho, ')
          ..write('idProduto: $idProduto, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('cst: $cst, ')
          ..write('csosn: $csosn, ')
          ..write('cfop: $cfop')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idCompraPedidoCabecalho.hashCode,
          $mrjc(
              idProduto.hashCode,
              $mrjc(
                  quantidade.hashCode,
                  $mrjc(
                      valorUnitario.hashCode,
                      $mrjc(
                          valorSubtotal.hashCode,
                          $mrjc(
                              taxaDesconto.hashCode,
                              $mrjc(
                                  valorDesconto.hashCode,
                                  $mrjc(
                                      valorTotal.hashCode,
                                      $mrjc(
                                          cst.hashCode,
                                          $mrjc(csosn.hashCode,
                                              cfop.hashCode))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is CompraPedidoDetalhe &&
          other.id == this.id &&
          other.idCompraPedidoCabecalho == this.idCompraPedidoCabecalho &&
          other.idProduto == this.idProduto &&
          other.quantidade == this.quantidade &&
          other.valorUnitario == this.valorUnitario &&
          other.valorSubtotal == this.valorSubtotal &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorDesconto == this.valorDesconto &&
          other.valorTotal == this.valorTotal &&
          other.cst == this.cst &&
          other.csosn == this.csosn &&
          other.cfop == this.cfop);
}

class CompraPedidoDetalhesCompanion
    extends UpdateCompanion<CompraPedidoDetalhe> {
  final Value<int> id;
  final Value<int> idCompraPedidoCabecalho;
  final Value<int> idProduto;
  final Value<double> quantidade;
  final Value<double> valorUnitario;
  final Value<double> valorSubtotal;
  final Value<double> taxaDesconto;
  final Value<double> valorDesconto;
  final Value<double> valorTotal;
  final Value<String> cst;
  final Value<String> csosn;
  final Value<int> cfop;
  const CompraPedidoDetalhesCompanion({
    this.id = const Value.absent(),
    this.idCompraPedidoCabecalho = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.cst = const Value.absent(),
    this.csosn = const Value.absent(),
    this.cfop = const Value.absent(),
  });
  CompraPedidoDetalhesCompanion.insert({
    this.id = const Value.absent(),
    this.idCompraPedidoCabecalho = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorSubtotal = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.cst = const Value.absent(),
    this.csosn = const Value.absent(),
    this.cfop = const Value.absent(),
  });
  static Insertable<CompraPedidoDetalhe> custom({
    Expression<int> id,
    Expression<int> idCompraPedidoCabecalho,
    Expression<int> idProduto,
    Expression<double> quantidade,
    Expression<double> valorUnitario,
    Expression<double> valorSubtotal,
    Expression<double> taxaDesconto,
    Expression<double> valorDesconto,
    Expression<double> valorTotal,
    Expression<String> cst,
    Expression<String> csosn,
    Expression<int> cfop,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCompraPedidoCabecalho != null)
        'ID_COMPRA_PEDIDO_CABECALHO': idCompraPedidoCabecalho,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (quantidade != null) 'QUANTIDADE': quantidade,
      if (valorUnitario != null) 'VALOR_UNITARIO': valorUnitario,
      if (valorSubtotal != null) 'VALOR_SUBTOTAL': valorSubtotal,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
      if (cst != null) 'CST': cst,
      if (csosn != null) 'CSOSN': csosn,
      if (cfop != null) 'CFOP': cfop,
    });
  }

  CompraPedidoDetalhesCompanion copyWith(
      {Value<int> id,
      Value<int> idCompraPedidoCabecalho,
      Value<int> idProduto,
      Value<double> quantidade,
      Value<double> valorUnitario,
      Value<double> valorSubtotal,
      Value<double> taxaDesconto,
      Value<double> valorDesconto,
      Value<double> valorTotal,
      Value<String> cst,
      Value<String> csosn,
      Value<int> cfop}) {
    return CompraPedidoDetalhesCompanion(
      id: id ?? this.id,
      idCompraPedidoCabecalho:
          idCompraPedidoCabecalho ?? this.idCompraPedidoCabecalho,
      idProduto: idProduto ?? this.idProduto,
      quantidade: quantidade ?? this.quantidade,
      valorUnitario: valorUnitario ?? this.valorUnitario,
      valorSubtotal: valorSubtotal ?? this.valorSubtotal,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorTotal: valorTotal ?? this.valorTotal,
      cst: cst ?? this.cst,
      csosn: csosn ?? this.csosn,
      cfop: cfop ?? this.cfop,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCompraPedidoCabecalho.present) {
      map['ID_COMPRA_PEDIDO_CABECALHO'] =
          Variable<int>(idCompraPedidoCabecalho.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<double>(quantidade.value);
    }
    if (valorUnitario.present) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario.value);
    }
    if (valorSubtotal.present) {
      map['VALOR_SUBTOTAL'] = Variable<double>(valorSubtotal.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    if (cst.present) {
      map['CST'] = Variable<String>(cst.value);
    }
    if (csosn.present) {
      map['CSOSN'] = Variable<String>(csosn.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('CompraPedidoDetalhesCompanion(')
          ..write('id: $id, ')
          ..write('idCompraPedidoCabecalho: $idCompraPedidoCabecalho, ')
          ..write('idProduto: $idProduto, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorSubtotal: $valorSubtotal, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('cst: $cst, ')
          ..write('csosn: $csosn, ')
          ..write('cfop: $cfop')
          ..write(')'))
        .toString();
  }
}

class $CompraPedidoDetalhesTable extends CompraPedidoDetalhes
    with TableInfo<$CompraPedidoDetalhesTable, CompraPedidoDetalhe> {
  final GeneratedDatabase _db;
  final String _alias;
  $CompraPedidoDetalhesTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idCompraPedidoCabecalhoMeta =
      const VerificationMeta('idCompraPedidoCabecalho');
  GeneratedIntColumn _idCompraPedidoCabecalho;
  @override
  GeneratedIntColumn get idCompraPedidoCabecalho =>
      _idCompraPedidoCabecalho ??= _constructIdCompraPedidoCabecalho();
  GeneratedIntColumn _constructIdCompraPedidoCabecalho() {
    return GeneratedIntColumn('ID_COMPRA_PEDIDO_CABECALHO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES COMPRA_PEDIDO_CABECALHO(ID)');
  }

  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  GeneratedIntColumn _idProduto;
  @override
  GeneratedIntColumn get idProduto => _idProduto ??= _constructIdProduto();
  GeneratedIntColumn _constructIdProduto() {
    return GeneratedIntColumn('ID_PRODUTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  }

  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  GeneratedRealColumn _quantidade;
  @override
  GeneratedRealColumn get quantidade => _quantidade ??= _constructQuantidade();
  GeneratedRealColumn _constructQuantidade() {
    return GeneratedRealColumn(
      'QUANTIDADE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorUnitarioMeta =
      const VerificationMeta('valorUnitario');
  GeneratedRealColumn _valorUnitario;
  @override
  GeneratedRealColumn get valorUnitario =>
      _valorUnitario ??= _constructValorUnitario();
  GeneratedRealColumn _constructValorUnitario() {
    return GeneratedRealColumn(
      'VALOR_UNITARIO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorSubtotalMeta =
      const VerificationMeta('valorSubtotal');
  GeneratedRealColumn _valorSubtotal;
  @override
  GeneratedRealColumn get valorSubtotal =>
      _valorSubtotal ??= _constructValorSubtotal();
  GeneratedRealColumn _constructValorSubtotal() {
    return GeneratedRealColumn(
      'VALOR_SUBTOTAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  GeneratedRealColumn _taxaDesconto;
  @override
  GeneratedRealColumn get taxaDesconto =>
      _taxaDesconto ??= _constructTaxaDesconto();
  GeneratedRealColumn _constructTaxaDesconto() {
    return GeneratedRealColumn(
      'TAXA_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  GeneratedRealColumn _valorDesconto;
  @override
  GeneratedRealColumn get valorDesconto =>
      _valorDesconto ??= _constructValorDesconto();
  GeneratedRealColumn _constructValorDesconto() {
    return GeneratedRealColumn(
      'VALOR_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  GeneratedRealColumn _valorTotal;
  @override
  GeneratedRealColumn get valorTotal => _valorTotal ??= _constructValorTotal();
  GeneratedRealColumn _constructValorTotal() {
    return GeneratedRealColumn(
      'VALOR_TOTAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cstMeta = const VerificationMeta('cst');
  GeneratedTextColumn _cst;
  @override
  GeneratedTextColumn get cst => _cst ??= _constructCst();
  GeneratedTextColumn _constructCst() {
    return GeneratedTextColumn('CST', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
  GeneratedTextColumn _csosn;
  @override
  GeneratedTextColumn get csosn => _csosn ??= _constructCsosn();
  GeneratedTextColumn _constructCsosn() {
    return GeneratedTextColumn('CSOSN', $tableName, true,
        minTextLength: 1, maxTextLength: 3);
  }

  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  GeneratedIntColumn _cfop;
  @override
  GeneratedIntColumn get cfop => _cfop ??= _constructCfop();
  GeneratedIntColumn _constructCfop() {
    return GeneratedIntColumn(
      'CFOP',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idCompraPedidoCabecalho,
        idProduto,
        quantidade,
        valorUnitario,
        valorSubtotal,
        taxaDesconto,
        valorDesconto,
        valorTotal,
        cst,
        csosn,
        cfop
      ];
  @override
  $CompraPedidoDetalhesTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'COMPRA_PEDIDO_DETALHE';
  @override
  final String actualTableName = 'COMPRA_PEDIDO_DETALHE';
  @override
  VerificationContext validateIntegrity(
      Insertable<CompraPedidoDetalhe> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_COMPRA_PEDIDO_CABECALHO')) {
      context.handle(
          _idCompraPedidoCabecalhoMeta,
          idCompraPedidoCabecalho.isAcceptableOrUnknown(
              data['ID_COMPRA_PEDIDO_CABECALHO'],
              _idCompraPedidoCabecalhoMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO'], _idProdutoMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE'], _quantidadeMeta));
    }
    if (data.containsKey('VALOR_UNITARIO')) {
      context.handle(
          _valorUnitarioMeta,
          valorUnitario.isAcceptableOrUnknown(
              data['VALOR_UNITARIO'], _valorUnitarioMeta));
    }
    if (data.containsKey('VALOR_SUBTOTAL')) {
      context.handle(
          _valorSubtotalMeta,
          valorSubtotal.isAcceptableOrUnknown(
              data['VALOR_SUBTOTAL'], _valorSubtotalMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO'], _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO'], _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL'], _valorTotalMeta));
    }
    if (data.containsKey('CST')) {
      context.handle(
          _cstMeta, cst.isAcceptableOrUnknown(data['CST'], _cstMeta));
    }
    if (data.containsKey('CSOSN')) {
      context.handle(
          _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN'], _csosnMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP'], _cfopMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  CompraPedidoDetalhe map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return CompraPedidoDetalhe.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $CompraPedidoDetalhesTable createAlias(String alias) {
    return $CompraPedidoDetalhesTable(_db, alias);
  }
}

class Contador extends DataClass implements Insertable<Contador> {
  final int id;
  final String cpf;
  final String cnpj;
  final String nome;
  final String email;
  final String inscricaoCrc;
  final String telefone;
  final String celular;
  final String logradouro;
  final String numero;
  final String complemento;
  final String bairro;
  final String cidade;
  final String uf;
  final String cep;
  final int codigoIbgeCidade;
  final int codigoIbgeUf;
  Contador(
      {@required this.id,
      this.cpf,
      this.cnpj,
      this.nome,
      this.email,
      this.inscricaoCrc,
      this.telefone,
      this.celular,
      this.logradouro,
      this.numero,
      this.complemento,
      this.bairro,
      this.cidade,
      this.uf,
      this.cep,
      this.codigoIbgeCidade,
      this.codigoIbgeUf});
  factory Contador.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return Contador(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      cpf: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CPF']),
      cnpj: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
      nome: stringType.mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
      email:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
      inscricaoCrc: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}INSCRICAO_CRC']),
      telefone: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
      celular:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CELULAR']),
      logradouro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
      numero:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
      complemento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
      bairro:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
      cidade:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CIDADE']),
      uf: stringType.mapFromDatabaseResponse(data['${effectivePrefix}UF']),
      cep: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
      codigoIbgeCidade: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
      codigoIbgeUf: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_IBGE_UF']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || cpf != null) {
      map['CPF'] = Variable<String>(cpf);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || inscricaoCrc != null) {
      map['INSCRICAO_CRC'] = Variable<String>(inscricaoCrc);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || celular != null) {
      map['CELULAR'] = Variable<String>(celular);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['CIDADE'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || codigoIbgeCidade != null) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade);
    }
    if (!nullToAbsent || codigoIbgeUf != null) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf);
    }
    return map;
  }

  ContadorsCompanion toCompanion(bool nullToAbsent) {
    return ContadorsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      cpf: cpf == null && nullToAbsent ? const Value.absent() : Value(cpf),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      inscricaoCrc: inscricaoCrc == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoCrc),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      cidade:
          cidade == null && nullToAbsent ? const Value.absent() : Value(cidade),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      codigoIbgeCidade: codigoIbgeCidade == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeCidade),
      codigoIbgeUf: codigoIbgeUf == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeUf),
    );
  }

  factory Contador.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Contador(
      id: serializer.fromJson<int>(json['id']),
      cpf: serializer.fromJson<String>(json['cpf']),
      cnpj: serializer.fromJson<String>(json['cnpj']),
      nome: serializer.fromJson<String>(json['nome']),
      email: serializer.fromJson<String>(json['email']),
      inscricaoCrc: serializer.fromJson<String>(json['inscricaoCrc']),
      telefone: serializer.fromJson<String>(json['telefone']),
      celular: serializer.fromJson<String>(json['celular']),
      logradouro: serializer.fromJson<String>(json['logradouro']),
      numero: serializer.fromJson<String>(json['numero']),
      complemento: serializer.fromJson<String>(json['complemento']),
      bairro: serializer.fromJson<String>(json['bairro']),
      cidade: serializer.fromJson<String>(json['cidade']),
      uf: serializer.fromJson<String>(json['uf']),
      cep: serializer.fromJson<String>(json['cep']),
      codigoIbgeCidade: serializer.fromJson<int>(json['codigoIbgeCidade']),
      codigoIbgeUf: serializer.fromJson<int>(json['codigoIbgeUf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'cpf': serializer.toJson<String>(cpf),
      'cnpj': serializer.toJson<String>(cnpj),
      'nome': serializer.toJson<String>(nome),
      'email': serializer.toJson<String>(email),
      'inscricaoCrc': serializer.toJson<String>(inscricaoCrc),
      'telefone': serializer.toJson<String>(telefone),
      'celular': serializer.toJson<String>(celular),
      'logradouro': serializer.toJson<String>(logradouro),
      'numero': serializer.toJson<String>(numero),
      'complemento': serializer.toJson<String>(complemento),
      'bairro': serializer.toJson<String>(bairro),
      'cidade': serializer.toJson<String>(cidade),
      'uf': serializer.toJson<String>(uf),
      'cep': serializer.toJson<String>(cep),
      'codigoIbgeCidade': serializer.toJson<int>(codigoIbgeCidade),
      'codigoIbgeUf': serializer.toJson<int>(codigoIbgeUf),
    };
  }

  Contador copyWith(
          {int id,
          String cpf,
          String cnpj,
          String nome,
          String email,
          String inscricaoCrc,
          String telefone,
          String celular,
          String logradouro,
          String numero,
          String complemento,
          String bairro,
          String cidade,
          String uf,
          String cep,
          int codigoIbgeCidade,
          int codigoIbgeUf}) =>
      Contador(
        id: id ?? this.id,
        cpf: cpf ?? this.cpf,
        cnpj: cnpj ?? this.cnpj,
        nome: nome ?? this.nome,
        email: email ?? this.email,
        inscricaoCrc: inscricaoCrc ?? this.inscricaoCrc,
        telefone: telefone ?? this.telefone,
        celular: celular ?? this.celular,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        bairro: bairro ?? this.bairro,
        cidade: cidade ?? this.cidade,
        uf: uf ?? this.uf,
        cep: cep ?? this.cep,
        codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
        codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
      );
  @override
  String toString() {
    return (StringBuffer('Contador(')
          ..write('id: $id, ')
          ..write('cpf: $cpf, ')
          ..write('cnpj: $cnpj, ')
          ..write('nome: $nome, ')
          ..write('email: $email, ')
          ..write('inscricaoCrc: $inscricaoCrc, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          cpf.hashCode,
          $mrjc(
              cnpj.hashCode,
              $mrjc(
                  nome.hashCode,
                  $mrjc(
                      email.hashCode,
                      $mrjc(
                          inscricaoCrc.hashCode,
                          $mrjc(
                              telefone.hashCode,
                              $mrjc(
                                  celular.hashCode,
                                  $mrjc(
                                      logradouro.hashCode,
                                      $mrjc(
                                          numero.hashCode,
                                          $mrjc(
                                              complemento.hashCode,
                                              $mrjc(
                                                  bairro.hashCode,
                                                  $mrjc(
                                                      cidade.hashCode,
                                                      $mrjc(
                                                          uf.hashCode,
                                                          $mrjc(
                                                              cep.hashCode,
                                                              $mrjc(
                                                                  codigoIbgeCidade
                                                                      .hashCode,
                                                                  codigoIbgeUf
                                                                      .hashCode)))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is Contador &&
          other.id == this.id &&
          other.cpf == this.cpf &&
          other.cnpj == this.cnpj &&
          other.nome == this.nome &&
          other.email == this.email &&
          other.inscricaoCrc == this.inscricaoCrc &&
          other.telefone == this.telefone &&
          other.celular == this.celular &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.uf == this.uf &&
          other.cep == this.cep &&
          other.codigoIbgeCidade == this.codigoIbgeCidade &&
          other.codigoIbgeUf == this.codigoIbgeUf);
}

class ContadorsCompanion extends UpdateCompanion<Contador> {
  final Value<int> id;
  final Value<String> cpf;
  final Value<String> cnpj;
  final Value<String> nome;
  final Value<String> email;
  final Value<String> inscricaoCrc;
  final Value<String> telefone;
  final Value<String> celular;
  final Value<String> logradouro;
  final Value<String> numero;
  final Value<String> complemento;
  final Value<String> bairro;
  final Value<String> cidade;
  final Value<String> uf;
  final Value<String> cep;
  final Value<int> codigoIbgeCidade;
  final Value<int> codigoIbgeUf;
  const ContadorsCompanion({
    this.id = const Value.absent(),
    this.cpf = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.nome = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoCrc = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
  });
  ContadorsCompanion.insert({
    this.id = const Value.absent(),
    this.cpf = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.nome = const Value.absent(),
    this.email = const Value.absent(),
    this.inscricaoCrc = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.cep = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
  });
  static Insertable<Contador> custom({
    Expression<int> id,
    Expression<String> cpf,
    Expression<String> cnpj,
    Expression<String> nome,
    Expression<String> email,
    Expression<String> inscricaoCrc,
    Expression<String> telefone,
    Expression<String> celular,
    Expression<String> logradouro,
    Expression<String> numero,
    Expression<String> complemento,
    Expression<String> bairro,
    Expression<String> cidade,
    Expression<String> uf,
    Expression<String> cep,
    Expression<int> codigoIbgeCidade,
    Expression<int> codigoIbgeUf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (cpf != null) 'CPF': cpf,
      if (cnpj != null) 'CNPJ': cnpj,
      if (nome != null) 'NOME': nome,
      if (email != null) 'EMAIL': email,
      if (inscricaoCrc != null) 'INSCRICAO_CRC': inscricaoCrc,
      if (telefone != null) 'TELEFONE': telefone,
      if (celular != null) 'CELULAR': celular,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (bairro != null) 'BAIRRO': bairro,
      if (cidade != null) 'CIDADE': cidade,
      if (uf != null) 'UF': uf,
      if (cep != null) 'CEP': cep,
      if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
      if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
    });
  }

  ContadorsCompanion copyWith(
      {Value<int> id,
      Value<String> cpf,
      Value<String> cnpj,
      Value<String> nome,
      Value<String> email,
      Value<String> inscricaoCrc,
      Value<String> telefone,
      Value<String> celular,
      Value<String> logradouro,
      Value<String> numero,
      Value<String> complemento,
      Value<String> bairro,
      Value<String> cidade,
      Value<String> uf,
      Value<String> cep,
      Value<int> codigoIbgeCidade,
      Value<int> codigoIbgeUf}) {
    return ContadorsCompanion(
      id: id ?? this.id,
      cpf: cpf ?? this.cpf,
      cnpj: cnpj ?? this.cnpj,
      nome: nome ?? this.nome,
      email: email ?? this.email,
      inscricaoCrc: inscricaoCrc ?? this.inscricaoCrc,
      telefone: telefone ?? this.telefone,
      celular: celular ?? this.celular,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      uf: uf ?? this.uf,
      cep: cep ?? this.cep,
      codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
      codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (cpf.present) {
      map['CPF'] = Variable<String>(cpf.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (inscricaoCrc.present) {
      map['INSCRICAO_CRC'] = Variable<String>(inscricaoCrc.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (celular.present) {
      map['CELULAR'] = Variable<String>(celular.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['CIDADE'] = Variable<String>(cidade.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (codigoIbgeCidade.present) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade.value);
    }
    if (codigoIbgeUf.present) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ContadorsCompanion(')
          ..write('id: $id, ')
          ..write('cpf: $cpf, ')
          ..write('cnpj: $cnpj, ')
          ..write('nome: $nome, ')
          ..write('email: $email, ')
          ..write('inscricaoCrc: $inscricaoCrc, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('cep: $cep, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf')
          ..write(')'))
        .toString();
  }
}

class $ContadorsTable extends Contadors
    with TableInfo<$ContadorsTable, Contador> {
  final GeneratedDatabase _db;
  final String _alias;
  $ContadorsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _cpfMeta = const VerificationMeta('cpf');
  GeneratedTextColumn _cpf;
  @override
  GeneratedTextColumn get cpf => _cpf ??= _constructCpf();
  GeneratedTextColumn _constructCpf() {
    return GeneratedTextColumn('CPF', $tableName, true,
        minTextLength: 1, maxTextLength: 11);
  }

  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  GeneratedTextColumn _cnpj;
  @override
  GeneratedTextColumn get cnpj => _cnpj ??= _constructCnpj();
  GeneratedTextColumn _constructCnpj() {
    return GeneratedTextColumn('CNPJ', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  GeneratedTextColumn _nome;
  @override
  GeneratedTextColumn get nome => _nome ??= _constructNome();
  GeneratedTextColumn _constructNome() {
    return GeneratedTextColumn('NOME', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _emailMeta = const VerificationMeta('email');
  GeneratedTextColumn _email;
  @override
  GeneratedTextColumn get email => _email ??= _constructEmail();
  GeneratedTextColumn _constructEmail() {
    return GeneratedTextColumn('EMAIL', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _inscricaoCrcMeta =
      const VerificationMeta('inscricaoCrc');
  GeneratedTextColumn _inscricaoCrc;
  @override
  GeneratedTextColumn get inscricaoCrc =>
      _inscricaoCrc ??= _constructInscricaoCrc();
  GeneratedTextColumn _constructInscricaoCrc() {
    return GeneratedTextColumn('INSCRICAO_CRC', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  GeneratedTextColumn _telefone;
  @override
  GeneratedTextColumn get telefone => _telefone ??= _constructTelefone();
  GeneratedTextColumn _constructTelefone() {
    return GeneratedTextColumn('TELEFONE', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  GeneratedTextColumn _celular;
  @override
  GeneratedTextColumn get celular => _celular ??= _constructCelular();
  GeneratedTextColumn _constructCelular() {
    return GeneratedTextColumn('CELULAR', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  GeneratedTextColumn _logradouro;
  @override
  GeneratedTextColumn get logradouro => _logradouro ??= _constructLogradouro();
  GeneratedTextColumn _constructLogradouro() {
    return GeneratedTextColumn('LOGRADOURO', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  GeneratedTextColumn _numero;
  @override
  GeneratedTextColumn get numero => _numero ??= _constructNumero();
  GeneratedTextColumn _constructNumero() {
    return GeneratedTextColumn('NUMERO', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  GeneratedTextColumn _complemento;
  @override
  GeneratedTextColumn get complemento =>
      _complemento ??= _constructComplemento();
  GeneratedTextColumn _constructComplemento() {
    return GeneratedTextColumn('COMPLEMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  GeneratedTextColumn _bairro;
  @override
  GeneratedTextColumn get bairro => _bairro ??= _constructBairro();
  GeneratedTextColumn _constructBairro() {
    return GeneratedTextColumn('BAIRRO', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  GeneratedTextColumn _cidade;
  @override
  GeneratedTextColumn get cidade => _cidade ??= _constructCidade();
  GeneratedTextColumn _constructCidade() {
    return GeneratedTextColumn('CIDADE', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  GeneratedTextColumn _uf;
  @override
  GeneratedTextColumn get uf => _uf ??= _constructUf();
  GeneratedTextColumn _constructUf() {
    return GeneratedTextColumn('UF', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  GeneratedTextColumn _cep;
  @override
  GeneratedTextColumn get cep => _cep ??= _constructCep();
  GeneratedTextColumn _constructCep() {
    return GeneratedTextColumn('CEP', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _codigoIbgeCidadeMeta =
      const VerificationMeta('codigoIbgeCidade');
  GeneratedIntColumn _codigoIbgeCidade;
  @override
  GeneratedIntColumn get codigoIbgeCidade =>
      _codigoIbgeCidade ??= _constructCodigoIbgeCidade();
  GeneratedIntColumn _constructCodigoIbgeCidade() {
    return GeneratedIntColumn(
      'CODIGO_IBGE_CIDADE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _codigoIbgeUfMeta =
      const VerificationMeta('codigoIbgeUf');
  GeneratedIntColumn _codigoIbgeUf;
  @override
  GeneratedIntColumn get codigoIbgeUf =>
      _codigoIbgeUf ??= _constructCodigoIbgeUf();
  GeneratedIntColumn _constructCodigoIbgeUf() {
    return GeneratedIntColumn(
      'CODIGO_IBGE_UF',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        cpf,
        cnpj,
        nome,
        email,
        inscricaoCrc,
        telefone,
        celular,
        logradouro,
        numero,
        complemento,
        bairro,
        cidade,
        uf,
        cep,
        codigoIbgeCidade,
        codigoIbgeUf
      ];
  @override
  $ContadorsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'CONTADOR';
  @override
  final String actualTableName = 'CONTADOR';
  @override
  VerificationContext validateIntegrity(Insertable<Contador> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('CPF')) {
      context.handle(
          _cpfMeta, cpf.isAcceptableOrUnknown(data['CPF'], _cpfMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ'], _cnpjMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME'], _nomeMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL'], _emailMeta));
    }
    if (data.containsKey('INSCRICAO_CRC')) {
      context.handle(
          _inscricaoCrcMeta,
          inscricaoCrc.isAcceptableOrUnknown(
              data['INSCRICAO_CRC'], _inscricaoCrcMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE'], _telefoneMeta));
    }
    if (data.containsKey('CELULAR')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['CELULAR'], _celularMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO'], _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO'], _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO'], _complementoMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO'], _bairroMeta));
    }
    if (data.containsKey('CIDADE')) {
      context.handle(_cidadeMeta,
          cidade.isAcceptableOrUnknown(data['CIDADE'], _cidadeMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF'], _ufMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP'], _cepMeta));
    }
    if (data.containsKey('CODIGO_IBGE_CIDADE')) {
      context.handle(
          _codigoIbgeCidadeMeta,
          codigoIbgeCidade.isAcceptableOrUnknown(
              data['CODIGO_IBGE_CIDADE'], _codigoIbgeCidadeMeta));
    }
    if (data.containsKey('CODIGO_IBGE_UF')) {
      context.handle(
          _codigoIbgeUfMeta,
          codigoIbgeUf.isAcceptableOrUnknown(
              data['CODIGO_IBGE_UF'], _codigoIbgeUfMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Contador map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return Contador.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $ContadorsTable createAlias(String alias) {
    return $ContadorsTable(_db, alias);
  }
}

class ContasPagar extends DataClass implements Insertable<ContasPagar> {
  final int id;
  final int idFornecedor;
  final int idCompraPedidoCabecalho;
  final DateTime dataLancamento;
  final DateTime dataVencimento;
  final DateTime dataPagamento;
  final double valorAPagar;
  final double taxaJuro;
  final double taxaMulta;
  final double taxaDesconto;
  final double valorJuro;
  final double valorMulta;
  final double valorDesconto;
  final double valorPago;
  final String numeroDocumento;
  final String historico;
  final String statusPagamento;
  ContasPagar(
      {@required this.id,
      this.idFornecedor,
      this.idCompraPedidoCabecalho,
      this.dataLancamento,
      this.dataVencimento,
      this.dataPagamento,
      this.valorAPagar,
      this.taxaJuro,
      this.taxaMulta,
      this.taxaDesconto,
      this.valorJuro,
      this.valorMulta,
      this.valorDesconto,
      this.valorPago,
      this.numeroDocumento,
      this.historico,
      this.statusPagamento});
  factory ContasPagar.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final doubleType = db.typeSystem.forDartType<double>();
    final stringType = db.typeSystem.forDartType<String>();
    return ContasPagar(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idFornecedor: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_FORNECEDOR']),
      idCompraPedidoCabecalho: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_COMPRA_PEDIDO_CABECALHO']),
      dataLancamento: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_LANCAMENTO']),
      dataVencimento: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_VENCIMENTO']),
      dataPagamento: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_PAGAMENTO']),
      valorAPagar: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_A_PAGAR']),
      taxaJuro: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_JURO']),
      taxaMulta: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_MULTA']),
      taxaDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
      valorJuro: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_JURO']),
      valorMulta: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_MULTA']),
      valorDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
      valorPago: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PAGO']),
      numeroDocumento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_DOCUMENTO']),
      historico: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HISTORICO']),
      statusPagamento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}STATUS_PAGAMENTO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idFornecedor != null) {
      map['ID_FORNECEDOR'] = Variable<int>(idFornecedor);
    }
    if (!nullToAbsent || idCompraPedidoCabecalho != null) {
      map['ID_COMPRA_PEDIDO_CABECALHO'] =
          Variable<int>(idCompraPedidoCabecalho);
    }
    if (!nullToAbsent || dataLancamento != null) {
      map['DATA_LANCAMENTO'] = Variable<DateTime>(dataLancamento);
    }
    if (!nullToAbsent || dataVencimento != null) {
      map['DATA_VENCIMENTO'] = Variable<DateTime>(dataVencimento);
    }
    if (!nullToAbsent || dataPagamento != null) {
      map['DATA_PAGAMENTO'] = Variable<DateTime>(dataPagamento);
    }
    if (!nullToAbsent || valorAPagar != null) {
      map['VALOR_A_PAGAR'] = Variable<double>(valorAPagar);
    }
    if (!nullToAbsent || taxaJuro != null) {
      map['TAXA_JURO'] = Variable<double>(taxaJuro);
    }
    if (!nullToAbsent || taxaMulta != null) {
      map['TAXA_MULTA'] = Variable<double>(taxaMulta);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorJuro != null) {
      map['VALOR_JURO'] = Variable<double>(valorJuro);
    }
    if (!nullToAbsent || valorMulta != null) {
      map['VALOR_MULTA'] = Variable<double>(valorMulta);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorPago != null) {
      map['VALOR_PAGO'] = Variable<double>(valorPago);
    }
    if (!nullToAbsent || numeroDocumento != null) {
      map['NUMERO_DOCUMENTO'] = Variable<String>(numeroDocumento);
    }
    if (!nullToAbsent || historico != null) {
      map['HISTORICO'] = Variable<String>(historico);
    }
    if (!nullToAbsent || statusPagamento != null) {
      map['STATUS_PAGAMENTO'] = Variable<String>(statusPagamento);
    }
    return map;
  }

  ContasPagarsCompanion toCompanion(bool nullToAbsent) {
    return ContasPagarsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idFornecedor: idFornecedor == null && nullToAbsent
          ? const Value.absent()
          : Value(idFornecedor),
      idCompraPedidoCabecalho: idCompraPedidoCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idCompraPedidoCabecalho),
      dataLancamento: dataLancamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataLancamento),
      dataVencimento: dataVencimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataVencimento),
      dataPagamento: dataPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataPagamento),
      valorAPagar: valorAPagar == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAPagar),
      taxaJuro: taxaJuro == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaJuro),
      taxaMulta: taxaMulta == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaMulta),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorJuro: valorJuro == null && nullToAbsent
          ? const Value.absent()
          : Value(valorJuro),
      valorMulta: valorMulta == null && nullToAbsent
          ? const Value.absent()
          : Value(valorMulta),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorPago: valorPago == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPago),
      numeroDocumento: numeroDocumento == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroDocumento),
      historico: historico == null && nullToAbsent
          ? const Value.absent()
          : Value(historico),
      statusPagamento: statusPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(statusPagamento),
    );
  }

  factory ContasPagar.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ContasPagar(
      id: serializer.fromJson<int>(json['id']),
      idFornecedor: serializer.fromJson<int>(json['idFornecedor']),
      idCompraPedidoCabecalho:
          serializer.fromJson<int>(json['idCompraPedidoCabecalho']),
      dataLancamento: serializer.fromJson<DateTime>(json['dataLancamento']),
      dataVencimento: serializer.fromJson<DateTime>(json['dataVencimento']),
      dataPagamento: serializer.fromJson<DateTime>(json['dataPagamento']),
      valorAPagar: serializer.fromJson<double>(json['valorAPagar']),
      taxaJuro: serializer.fromJson<double>(json['taxaJuro']),
      taxaMulta: serializer.fromJson<double>(json['taxaMulta']),
      taxaDesconto: serializer.fromJson<double>(json['taxaDesconto']),
      valorJuro: serializer.fromJson<double>(json['valorJuro']),
      valorMulta: serializer.fromJson<double>(json['valorMulta']),
      valorDesconto: serializer.fromJson<double>(json['valorDesconto']),
      valorPago: serializer.fromJson<double>(json['valorPago']),
      numeroDocumento: serializer.fromJson<String>(json['numeroDocumento']),
      historico: serializer.fromJson<String>(json['historico']),
      statusPagamento: serializer.fromJson<String>(json['statusPagamento']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idFornecedor': serializer.toJson<int>(idFornecedor),
      'idCompraPedidoCabecalho':
          serializer.toJson<int>(idCompraPedidoCabecalho),
      'dataLancamento': serializer.toJson<DateTime>(dataLancamento),
      'dataVencimento': serializer.toJson<DateTime>(dataVencimento),
      'dataPagamento': serializer.toJson<DateTime>(dataPagamento),
      'valorAPagar': serializer.toJson<double>(valorAPagar),
      'taxaJuro': serializer.toJson<double>(taxaJuro),
      'taxaMulta': serializer.toJson<double>(taxaMulta),
      'taxaDesconto': serializer.toJson<double>(taxaDesconto),
      'valorJuro': serializer.toJson<double>(valorJuro),
      'valorMulta': serializer.toJson<double>(valorMulta),
      'valorDesconto': serializer.toJson<double>(valorDesconto),
      'valorPago': serializer.toJson<double>(valorPago),
      'numeroDocumento': serializer.toJson<String>(numeroDocumento),
      'historico': serializer.toJson<String>(historico),
      'statusPagamento': serializer.toJson<String>(statusPagamento),
    };
  }

  ContasPagar copyWith(
          {int id,
          int idFornecedor,
          int idCompraPedidoCabecalho,
          DateTime dataLancamento,
          DateTime dataVencimento,
          DateTime dataPagamento,
          double valorAPagar,
          double taxaJuro,
          double taxaMulta,
          double taxaDesconto,
          double valorJuro,
          double valorMulta,
          double valorDesconto,
          double valorPago,
          String numeroDocumento,
          String historico,
          String statusPagamento}) =>
      ContasPagar(
        id: id ?? this.id,
        idFornecedor: idFornecedor ?? this.idFornecedor,
        idCompraPedidoCabecalho:
            idCompraPedidoCabecalho ?? this.idCompraPedidoCabecalho,
        dataLancamento: dataLancamento ?? this.dataLancamento,
        dataVencimento: dataVencimento ?? this.dataVencimento,
        dataPagamento: dataPagamento ?? this.dataPagamento,
        valorAPagar: valorAPagar ?? this.valorAPagar,
        taxaJuro: taxaJuro ?? this.taxaJuro,
        taxaMulta: taxaMulta ?? this.taxaMulta,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorJuro: valorJuro ?? this.valorJuro,
        valorMulta: valorMulta ?? this.valorMulta,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorPago: valorPago ?? this.valorPago,
        numeroDocumento: numeroDocumento ?? this.numeroDocumento,
        historico: historico ?? this.historico,
        statusPagamento: statusPagamento ?? this.statusPagamento,
      );
  @override
  String toString() {
    return (StringBuffer('ContasPagar(')
          ..write('id: $id, ')
          ..write('idFornecedor: $idFornecedor, ')
          ..write('idCompraPedidoCabecalho: $idCompraPedidoCabecalho, ')
          ..write('dataLancamento: $dataLancamento, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('dataPagamento: $dataPagamento, ')
          ..write('valorAPagar: $valorAPagar, ')
          ..write('taxaJuro: $taxaJuro, ')
          ..write('taxaMulta: $taxaMulta, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorJuro: $valorJuro, ')
          ..write('valorMulta: $valorMulta, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorPago: $valorPago, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('historico: $historico, ')
          ..write('statusPagamento: $statusPagamento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idFornecedor.hashCode,
          $mrjc(
              idCompraPedidoCabecalho.hashCode,
              $mrjc(
                  dataLancamento.hashCode,
                  $mrjc(
                      dataVencimento.hashCode,
                      $mrjc(
                          dataPagamento.hashCode,
                          $mrjc(
                              valorAPagar.hashCode,
                              $mrjc(
                                  taxaJuro.hashCode,
                                  $mrjc(
                                      taxaMulta.hashCode,
                                      $mrjc(
                                          taxaDesconto.hashCode,
                                          $mrjc(
                                              valorJuro.hashCode,
                                              $mrjc(
                                                  valorMulta.hashCode,
                                                  $mrjc(
                                                      valorDesconto.hashCode,
                                                      $mrjc(
                                                          valorPago.hashCode,
                                                          $mrjc(
                                                              numeroDocumento
                                                                  .hashCode,
                                                              $mrjc(
                                                                  historico
                                                                      .hashCode,
                                                                  statusPagamento
                                                                      .hashCode)))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is ContasPagar &&
          other.id == this.id &&
          other.idFornecedor == this.idFornecedor &&
          other.idCompraPedidoCabecalho == this.idCompraPedidoCabecalho &&
          other.dataLancamento == this.dataLancamento &&
          other.dataVencimento == this.dataVencimento &&
          other.dataPagamento == this.dataPagamento &&
          other.valorAPagar == this.valorAPagar &&
          other.taxaJuro == this.taxaJuro &&
          other.taxaMulta == this.taxaMulta &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorJuro == this.valorJuro &&
          other.valorMulta == this.valorMulta &&
          other.valorDesconto == this.valorDesconto &&
          other.valorPago == this.valorPago &&
          other.numeroDocumento == this.numeroDocumento &&
          other.historico == this.historico &&
          other.statusPagamento == this.statusPagamento);
}

class ContasPagarsCompanion extends UpdateCompanion<ContasPagar> {
  final Value<int> id;
  final Value<int> idFornecedor;
  final Value<int> idCompraPedidoCabecalho;
  final Value<DateTime> dataLancamento;
  final Value<DateTime> dataVencimento;
  final Value<DateTime> dataPagamento;
  final Value<double> valorAPagar;
  final Value<double> taxaJuro;
  final Value<double> taxaMulta;
  final Value<double> taxaDesconto;
  final Value<double> valorJuro;
  final Value<double> valorMulta;
  final Value<double> valorDesconto;
  final Value<double> valorPago;
  final Value<String> numeroDocumento;
  final Value<String> historico;
  final Value<String> statusPagamento;
  const ContasPagarsCompanion({
    this.id = const Value.absent(),
    this.idFornecedor = const Value.absent(),
    this.idCompraPedidoCabecalho = const Value.absent(),
    this.dataLancamento = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.dataPagamento = const Value.absent(),
    this.valorAPagar = const Value.absent(),
    this.taxaJuro = const Value.absent(),
    this.taxaMulta = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorJuro = const Value.absent(),
    this.valorMulta = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorPago = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.historico = const Value.absent(),
    this.statusPagamento = const Value.absent(),
  });
  ContasPagarsCompanion.insert({
    this.id = const Value.absent(),
    this.idFornecedor = const Value.absent(),
    this.idCompraPedidoCabecalho = const Value.absent(),
    this.dataLancamento = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.dataPagamento = const Value.absent(),
    this.valorAPagar = const Value.absent(),
    this.taxaJuro = const Value.absent(),
    this.taxaMulta = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorJuro = const Value.absent(),
    this.valorMulta = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorPago = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.historico = const Value.absent(),
    this.statusPagamento = const Value.absent(),
  });
  static Insertable<ContasPagar> custom({
    Expression<int> id,
    Expression<int> idFornecedor,
    Expression<int> idCompraPedidoCabecalho,
    Expression<DateTime> dataLancamento,
    Expression<DateTime> dataVencimento,
    Expression<DateTime> dataPagamento,
    Expression<double> valorAPagar,
    Expression<double> taxaJuro,
    Expression<double> taxaMulta,
    Expression<double> taxaDesconto,
    Expression<double> valorJuro,
    Expression<double> valorMulta,
    Expression<double> valorDesconto,
    Expression<double> valorPago,
    Expression<String> numeroDocumento,
    Expression<String> historico,
    Expression<String> statusPagamento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idFornecedor != null) 'ID_FORNECEDOR': idFornecedor,
      if (idCompraPedidoCabecalho != null)
        'ID_COMPRA_PEDIDO_CABECALHO': idCompraPedidoCabecalho,
      if (dataLancamento != null) 'DATA_LANCAMENTO': dataLancamento,
      if (dataVencimento != null) 'DATA_VENCIMENTO': dataVencimento,
      if (dataPagamento != null) 'DATA_PAGAMENTO': dataPagamento,
      if (valorAPagar != null) 'VALOR_A_PAGAR': valorAPagar,
      if (taxaJuro != null) 'TAXA_JURO': taxaJuro,
      if (taxaMulta != null) 'TAXA_MULTA': taxaMulta,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorJuro != null) 'VALOR_JURO': valorJuro,
      if (valorMulta != null) 'VALOR_MULTA': valorMulta,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorPago != null) 'VALOR_PAGO': valorPago,
      if (numeroDocumento != null) 'NUMERO_DOCUMENTO': numeroDocumento,
      if (historico != null) 'HISTORICO': historico,
      if (statusPagamento != null) 'STATUS_PAGAMENTO': statusPagamento,
    });
  }

  ContasPagarsCompanion copyWith(
      {Value<int> id,
      Value<int> idFornecedor,
      Value<int> idCompraPedidoCabecalho,
      Value<DateTime> dataLancamento,
      Value<DateTime> dataVencimento,
      Value<DateTime> dataPagamento,
      Value<double> valorAPagar,
      Value<double> taxaJuro,
      Value<double> taxaMulta,
      Value<double> taxaDesconto,
      Value<double> valorJuro,
      Value<double> valorMulta,
      Value<double> valorDesconto,
      Value<double> valorPago,
      Value<String> numeroDocumento,
      Value<String> historico,
      Value<String> statusPagamento}) {
    return ContasPagarsCompanion(
      id: id ?? this.id,
      idFornecedor: idFornecedor ?? this.idFornecedor,
      idCompraPedidoCabecalho:
          idCompraPedidoCabecalho ?? this.idCompraPedidoCabecalho,
      dataLancamento: dataLancamento ?? this.dataLancamento,
      dataVencimento: dataVencimento ?? this.dataVencimento,
      dataPagamento: dataPagamento ?? this.dataPagamento,
      valorAPagar: valorAPagar ?? this.valorAPagar,
      taxaJuro: taxaJuro ?? this.taxaJuro,
      taxaMulta: taxaMulta ?? this.taxaMulta,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorJuro: valorJuro ?? this.valorJuro,
      valorMulta: valorMulta ?? this.valorMulta,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorPago: valorPago ?? this.valorPago,
      numeroDocumento: numeroDocumento ?? this.numeroDocumento,
      historico: historico ?? this.historico,
      statusPagamento: statusPagamento ?? this.statusPagamento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idFornecedor.present) {
      map['ID_FORNECEDOR'] = Variable<int>(idFornecedor.value);
    }
    if (idCompraPedidoCabecalho.present) {
      map['ID_COMPRA_PEDIDO_CABECALHO'] =
          Variable<int>(idCompraPedidoCabecalho.value);
    }
    if (dataLancamento.present) {
      map['DATA_LANCAMENTO'] = Variable<DateTime>(dataLancamento.value);
    }
    if (dataVencimento.present) {
      map['DATA_VENCIMENTO'] = Variable<DateTime>(dataVencimento.value);
    }
    if (dataPagamento.present) {
      map['DATA_PAGAMENTO'] = Variable<DateTime>(dataPagamento.value);
    }
    if (valorAPagar.present) {
      map['VALOR_A_PAGAR'] = Variable<double>(valorAPagar.value);
    }
    if (taxaJuro.present) {
      map['TAXA_JURO'] = Variable<double>(taxaJuro.value);
    }
    if (taxaMulta.present) {
      map['TAXA_MULTA'] = Variable<double>(taxaMulta.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorJuro.present) {
      map['VALOR_JURO'] = Variable<double>(valorJuro.value);
    }
    if (valorMulta.present) {
      map['VALOR_MULTA'] = Variable<double>(valorMulta.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorPago.present) {
      map['VALOR_PAGO'] = Variable<double>(valorPago.value);
    }
    if (numeroDocumento.present) {
      map['NUMERO_DOCUMENTO'] = Variable<String>(numeroDocumento.value);
    }
    if (historico.present) {
      map['HISTORICO'] = Variable<String>(historico.value);
    }
    if (statusPagamento.present) {
      map['STATUS_PAGAMENTO'] = Variable<String>(statusPagamento.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ContasPagarsCompanion(')
          ..write('id: $id, ')
          ..write('idFornecedor: $idFornecedor, ')
          ..write('idCompraPedidoCabecalho: $idCompraPedidoCabecalho, ')
          ..write('dataLancamento: $dataLancamento, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('dataPagamento: $dataPagamento, ')
          ..write('valorAPagar: $valorAPagar, ')
          ..write('taxaJuro: $taxaJuro, ')
          ..write('taxaMulta: $taxaMulta, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorJuro: $valorJuro, ')
          ..write('valorMulta: $valorMulta, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorPago: $valorPago, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('historico: $historico, ')
          ..write('statusPagamento: $statusPagamento')
          ..write(')'))
        .toString();
  }
}

class $ContasPagarsTable extends ContasPagars
    with TableInfo<$ContasPagarsTable, ContasPagar> {
  final GeneratedDatabase _db;
  final String _alias;
  $ContasPagarsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idFornecedorMeta =
      const VerificationMeta('idFornecedor');
  GeneratedIntColumn _idFornecedor;
  @override
  GeneratedIntColumn get idFornecedor =>
      _idFornecedor ??= _constructIdFornecedor();
  GeneratedIntColumn _constructIdFornecedor() {
    return GeneratedIntColumn('ID_FORNECEDOR', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES FORNECEDOR(ID)');
  }

  final VerificationMeta _idCompraPedidoCabecalhoMeta =
      const VerificationMeta('idCompraPedidoCabecalho');
  GeneratedIntColumn _idCompraPedidoCabecalho;
  @override
  GeneratedIntColumn get idCompraPedidoCabecalho =>
      _idCompraPedidoCabecalho ??= _constructIdCompraPedidoCabecalho();
  GeneratedIntColumn _constructIdCompraPedidoCabecalho() {
    return GeneratedIntColumn('ID_COMPRA_PEDIDO_CABECALHO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES COMPRA_PEDIDO_CABECALHO(ID)');
  }

  final VerificationMeta _dataLancamentoMeta =
      const VerificationMeta('dataLancamento');
  GeneratedDateTimeColumn _dataLancamento;
  @override
  GeneratedDateTimeColumn get dataLancamento =>
      _dataLancamento ??= _constructDataLancamento();
  GeneratedDateTimeColumn _constructDataLancamento() {
    return GeneratedDateTimeColumn(
      'DATA_LANCAMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataVencimentoMeta =
      const VerificationMeta('dataVencimento');
  GeneratedDateTimeColumn _dataVencimento;
  @override
  GeneratedDateTimeColumn get dataVencimento =>
      _dataVencimento ??= _constructDataVencimento();
  GeneratedDateTimeColumn _constructDataVencimento() {
    return GeneratedDateTimeColumn(
      'DATA_VENCIMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataPagamentoMeta =
      const VerificationMeta('dataPagamento');
  GeneratedDateTimeColumn _dataPagamento;
  @override
  GeneratedDateTimeColumn get dataPagamento =>
      _dataPagamento ??= _constructDataPagamento();
  GeneratedDateTimeColumn _constructDataPagamento() {
    return GeneratedDateTimeColumn(
      'DATA_PAGAMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorAPagarMeta =
      const VerificationMeta('valorAPagar');
  GeneratedRealColumn _valorAPagar;
  @override
  GeneratedRealColumn get valorAPagar =>
      _valorAPagar ??= _constructValorAPagar();
  GeneratedRealColumn _constructValorAPagar() {
    return GeneratedRealColumn(
      'VALOR_A_PAGAR',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaJuroMeta = const VerificationMeta('taxaJuro');
  GeneratedRealColumn _taxaJuro;
  @override
  GeneratedRealColumn get taxaJuro => _taxaJuro ??= _constructTaxaJuro();
  GeneratedRealColumn _constructTaxaJuro() {
    return GeneratedRealColumn(
      'TAXA_JURO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaMultaMeta = const VerificationMeta('taxaMulta');
  GeneratedRealColumn _taxaMulta;
  @override
  GeneratedRealColumn get taxaMulta => _taxaMulta ??= _constructTaxaMulta();
  GeneratedRealColumn _constructTaxaMulta() {
    return GeneratedRealColumn(
      'TAXA_MULTA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  GeneratedRealColumn _taxaDesconto;
  @override
  GeneratedRealColumn get taxaDesconto =>
      _taxaDesconto ??= _constructTaxaDesconto();
  GeneratedRealColumn _constructTaxaDesconto() {
    return GeneratedRealColumn(
      'TAXA_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorJuroMeta = const VerificationMeta('valorJuro');
  GeneratedRealColumn _valorJuro;
  @override
  GeneratedRealColumn get valorJuro => _valorJuro ??= _constructValorJuro();
  GeneratedRealColumn _constructValorJuro() {
    return GeneratedRealColumn(
      'VALOR_JURO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorMultaMeta = const VerificationMeta('valorMulta');
  GeneratedRealColumn _valorMulta;
  @override
  GeneratedRealColumn get valorMulta => _valorMulta ??= _constructValorMulta();
  GeneratedRealColumn _constructValorMulta() {
    return GeneratedRealColumn(
      'VALOR_MULTA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  GeneratedRealColumn _valorDesconto;
  @override
  GeneratedRealColumn get valorDesconto =>
      _valorDesconto ??= _constructValorDesconto();
  GeneratedRealColumn _constructValorDesconto() {
    return GeneratedRealColumn(
      'VALOR_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorPagoMeta = const VerificationMeta('valorPago');
  GeneratedRealColumn _valorPago;
  @override
  GeneratedRealColumn get valorPago => _valorPago ??= _constructValorPago();
  GeneratedRealColumn _constructValorPago() {
    return GeneratedRealColumn(
      'VALOR_PAGO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _numeroDocumentoMeta =
      const VerificationMeta('numeroDocumento');
  GeneratedTextColumn _numeroDocumento;
  @override
  GeneratedTextColumn get numeroDocumento =>
      _numeroDocumento ??= _constructNumeroDocumento();
  GeneratedTextColumn _constructNumeroDocumento() {
    return GeneratedTextColumn('NUMERO_DOCUMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 50);
  }

  final VerificationMeta _historicoMeta = const VerificationMeta('historico');
  GeneratedTextColumn _historico;
  @override
  GeneratedTextColumn get historico => _historico ??= _constructHistorico();
  GeneratedTextColumn _constructHistorico() {
    return GeneratedTextColumn('HISTORICO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _statusPagamentoMeta =
      const VerificationMeta('statusPagamento');
  GeneratedTextColumn _statusPagamento;
  @override
  GeneratedTextColumn get statusPagamento =>
      _statusPagamento ??= _constructStatusPagamento();
  GeneratedTextColumn _constructStatusPagamento() {
    return GeneratedTextColumn('STATUS_PAGAMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idFornecedor,
        idCompraPedidoCabecalho,
        dataLancamento,
        dataVencimento,
        dataPagamento,
        valorAPagar,
        taxaJuro,
        taxaMulta,
        taxaDesconto,
        valorJuro,
        valorMulta,
        valorDesconto,
        valorPago,
        numeroDocumento,
        historico,
        statusPagamento
      ];
  @override
  $ContasPagarsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'CONTAS_PAGAR';
  @override
  final String actualTableName = 'CONTAS_PAGAR';
  @override
  VerificationContext validateIntegrity(Insertable<ContasPagar> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_FORNECEDOR')) {
      context.handle(
          _idFornecedorMeta,
          idFornecedor.isAcceptableOrUnknown(
              data['ID_FORNECEDOR'], _idFornecedorMeta));
    }
    if (data.containsKey('ID_COMPRA_PEDIDO_CABECALHO')) {
      context.handle(
          _idCompraPedidoCabecalhoMeta,
          idCompraPedidoCabecalho.isAcceptableOrUnknown(
              data['ID_COMPRA_PEDIDO_CABECALHO'],
              _idCompraPedidoCabecalhoMeta));
    }
    if (data.containsKey('DATA_LANCAMENTO')) {
      context.handle(
          _dataLancamentoMeta,
          dataLancamento.isAcceptableOrUnknown(
              data['DATA_LANCAMENTO'], _dataLancamentoMeta));
    }
    if (data.containsKey('DATA_VENCIMENTO')) {
      context.handle(
          _dataVencimentoMeta,
          dataVencimento.isAcceptableOrUnknown(
              data['DATA_VENCIMENTO'], _dataVencimentoMeta));
    }
    if (data.containsKey('DATA_PAGAMENTO')) {
      context.handle(
          _dataPagamentoMeta,
          dataPagamento.isAcceptableOrUnknown(
              data['DATA_PAGAMENTO'], _dataPagamentoMeta));
    }
    if (data.containsKey('VALOR_A_PAGAR')) {
      context.handle(
          _valorAPagarMeta,
          valorAPagar.isAcceptableOrUnknown(
              data['VALOR_A_PAGAR'], _valorAPagarMeta));
    }
    if (data.containsKey('TAXA_JURO')) {
      context.handle(_taxaJuroMeta,
          taxaJuro.isAcceptableOrUnknown(data['TAXA_JURO'], _taxaJuroMeta));
    }
    if (data.containsKey('TAXA_MULTA')) {
      context.handle(_taxaMultaMeta,
          taxaMulta.isAcceptableOrUnknown(data['TAXA_MULTA'], _taxaMultaMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO'], _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_JURO')) {
      context.handle(_valorJuroMeta,
          valorJuro.isAcceptableOrUnknown(data['VALOR_JURO'], _valorJuroMeta));
    }
    if (data.containsKey('VALOR_MULTA')) {
      context.handle(
          _valorMultaMeta,
          valorMulta.isAcceptableOrUnknown(
              data['VALOR_MULTA'], _valorMultaMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO'], _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_PAGO')) {
      context.handle(_valorPagoMeta,
          valorPago.isAcceptableOrUnknown(data['VALOR_PAGO'], _valorPagoMeta));
    }
    if (data.containsKey('NUMERO_DOCUMENTO')) {
      context.handle(
          _numeroDocumentoMeta,
          numeroDocumento.isAcceptableOrUnknown(
              data['NUMERO_DOCUMENTO'], _numeroDocumentoMeta));
    }
    if (data.containsKey('HISTORICO')) {
      context.handle(_historicoMeta,
          historico.isAcceptableOrUnknown(data['HISTORICO'], _historicoMeta));
    }
    if (data.containsKey('STATUS_PAGAMENTO')) {
      context.handle(
          _statusPagamentoMeta,
          statusPagamento.isAcceptableOrUnknown(
              data['STATUS_PAGAMENTO'], _statusPagamentoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ContasPagar map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return ContasPagar.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $ContasPagarsTable createAlias(String alias) {
    return $ContasPagarsTable(_db, alias);
  }
}

class ContasReceber extends DataClass implements Insertable<ContasReceber> {
  final int id;
  final int idCliente;
  final DateTime dataLancamento;
  final DateTime dataVencimento;
  final DateTime dataRecebimento;
  final double valorAReceber;
  final double taxaJuro;
  final double taxaMulta;
  final double taxaDesconto;
  final double valorJuro;
  final double valorMulta;
  final double valorDesconto;
  final double valorRecebido;
  final String numeroDocumento;
  final String historico;
  final String statusRecebimento;
  ContasReceber(
      {@required this.id,
      this.idCliente,
      this.dataLancamento,
      this.dataVencimento,
      this.dataRecebimento,
      this.valorAReceber,
      this.taxaJuro,
      this.taxaMulta,
      this.taxaDesconto,
      this.valorJuro,
      this.valorMulta,
      this.valorDesconto,
      this.valorRecebido,
      this.numeroDocumento,
      this.historico,
      this.statusRecebimento});
  factory ContasReceber.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final doubleType = db.typeSystem.forDartType<double>();
    final stringType = db.typeSystem.forDartType<String>();
    return ContasReceber(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idCliente:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}ID_CLIENTE']),
      dataLancamento: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_LANCAMENTO']),
      dataVencimento: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_VENCIMENTO']),
      dataRecebimento: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_RECEBIMENTO']),
      valorAReceber: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_A_RECEBER']),
      taxaJuro: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_JURO']),
      taxaMulta: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_MULTA']),
      taxaDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
      valorJuro: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_JURO']),
      valorMulta: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_MULTA']),
      valorDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
      valorRecebido: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_RECEBIDO']),
      numeroDocumento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_DOCUMENTO']),
      historico: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HISTORICO']),
      statusRecebimento: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}STATUS_RECEBIMENTO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCliente != null) {
      map['ID_CLIENTE'] = Variable<int>(idCliente);
    }
    if (!nullToAbsent || dataLancamento != null) {
      map['DATA_LANCAMENTO'] = Variable<DateTime>(dataLancamento);
    }
    if (!nullToAbsent || dataVencimento != null) {
      map['DATA_VENCIMENTO'] = Variable<DateTime>(dataVencimento);
    }
    if (!nullToAbsent || dataRecebimento != null) {
      map['DATA_RECEBIMENTO'] = Variable<DateTime>(dataRecebimento);
    }
    if (!nullToAbsent || valorAReceber != null) {
      map['VALOR_A_RECEBER'] = Variable<double>(valorAReceber);
    }
    if (!nullToAbsent || taxaJuro != null) {
      map['TAXA_JURO'] = Variable<double>(taxaJuro);
    }
    if (!nullToAbsent || taxaMulta != null) {
      map['TAXA_MULTA'] = Variable<double>(taxaMulta);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorJuro != null) {
      map['VALOR_JURO'] = Variable<double>(valorJuro);
    }
    if (!nullToAbsent || valorMulta != null) {
      map['VALOR_MULTA'] = Variable<double>(valorMulta);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || valorRecebido != null) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido);
    }
    if (!nullToAbsent || numeroDocumento != null) {
      map['NUMERO_DOCUMENTO'] = Variable<String>(numeroDocumento);
    }
    if (!nullToAbsent || historico != null) {
      map['HISTORICO'] = Variable<String>(historico);
    }
    if (!nullToAbsent || statusRecebimento != null) {
      map['STATUS_RECEBIMENTO'] = Variable<String>(statusRecebimento);
    }
    return map;
  }

  ContasRecebersCompanion toCompanion(bool nullToAbsent) {
    return ContasRecebersCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCliente: idCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(idCliente),
      dataLancamento: dataLancamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataLancamento),
      dataVencimento: dataVencimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataVencimento),
      dataRecebimento: dataRecebimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataRecebimento),
      valorAReceber: valorAReceber == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAReceber),
      taxaJuro: taxaJuro == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaJuro),
      taxaMulta: taxaMulta == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaMulta),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorJuro: valorJuro == null && nullToAbsent
          ? const Value.absent()
          : Value(valorJuro),
      valorMulta: valorMulta == null && nullToAbsent
          ? const Value.absent()
          : Value(valorMulta),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      valorRecebido: valorRecebido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRecebido),
      numeroDocumento: numeroDocumento == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroDocumento),
      historico: historico == null && nullToAbsent
          ? const Value.absent()
          : Value(historico),
      statusRecebimento: statusRecebimento == null && nullToAbsent
          ? const Value.absent()
          : Value(statusRecebimento),
    );
  }

  factory ContasReceber.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ContasReceber(
      id: serializer.fromJson<int>(json['id']),
      idCliente: serializer.fromJson<int>(json['idCliente']),
      dataLancamento: serializer.fromJson<DateTime>(json['dataLancamento']),
      dataVencimento: serializer.fromJson<DateTime>(json['dataVencimento']),
      dataRecebimento: serializer.fromJson<DateTime>(json['dataRecebimento']),
      valorAReceber: serializer.fromJson<double>(json['valorAReceber']),
      taxaJuro: serializer.fromJson<double>(json['taxaJuro']),
      taxaMulta: serializer.fromJson<double>(json['taxaMulta']),
      taxaDesconto: serializer.fromJson<double>(json['taxaDesconto']),
      valorJuro: serializer.fromJson<double>(json['valorJuro']),
      valorMulta: serializer.fromJson<double>(json['valorMulta']),
      valorDesconto: serializer.fromJson<double>(json['valorDesconto']),
      valorRecebido: serializer.fromJson<double>(json['valorRecebido']),
      numeroDocumento: serializer.fromJson<String>(json['numeroDocumento']),
      historico: serializer.fromJson<String>(json['historico']),
      statusRecebimento: serializer.fromJson<String>(json['statusRecebimento']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idCliente': serializer.toJson<int>(idCliente),
      'dataLancamento': serializer.toJson<DateTime>(dataLancamento),
      'dataVencimento': serializer.toJson<DateTime>(dataVencimento),
      'dataRecebimento': serializer.toJson<DateTime>(dataRecebimento),
      'valorAReceber': serializer.toJson<double>(valorAReceber),
      'taxaJuro': serializer.toJson<double>(taxaJuro),
      'taxaMulta': serializer.toJson<double>(taxaMulta),
      'taxaDesconto': serializer.toJson<double>(taxaDesconto),
      'valorJuro': serializer.toJson<double>(valorJuro),
      'valorMulta': serializer.toJson<double>(valorMulta),
      'valorDesconto': serializer.toJson<double>(valorDesconto),
      'valorRecebido': serializer.toJson<double>(valorRecebido),
      'numeroDocumento': serializer.toJson<String>(numeroDocumento),
      'historico': serializer.toJson<String>(historico),
      'statusRecebimento': serializer.toJson<String>(statusRecebimento),
    };
  }

  ContasReceber copyWith(
          {int id,
          int idCliente,
          DateTime dataLancamento,
          DateTime dataVencimento,
          DateTime dataRecebimento,
          double valorAReceber,
          double taxaJuro,
          double taxaMulta,
          double taxaDesconto,
          double valorJuro,
          double valorMulta,
          double valorDesconto,
          double valorRecebido,
          String numeroDocumento,
          String historico,
          String statusRecebimento}) =>
      ContasReceber(
        id: id ?? this.id,
        idCliente: idCliente ?? this.idCliente,
        dataLancamento: dataLancamento ?? this.dataLancamento,
        dataVencimento: dataVencimento ?? this.dataVencimento,
        dataRecebimento: dataRecebimento ?? this.dataRecebimento,
        valorAReceber: valorAReceber ?? this.valorAReceber,
        taxaJuro: taxaJuro ?? this.taxaJuro,
        taxaMulta: taxaMulta ?? this.taxaMulta,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorJuro: valorJuro ?? this.valorJuro,
        valorMulta: valorMulta ?? this.valorMulta,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        valorRecebido: valorRecebido ?? this.valorRecebido,
        numeroDocumento: numeroDocumento ?? this.numeroDocumento,
        historico: historico ?? this.historico,
        statusRecebimento: statusRecebimento ?? this.statusRecebimento,
      );
  @override
  String toString() {
    return (StringBuffer('ContasReceber(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('dataLancamento: $dataLancamento, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('dataRecebimento: $dataRecebimento, ')
          ..write('valorAReceber: $valorAReceber, ')
          ..write('taxaJuro: $taxaJuro, ')
          ..write('taxaMulta: $taxaMulta, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorJuro: $valorJuro, ')
          ..write('valorMulta: $valorMulta, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('historico: $historico, ')
          ..write('statusRecebimento: $statusRecebimento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idCliente.hashCode,
          $mrjc(
              dataLancamento.hashCode,
              $mrjc(
                  dataVencimento.hashCode,
                  $mrjc(
                      dataRecebimento.hashCode,
                      $mrjc(
                          valorAReceber.hashCode,
                          $mrjc(
                              taxaJuro.hashCode,
                              $mrjc(
                                  taxaMulta.hashCode,
                                  $mrjc(
                                      taxaDesconto.hashCode,
                                      $mrjc(
                                          valorJuro.hashCode,
                                          $mrjc(
                                              valorMulta.hashCode,
                                              $mrjc(
                                                  valorDesconto.hashCode,
                                                  $mrjc(
                                                      valorRecebido.hashCode,
                                                      $mrjc(
                                                          numeroDocumento
                                                              .hashCode,
                                                          $mrjc(
                                                              historico
                                                                  .hashCode,
                                                              statusRecebimento
                                                                  .hashCode))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is ContasReceber &&
          other.id == this.id &&
          other.idCliente == this.idCliente &&
          other.dataLancamento == this.dataLancamento &&
          other.dataVencimento == this.dataVencimento &&
          other.dataRecebimento == this.dataRecebimento &&
          other.valorAReceber == this.valorAReceber &&
          other.taxaJuro == this.taxaJuro &&
          other.taxaMulta == this.taxaMulta &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorJuro == this.valorJuro &&
          other.valorMulta == this.valorMulta &&
          other.valorDesconto == this.valorDesconto &&
          other.valorRecebido == this.valorRecebido &&
          other.numeroDocumento == this.numeroDocumento &&
          other.historico == this.historico &&
          other.statusRecebimento == this.statusRecebimento);
}

class ContasRecebersCompanion extends UpdateCompanion<ContasReceber> {
  final Value<int> id;
  final Value<int> idCliente;
  final Value<DateTime> dataLancamento;
  final Value<DateTime> dataVencimento;
  final Value<DateTime> dataRecebimento;
  final Value<double> valorAReceber;
  final Value<double> taxaJuro;
  final Value<double> taxaMulta;
  final Value<double> taxaDesconto;
  final Value<double> valorJuro;
  final Value<double> valorMulta;
  final Value<double> valorDesconto;
  final Value<double> valorRecebido;
  final Value<String> numeroDocumento;
  final Value<String> historico;
  final Value<String> statusRecebimento;
  const ContasRecebersCompanion({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.dataLancamento = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.dataRecebimento = const Value.absent(),
    this.valorAReceber = const Value.absent(),
    this.taxaJuro = const Value.absent(),
    this.taxaMulta = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorJuro = const Value.absent(),
    this.valorMulta = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.historico = const Value.absent(),
    this.statusRecebimento = const Value.absent(),
  });
  ContasRecebersCompanion.insert({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.dataLancamento = const Value.absent(),
    this.dataVencimento = const Value.absent(),
    this.dataRecebimento = const Value.absent(),
    this.valorAReceber = const Value.absent(),
    this.taxaJuro = const Value.absent(),
    this.taxaMulta = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorJuro = const Value.absent(),
    this.valorMulta = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.numeroDocumento = const Value.absent(),
    this.historico = const Value.absent(),
    this.statusRecebimento = const Value.absent(),
  });
  static Insertable<ContasReceber> custom({
    Expression<int> id,
    Expression<int> idCliente,
    Expression<DateTime> dataLancamento,
    Expression<DateTime> dataVencimento,
    Expression<DateTime> dataRecebimento,
    Expression<double> valorAReceber,
    Expression<double> taxaJuro,
    Expression<double> taxaMulta,
    Expression<double> taxaDesconto,
    Expression<double> valorJuro,
    Expression<double> valorMulta,
    Expression<double> valorDesconto,
    Expression<double> valorRecebido,
    Expression<String> numeroDocumento,
    Expression<String> historico,
    Expression<String> statusRecebimento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCliente != null) 'ID_CLIENTE': idCliente,
      if (dataLancamento != null) 'DATA_LANCAMENTO': dataLancamento,
      if (dataVencimento != null) 'DATA_VENCIMENTO': dataVencimento,
      if (dataRecebimento != null) 'DATA_RECEBIMENTO': dataRecebimento,
      if (valorAReceber != null) 'VALOR_A_RECEBER': valorAReceber,
      if (taxaJuro != null) 'TAXA_JURO': taxaJuro,
      if (taxaMulta != null) 'TAXA_MULTA': taxaMulta,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorJuro != null) 'VALOR_JURO': valorJuro,
      if (valorMulta != null) 'VALOR_MULTA': valorMulta,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (valorRecebido != null) 'VALOR_RECEBIDO': valorRecebido,
      if (numeroDocumento != null) 'NUMERO_DOCUMENTO': numeroDocumento,
      if (historico != null) 'HISTORICO': historico,
      if (statusRecebimento != null) 'STATUS_RECEBIMENTO': statusRecebimento,
    });
  }

  ContasRecebersCompanion copyWith(
      {Value<int> id,
      Value<int> idCliente,
      Value<DateTime> dataLancamento,
      Value<DateTime> dataVencimento,
      Value<DateTime> dataRecebimento,
      Value<double> valorAReceber,
      Value<double> taxaJuro,
      Value<double> taxaMulta,
      Value<double> taxaDesconto,
      Value<double> valorJuro,
      Value<double> valorMulta,
      Value<double> valorDesconto,
      Value<double> valorRecebido,
      Value<String> numeroDocumento,
      Value<String> historico,
      Value<String> statusRecebimento}) {
    return ContasRecebersCompanion(
      id: id ?? this.id,
      idCliente: idCliente ?? this.idCliente,
      dataLancamento: dataLancamento ?? this.dataLancamento,
      dataVencimento: dataVencimento ?? this.dataVencimento,
      dataRecebimento: dataRecebimento ?? this.dataRecebimento,
      valorAReceber: valorAReceber ?? this.valorAReceber,
      taxaJuro: taxaJuro ?? this.taxaJuro,
      taxaMulta: taxaMulta ?? this.taxaMulta,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorJuro: valorJuro ?? this.valorJuro,
      valorMulta: valorMulta ?? this.valorMulta,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      valorRecebido: valorRecebido ?? this.valorRecebido,
      numeroDocumento: numeroDocumento ?? this.numeroDocumento,
      historico: historico ?? this.historico,
      statusRecebimento: statusRecebimento ?? this.statusRecebimento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCliente.present) {
      map['ID_CLIENTE'] = Variable<int>(idCliente.value);
    }
    if (dataLancamento.present) {
      map['DATA_LANCAMENTO'] = Variable<DateTime>(dataLancamento.value);
    }
    if (dataVencimento.present) {
      map['DATA_VENCIMENTO'] = Variable<DateTime>(dataVencimento.value);
    }
    if (dataRecebimento.present) {
      map['DATA_RECEBIMENTO'] = Variable<DateTime>(dataRecebimento.value);
    }
    if (valorAReceber.present) {
      map['VALOR_A_RECEBER'] = Variable<double>(valorAReceber.value);
    }
    if (taxaJuro.present) {
      map['TAXA_JURO'] = Variable<double>(taxaJuro.value);
    }
    if (taxaMulta.present) {
      map['TAXA_MULTA'] = Variable<double>(taxaMulta.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorJuro.present) {
      map['VALOR_JURO'] = Variable<double>(valorJuro.value);
    }
    if (valorMulta.present) {
      map['VALOR_MULTA'] = Variable<double>(valorMulta.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (valorRecebido.present) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido.value);
    }
    if (numeroDocumento.present) {
      map['NUMERO_DOCUMENTO'] = Variable<String>(numeroDocumento.value);
    }
    if (historico.present) {
      map['HISTORICO'] = Variable<String>(historico.value);
    }
    if (statusRecebimento.present) {
      map['STATUS_RECEBIMENTO'] = Variable<String>(statusRecebimento.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ContasRecebersCompanion(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('dataLancamento: $dataLancamento, ')
          ..write('dataVencimento: $dataVencimento, ')
          ..write('dataRecebimento: $dataRecebimento, ')
          ..write('valorAReceber: $valorAReceber, ')
          ..write('taxaJuro: $taxaJuro, ')
          ..write('taxaMulta: $taxaMulta, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorJuro: $valorJuro, ')
          ..write('valorMulta: $valorMulta, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('numeroDocumento: $numeroDocumento, ')
          ..write('historico: $historico, ')
          ..write('statusRecebimento: $statusRecebimento')
          ..write(')'))
        .toString();
  }
}

class $ContasRecebersTable extends ContasRecebers
    with TableInfo<$ContasRecebersTable, ContasReceber> {
  final GeneratedDatabase _db;
  final String _alias;
  $ContasRecebersTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
  GeneratedIntColumn _idCliente;
  @override
  GeneratedIntColumn get idCliente => _idCliente ??= _constructIdCliente();
  GeneratedIntColumn _constructIdCliente() {
    return GeneratedIntColumn('ID_CLIENTE', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
  }

  final VerificationMeta _dataLancamentoMeta =
      const VerificationMeta('dataLancamento');
  GeneratedDateTimeColumn _dataLancamento;
  @override
  GeneratedDateTimeColumn get dataLancamento =>
      _dataLancamento ??= _constructDataLancamento();
  GeneratedDateTimeColumn _constructDataLancamento() {
    return GeneratedDateTimeColumn(
      'DATA_LANCAMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataVencimentoMeta =
      const VerificationMeta('dataVencimento');
  GeneratedDateTimeColumn _dataVencimento;
  @override
  GeneratedDateTimeColumn get dataVencimento =>
      _dataVencimento ??= _constructDataVencimento();
  GeneratedDateTimeColumn _constructDataVencimento() {
    return GeneratedDateTimeColumn(
      'DATA_VENCIMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataRecebimentoMeta =
      const VerificationMeta('dataRecebimento');
  GeneratedDateTimeColumn _dataRecebimento;
  @override
  GeneratedDateTimeColumn get dataRecebimento =>
      _dataRecebimento ??= _constructDataRecebimento();
  GeneratedDateTimeColumn _constructDataRecebimento() {
    return GeneratedDateTimeColumn(
      'DATA_RECEBIMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorAReceberMeta =
      const VerificationMeta('valorAReceber');
  GeneratedRealColumn _valorAReceber;
  @override
  GeneratedRealColumn get valorAReceber =>
      _valorAReceber ??= _constructValorAReceber();
  GeneratedRealColumn _constructValorAReceber() {
    return GeneratedRealColumn(
      'VALOR_A_RECEBER',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaJuroMeta = const VerificationMeta('taxaJuro');
  GeneratedRealColumn _taxaJuro;
  @override
  GeneratedRealColumn get taxaJuro => _taxaJuro ??= _constructTaxaJuro();
  GeneratedRealColumn _constructTaxaJuro() {
    return GeneratedRealColumn(
      'TAXA_JURO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaMultaMeta = const VerificationMeta('taxaMulta');
  GeneratedRealColumn _taxaMulta;
  @override
  GeneratedRealColumn get taxaMulta => _taxaMulta ??= _constructTaxaMulta();
  GeneratedRealColumn _constructTaxaMulta() {
    return GeneratedRealColumn(
      'TAXA_MULTA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  GeneratedRealColumn _taxaDesconto;
  @override
  GeneratedRealColumn get taxaDesconto =>
      _taxaDesconto ??= _constructTaxaDesconto();
  GeneratedRealColumn _constructTaxaDesconto() {
    return GeneratedRealColumn(
      'TAXA_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorJuroMeta = const VerificationMeta('valorJuro');
  GeneratedRealColumn _valorJuro;
  @override
  GeneratedRealColumn get valorJuro => _valorJuro ??= _constructValorJuro();
  GeneratedRealColumn _constructValorJuro() {
    return GeneratedRealColumn(
      'VALOR_JURO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorMultaMeta = const VerificationMeta('valorMulta');
  GeneratedRealColumn _valorMulta;
  @override
  GeneratedRealColumn get valorMulta => _valorMulta ??= _constructValorMulta();
  GeneratedRealColumn _constructValorMulta() {
    return GeneratedRealColumn(
      'VALOR_MULTA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  GeneratedRealColumn _valorDesconto;
  @override
  GeneratedRealColumn get valorDesconto =>
      _valorDesconto ??= _constructValorDesconto();
  GeneratedRealColumn _constructValorDesconto() {
    return GeneratedRealColumn(
      'VALOR_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorRecebidoMeta =
      const VerificationMeta('valorRecebido');
  GeneratedRealColumn _valorRecebido;
  @override
  GeneratedRealColumn get valorRecebido =>
      _valorRecebido ??= _constructValorRecebido();
  GeneratedRealColumn _constructValorRecebido() {
    return GeneratedRealColumn(
      'VALOR_RECEBIDO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _numeroDocumentoMeta =
      const VerificationMeta('numeroDocumento');
  GeneratedTextColumn _numeroDocumento;
  @override
  GeneratedTextColumn get numeroDocumento =>
      _numeroDocumento ??= _constructNumeroDocumento();
  GeneratedTextColumn _constructNumeroDocumento() {
    return GeneratedTextColumn('NUMERO_DOCUMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 50);
  }

  final VerificationMeta _historicoMeta = const VerificationMeta('historico');
  GeneratedTextColumn _historico;
  @override
  GeneratedTextColumn get historico => _historico ??= _constructHistorico();
  GeneratedTextColumn _constructHistorico() {
    return GeneratedTextColumn('HISTORICO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _statusRecebimentoMeta =
      const VerificationMeta('statusRecebimento');
  GeneratedTextColumn _statusRecebimento;
  @override
  GeneratedTextColumn get statusRecebimento =>
      _statusRecebimento ??= _constructStatusRecebimento();
  GeneratedTextColumn _constructStatusRecebimento() {
    return GeneratedTextColumn('STATUS_RECEBIMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idCliente,
        dataLancamento,
        dataVencimento,
        dataRecebimento,
        valorAReceber,
        taxaJuro,
        taxaMulta,
        taxaDesconto,
        valorJuro,
        valorMulta,
        valorDesconto,
        valorRecebido,
        numeroDocumento,
        historico,
        statusRecebimento
      ];
  @override
  $ContasRecebersTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'CONTAS_RECEBER';
  @override
  final String actualTableName = 'CONTAS_RECEBER';
  @override
  VerificationContext validateIntegrity(Insertable<ContasReceber> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_CLIENTE')) {
      context.handle(_idClienteMeta,
          idCliente.isAcceptableOrUnknown(data['ID_CLIENTE'], _idClienteMeta));
    }
    if (data.containsKey('DATA_LANCAMENTO')) {
      context.handle(
          _dataLancamentoMeta,
          dataLancamento.isAcceptableOrUnknown(
              data['DATA_LANCAMENTO'], _dataLancamentoMeta));
    }
    if (data.containsKey('DATA_VENCIMENTO')) {
      context.handle(
          _dataVencimentoMeta,
          dataVencimento.isAcceptableOrUnknown(
              data['DATA_VENCIMENTO'], _dataVencimentoMeta));
    }
    if (data.containsKey('DATA_RECEBIMENTO')) {
      context.handle(
          _dataRecebimentoMeta,
          dataRecebimento.isAcceptableOrUnknown(
              data['DATA_RECEBIMENTO'], _dataRecebimentoMeta));
    }
    if (data.containsKey('VALOR_A_RECEBER')) {
      context.handle(
          _valorAReceberMeta,
          valorAReceber.isAcceptableOrUnknown(
              data['VALOR_A_RECEBER'], _valorAReceberMeta));
    }
    if (data.containsKey('TAXA_JURO')) {
      context.handle(_taxaJuroMeta,
          taxaJuro.isAcceptableOrUnknown(data['TAXA_JURO'], _taxaJuroMeta));
    }
    if (data.containsKey('TAXA_MULTA')) {
      context.handle(_taxaMultaMeta,
          taxaMulta.isAcceptableOrUnknown(data['TAXA_MULTA'], _taxaMultaMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO'], _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_JURO')) {
      context.handle(_valorJuroMeta,
          valorJuro.isAcceptableOrUnknown(data['VALOR_JURO'], _valorJuroMeta));
    }
    if (data.containsKey('VALOR_MULTA')) {
      context.handle(
          _valorMultaMeta,
          valorMulta.isAcceptableOrUnknown(
              data['VALOR_MULTA'], _valorMultaMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO'], _valorDescontoMeta));
    }
    if (data.containsKey('VALOR_RECEBIDO')) {
      context.handle(
          _valorRecebidoMeta,
          valorRecebido.isAcceptableOrUnknown(
              data['VALOR_RECEBIDO'], _valorRecebidoMeta));
    }
    if (data.containsKey('NUMERO_DOCUMENTO')) {
      context.handle(
          _numeroDocumentoMeta,
          numeroDocumento.isAcceptableOrUnknown(
              data['NUMERO_DOCUMENTO'], _numeroDocumentoMeta));
    }
    if (data.containsKey('HISTORICO')) {
      context.handle(_historicoMeta,
          historico.isAcceptableOrUnknown(data['HISTORICO'], _historicoMeta));
    }
    if (data.containsKey('STATUS_RECEBIMENTO')) {
      context.handle(
          _statusRecebimentoMeta,
          statusRecebimento.isAcceptableOrUnknown(
              data['STATUS_RECEBIMENTO'], _statusRecebimentoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ContasReceber map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return ContasReceber.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $ContasRecebersTable createAlias(String alias) {
    return $ContasRecebersTable(_db, alias);
  }
}

class EcfAliquotas extends DataClass implements Insertable<EcfAliquotas> {
  final int id;
  final String totalizadorParcial;
  final String ecfIcmsSt;
  final String pafPSt;
  EcfAliquotas(
      {@required this.id,
      this.totalizadorParcial,
      this.ecfIcmsSt,
      this.pafPSt});
  factory EcfAliquotas.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return EcfAliquotas(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      totalizadorParcial: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
      ecfIcmsSt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}ECF_ICMS_ST']),
      pafPSt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}PAF_P_ST']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || totalizadorParcial != null) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial);
    }
    if (!nullToAbsent || ecfIcmsSt != null) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt);
    }
    if (!nullToAbsent || pafPSt != null) {
      map['PAF_P_ST'] = Variable<String>(pafPSt);
    }
    return map;
  }

  EcfAliquotassCompanion toCompanion(bool nullToAbsent) {
    return EcfAliquotassCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      totalizadorParcial: totalizadorParcial == null && nullToAbsent
          ? const Value.absent()
          : Value(totalizadorParcial),
      ecfIcmsSt: ecfIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(ecfIcmsSt),
      pafPSt:
          pafPSt == null && nullToAbsent ? const Value.absent() : Value(pafPSt),
    );
  }

  factory EcfAliquotas.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfAliquotas(
      id: serializer.fromJson<int>(json['id']),
      totalizadorParcial:
          serializer.fromJson<String>(json['totalizadorParcial']),
      ecfIcmsSt: serializer.fromJson<String>(json['ecfIcmsSt']),
      pafPSt: serializer.fromJson<String>(json['pafPSt']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'totalizadorParcial': serializer.toJson<String>(totalizadorParcial),
      'ecfIcmsSt': serializer.toJson<String>(ecfIcmsSt),
      'pafPSt': serializer.toJson<String>(pafPSt),
    };
  }

  EcfAliquotas copyWith(
          {int id,
          String totalizadorParcial,
          String ecfIcmsSt,
          String pafPSt}) =>
      EcfAliquotas(
        id: id ?? this.id,
        totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
        ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
        pafPSt: pafPSt ?? this.pafPSt,
      );
  @override
  String toString() {
    return (StringBuffer('EcfAliquotas(')
          ..write('id: $id, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('pafPSt: $pafPSt')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(totalizadorParcial.hashCode,
          $mrjc(ecfIcmsSt.hashCode, pafPSt.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfAliquotas &&
          other.id == this.id &&
          other.totalizadorParcial == this.totalizadorParcial &&
          other.ecfIcmsSt == this.ecfIcmsSt &&
          other.pafPSt == this.pafPSt);
}

class EcfAliquotassCompanion extends UpdateCompanion<EcfAliquotas> {
  final Value<int> id;
  final Value<String> totalizadorParcial;
  final Value<String> ecfIcmsSt;
  final Value<String> pafPSt;
  const EcfAliquotassCompanion({
    this.id = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.pafPSt = const Value.absent(),
  });
  EcfAliquotassCompanion.insert({
    this.id = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.pafPSt = const Value.absent(),
  });
  static Insertable<EcfAliquotas> custom({
    Expression<int> id,
    Expression<String> totalizadorParcial,
    Expression<String> ecfIcmsSt,
    Expression<String> pafPSt,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
      if (ecfIcmsSt != null) 'ECF_ICMS_ST': ecfIcmsSt,
      if (pafPSt != null) 'PAF_P_ST': pafPSt,
    });
  }

  EcfAliquotassCompanion copyWith(
      {Value<int> id,
      Value<String> totalizadorParcial,
      Value<String> ecfIcmsSt,
      Value<String> pafPSt}) {
    return EcfAliquotassCompanion(
      id: id ?? this.id,
      totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
      ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
      pafPSt: pafPSt ?? this.pafPSt,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (totalizadorParcial.present) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial.value);
    }
    if (ecfIcmsSt.present) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt.value);
    }
    if (pafPSt.present) {
      map['PAF_P_ST'] = Variable<String>(pafPSt.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfAliquotassCompanion(')
          ..write('id: $id, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('pafPSt: $pafPSt')
          ..write(')'))
        .toString();
  }
}

class $EcfAliquotassTable extends EcfAliquotass
    with TableInfo<$EcfAliquotassTable, EcfAliquotas> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfAliquotassTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _totalizadorParcialMeta =
      const VerificationMeta('totalizadorParcial');
  GeneratedTextColumn _totalizadorParcial;
  @override
  GeneratedTextColumn get totalizadorParcial =>
      _totalizadorParcial ??= _constructTotalizadorParcial();
  GeneratedTextColumn _constructTotalizadorParcial() {
    return GeneratedTextColumn('TOTALIZADOR_PARCIAL', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _ecfIcmsStMeta = const VerificationMeta('ecfIcmsSt');
  GeneratedTextColumn _ecfIcmsSt;
  @override
  GeneratedTextColumn get ecfIcmsSt => _ecfIcmsSt ??= _constructEcfIcmsSt();
  GeneratedTextColumn _constructEcfIcmsSt() {
    return GeneratedTextColumn('ECF_ICMS_ST', $tableName, true,
        minTextLength: 1, maxTextLength: 4);
  }

  final VerificationMeta _pafPStMeta = const VerificationMeta('pafPSt');
  GeneratedTextColumn _pafPSt;
  @override
  GeneratedTextColumn get pafPSt => _pafPSt ??= _constructPafPSt();
  GeneratedTextColumn _constructPafPSt() {
    return GeneratedTextColumn('PAF_P_ST', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, totalizadorParcial, ecfIcmsSt, pafPSt];
  @override
  $EcfAliquotassTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_ALIQUOTAS';
  @override
  final String actualTableName = 'ECF_ALIQUOTAS';
  @override
  VerificationContext validateIntegrity(Insertable<EcfAliquotas> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('TOTALIZADOR_PARCIAL')) {
      context.handle(
          _totalizadorParcialMeta,
          totalizadorParcial.isAcceptableOrUnknown(
              data['TOTALIZADOR_PARCIAL'], _totalizadorParcialMeta));
    }
    if (data.containsKey('ECF_ICMS_ST')) {
      context.handle(_ecfIcmsStMeta,
          ecfIcmsSt.isAcceptableOrUnknown(data['ECF_ICMS_ST'], _ecfIcmsStMeta));
    }
    if (data.containsKey('PAF_P_ST')) {
      context.handle(_pafPStMeta,
          pafPSt.isAcceptableOrUnknown(data['PAF_P_ST'], _pafPStMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfAliquotas map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfAliquotas.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfAliquotassTable createAlias(String alias) {
    return $EcfAliquotassTable(_db, alias);
  }
}

class EcfDocumentosEmitidos extends DataClass
    implements Insertable<EcfDocumentosEmitidos> {
  final int id;
  final int idPdvMovimento;
  final DateTime dataEmissao;
  final String horaEmissao;
  final String tipo;
  final int coo;
  EcfDocumentosEmitidos(
      {@required this.id,
      this.idPdvMovimento,
      this.dataEmissao,
      this.horaEmissao,
      this.tipo,
      this.coo});
  factory EcfDocumentosEmitidos.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final stringType = db.typeSystem.forDartType<String>();
    return EcfDocumentosEmitidos(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvMovimento: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      dataEmissao: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO']),
      horaEmissao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_EMISSAO']),
      tipo: stringType.mapFromDatabaseResponse(data['${effectivePrefix}TIPO']),
      coo: intType.mapFromDatabaseResponse(data['${effectivePrefix}COO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || dataEmissao != null) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao);
    }
    if (!nullToAbsent || horaEmissao != null) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao);
    }
    if (!nullToAbsent || tipo != null) {
      map['TIPO'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    return map;
  }

  EcfDocumentosEmitidossCompanion toCompanion(bool nullToAbsent) {
    return EcfDocumentosEmitidossCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      dataEmissao: dataEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissao),
      horaEmissao: horaEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(horaEmissao),
      tipo: tipo == null && nullToAbsent ? const Value.absent() : Value(tipo),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
    );
  }

  factory EcfDocumentosEmitidos.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfDocumentosEmitidos(
      id: serializer.fromJson<int>(json['id']),
      idPdvMovimento: serializer.fromJson<int>(json['idPdvMovimento']),
      dataEmissao: serializer.fromJson<DateTime>(json['dataEmissao']),
      horaEmissao: serializer.fromJson<String>(json['horaEmissao']),
      tipo: serializer.fromJson<String>(json['tipo']),
      coo: serializer.fromJson<int>(json['coo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvMovimento': serializer.toJson<int>(idPdvMovimento),
      'dataEmissao': serializer.toJson<DateTime>(dataEmissao),
      'horaEmissao': serializer.toJson<String>(horaEmissao),
      'tipo': serializer.toJson<String>(tipo),
      'coo': serializer.toJson<int>(coo),
    };
  }

  EcfDocumentosEmitidos copyWith(
          {int id,
          int idPdvMovimento,
          DateTime dataEmissao,
          String horaEmissao,
          String tipo,
          int coo}) =>
      EcfDocumentosEmitidos(
        id: id ?? this.id,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        dataEmissao: dataEmissao ?? this.dataEmissao,
        horaEmissao: horaEmissao ?? this.horaEmissao,
        tipo: tipo ?? this.tipo,
        coo: coo ?? this.coo,
      );
  @override
  String toString() {
    return (StringBuffer('EcfDocumentosEmitidos(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('tipo: $tipo, ')
          ..write('coo: $coo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idPdvMovimento.hashCode,
          $mrjc(
              dataEmissao.hashCode,
              $mrjc(
                  horaEmissao.hashCode, $mrjc(tipo.hashCode, coo.hashCode))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfDocumentosEmitidos &&
          other.id == this.id &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.dataEmissao == this.dataEmissao &&
          other.horaEmissao == this.horaEmissao &&
          other.tipo == this.tipo &&
          other.coo == this.coo);
}

class EcfDocumentosEmitidossCompanion
    extends UpdateCompanion<EcfDocumentosEmitidos> {
  final Value<int> id;
  final Value<int> idPdvMovimento;
  final Value<DateTime> dataEmissao;
  final Value<String> horaEmissao;
  final Value<String> tipo;
  final Value<int> coo;
  const EcfDocumentosEmitidossCompanion({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.tipo = const Value.absent(),
    this.coo = const Value.absent(),
  });
  EcfDocumentosEmitidossCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.tipo = const Value.absent(),
    this.coo = const Value.absent(),
  });
  static Insertable<EcfDocumentosEmitidos> custom({
    Expression<int> id,
    Expression<int> idPdvMovimento,
    Expression<DateTime> dataEmissao,
    Expression<String> horaEmissao,
    Expression<String> tipo,
    Expression<int> coo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
      if (horaEmissao != null) 'HORA_EMISSAO': horaEmissao,
      if (tipo != null) 'TIPO': tipo,
      if (coo != null) 'COO': coo,
    });
  }

  EcfDocumentosEmitidossCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvMovimento,
      Value<DateTime> dataEmissao,
      Value<String> horaEmissao,
      Value<String> tipo,
      Value<int> coo}) {
    return EcfDocumentosEmitidossCompanion(
      id: id ?? this.id,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      dataEmissao: dataEmissao ?? this.dataEmissao,
      horaEmissao: horaEmissao ?? this.horaEmissao,
      tipo: tipo ?? this.tipo,
      coo: coo ?? this.coo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (dataEmissao.present) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao.value);
    }
    if (horaEmissao.present) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao.value);
    }
    if (tipo.present) {
      map['TIPO'] = Variable<String>(tipo.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfDocumentosEmitidossCompanion(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('tipo: $tipo, ')
          ..write('coo: $coo')
          ..write(')'))
        .toString();
  }
}

class $EcfDocumentosEmitidossTable extends EcfDocumentosEmitidoss
    with TableInfo<$EcfDocumentosEmitidossTable, EcfDocumentosEmitidos> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfDocumentosEmitidossTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  GeneratedIntColumn _idPdvMovimento;
  @override
  GeneratedIntColumn get idPdvMovimento =>
      _idPdvMovimento ??= _constructIdPdvMovimento();
  GeneratedIntColumn _constructIdPdvMovimento() {
    return GeneratedIntColumn('ID_PDV_MOVIMENTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  }

  final VerificationMeta _dataEmissaoMeta =
      const VerificationMeta('dataEmissao');
  GeneratedDateTimeColumn _dataEmissao;
  @override
  GeneratedDateTimeColumn get dataEmissao =>
      _dataEmissao ??= _constructDataEmissao();
  GeneratedDateTimeColumn _constructDataEmissao() {
    return GeneratedDateTimeColumn(
      'DATA_EMISSAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaEmissaoMeta =
      const VerificationMeta('horaEmissao');
  GeneratedTextColumn _horaEmissao;
  @override
  GeneratedTextColumn get horaEmissao =>
      _horaEmissao ??= _constructHoraEmissao();
  GeneratedTextColumn _constructHoraEmissao() {
    return GeneratedTextColumn('HORA_EMISSAO', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  GeneratedTextColumn _tipo;
  @override
  GeneratedTextColumn get tipo => _tipo ??= _constructTipo();
  GeneratedTextColumn _constructTipo() {
    return GeneratedTextColumn('TIPO', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  GeneratedIntColumn _coo;
  @override
  GeneratedIntColumn get coo => _coo ??= _constructCoo();
  GeneratedIntColumn _constructCoo() {
    return GeneratedIntColumn(
      'COO',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, idPdvMovimento, dataEmissao, horaEmissao, tipo, coo];
  @override
  $EcfDocumentosEmitidossTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_DOCUMENTOS_EMITIDOS';
  @override
  final String actualTableName = 'ECF_DOCUMENTOS_EMITIDOS';
  @override
  VerificationContext validateIntegrity(
      Insertable<EcfDocumentosEmitidos> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO'], _idPdvMovimentoMeta));
    }
    if (data.containsKey('DATA_EMISSAO')) {
      context.handle(
          _dataEmissaoMeta,
          dataEmissao.isAcceptableOrUnknown(
              data['DATA_EMISSAO'], _dataEmissaoMeta));
    }
    if (data.containsKey('HORA_EMISSAO')) {
      context.handle(
          _horaEmissaoMeta,
          horaEmissao.isAcceptableOrUnknown(
              data['HORA_EMISSAO'], _horaEmissaoMeta));
    }
    if (data.containsKey('TIPO')) {
      context.handle(
          _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO'], _tipoMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO'], _cooMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfDocumentosEmitidos map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfDocumentosEmitidos.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfDocumentosEmitidossTable createAlias(String alias) {
    return $EcfDocumentosEmitidossTable(_db, alias);
  }
}

class EcfE3 extends DataClass implements Insertable<EcfE3> {
  final int id;
  final String serieEcf;
  final String mfAdicional;
  final String tipoEcf;
  final String marcaEcf;
  final String modeloEcf;
  final DateTime dataEstoque;
  final String horaEstoque;
  final String hashRegistro;
  EcfE3(
      {@required this.id,
      this.serieEcf,
      this.mfAdicional,
      this.tipoEcf,
      this.marcaEcf,
      this.modeloEcf,
      this.dataEstoque,
      this.horaEstoque,
      this.hashRegistro});
  factory EcfE3.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    return EcfE3(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      serieEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
      mfAdicional: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}MF_ADICIONAL']),
      tipoEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_ECF']),
      marcaEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}MARCA_ECF']),
      modeloEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}MODELO_ECF']),
      dataEstoque: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_ESTOQUE']),
      horaEstoque: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_ESTOQUE']),
      hashRegistro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || mfAdicional != null) {
      map['MF_ADICIONAL'] = Variable<String>(mfAdicional);
    }
    if (!nullToAbsent || tipoEcf != null) {
      map['TIPO_ECF'] = Variable<String>(tipoEcf);
    }
    if (!nullToAbsent || marcaEcf != null) {
      map['MARCA_ECF'] = Variable<String>(marcaEcf);
    }
    if (!nullToAbsent || modeloEcf != null) {
      map['MODELO_ECF'] = Variable<String>(modeloEcf);
    }
    if (!nullToAbsent || dataEstoque != null) {
      map['DATA_ESTOQUE'] = Variable<DateTime>(dataEstoque);
    }
    if (!nullToAbsent || horaEstoque != null) {
      map['HORA_ESTOQUE'] = Variable<String>(horaEstoque);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfE3sCompanion toCompanion(bool nullToAbsent) {
    return EcfE3sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      mfAdicional: mfAdicional == null && nullToAbsent
          ? const Value.absent()
          : Value(mfAdicional),
      tipoEcf: tipoEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoEcf),
      marcaEcf: marcaEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(marcaEcf),
      modeloEcf: modeloEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(modeloEcf),
      dataEstoque: dataEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEstoque),
      horaEstoque: horaEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(horaEstoque),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfE3.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfE3(
      id: serializer.fromJson<int>(json['id']),
      serieEcf: serializer.fromJson<String>(json['serieEcf']),
      mfAdicional: serializer.fromJson<String>(json['mfAdicional']),
      tipoEcf: serializer.fromJson<String>(json['tipoEcf']),
      marcaEcf: serializer.fromJson<String>(json['marcaEcf']),
      modeloEcf: serializer.fromJson<String>(json['modeloEcf']),
      dataEstoque: serializer.fromJson<DateTime>(json['dataEstoque']),
      horaEstoque: serializer.fromJson<String>(json['horaEstoque']),
      hashRegistro: serializer.fromJson<String>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'serieEcf': serializer.toJson<String>(serieEcf),
      'mfAdicional': serializer.toJson<String>(mfAdicional),
      'tipoEcf': serializer.toJson<String>(tipoEcf),
      'marcaEcf': serializer.toJson<String>(marcaEcf),
      'modeloEcf': serializer.toJson<String>(modeloEcf),
      'dataEstoque': serializer.toJson<DateTime>(dataEstoque),
      'horaEstoque': serializer.toJson<String>(horaEstoque),
      'hashRegistro': serializer.toJson<String>(hashRegistro),
    };
  }

  EcfE3 copyWith(
          {int id,
          String serieEcf,
          String mfAdicional,
          String tipoEcf,
          String marcaEcf,
          String modeloEcf,
          DateTime dataEstoque,
          String horaEstoque,
          String hashRegistro}) =>
      EcfE3(
        id: id ?? this.id,
        serieEcf: serieEcf ?? this.serieEcf,
        mfAdicional: mfAdicional ?? this.mfAdicional,
        tipoEcf: tipoEcf ?? this.tipoEcf,
        marcaEcf: marcaEcf ?? this.marcaEcf,
        modeloEcf: modeloEcf ?? this.modeloEcf,
        dataEstoque: dataEstoque ?? this.dataEstoque,
        horaEstoque: horaEstoque ?? this.horaEstoque,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfE3(')
          ..write('id: $id, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('mfAdicional: $mfAdicional, ')
          ..write('tipoEcf: $tipoEcf, ')
          ..write('marcaEcf: $marcaEcf, ')
          ..write('modeloEcf: $modeloEcf, ')
          ..write('dataEstoque: $dataEstoque, ')
          ..write('horaEstoque: $horaEstoque, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          serieEcf.hashCode,
          $mrjc(
              mfAdicional.hashCode,
              $mrjc(
                  tipoEcf.hashCode,
                  $mrjc(
                      marcaEcf.hashCode,
                      $mrjc(
                          modeloEcf.hashCode,
                          $mrjc(
                              dataEstoque.hashCode,
                              $mrjc(horaEstoque.hashCode,
                                  hashRegistro.hashCode)))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfE3 &&
          other.id == this.id &&
          other.serieEcf == this.serieEcf &&
          other.mfAdicional == this.mfAdicional &&
          other.tipoEcf == this.tipoEcf &&
          other.marcaEcf == this.marcaEcf &&
          other.modeloEcf == this.modeloEcf &&
          other.dataEstoque == this.dataEstoque &&
          other.horaEstoque == this.horaEstoque &&
          other.hashRegistro == this.hashRegistro);
}

class EcfE3sCompanion extends UpdateCompanion<EcfE3> {
  final Value<int> id;
  final Value<String> serieEcf;
  final Value<String> mfAdicional;
  final Value<String> tipoEcf;
  final Value<String> marcaEcf;
  final Value<String> modeloEcf;
  final Value<DateTime> dataEstoque;
  final Value<String> horaEstoque;
  final Value<String> hashRegistro;
  const EcfE3sCompanion({
    this.id = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.mfAdicional = const Value.absent(),
    this.tipoEcf = const Value.absent(),
    this.marcaEcf = const Value.absent(),
    this.modeloEcf = const Value.absent(),
    this.dataEstoque = const Value.absent(),
    this.horaEstoque = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfE3sCompanion.insert({
    this.id = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.mfAdicional = const Value.absent(),
    this.tipoEcf = const Value.absent(),
    this.marcaEcf = const Value.absent(),
    this.modeloEcf = const Value.absent(),
    this.dataEstoque = const Value.absent(),
    this.horaEstoque = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfE3> custom({
    Expression<int> id,
    Expression<String> serieEcf,
    Expression<String> mfAdicional,
    Expression<String> tipoEcf,
    Expression<String> marcaEcf,
    Expression<String> modeloEcf,
    Expression<DateTime> dataEstoque,
    Expression<String> horaEstoque,
    Expression<String> hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (mfAdicional != null) 'MF_ADICIONAL': mfAdicional,
      if (tipoEcf != null) 'TIPO_ECF': tipoEcf,
      if (marcaEcf != null) 'MARCA_ECF': marcaEcf,
      if (modeloEcf != null) 'MODELO_ECF': modeloEcf,
      if (dataEstoque != null) 'DATA_ESTOQUE': dataEstoque,
      if (horaEstoque != null) 'HORA_ESTOQUE': horaEstoque,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfE3sCompanion copyWith(
      {Value<int> id,
      Value<String> serieEcf,
      Value<String> mfAdicional,
      Value<String> tipoEcf,
      Value<String> marcaEcf,
      Value<String> modeloEcf,
      Value<DateTime> dataEstoque,
      Value<String> horaEstoque,
      Value<String> hashRegistro}) {
    return EcfE3sCompanion(
      id: id ?? this.id,
      serieEcf: serieEcf ?? this.serieEcf,
      mfAdicional: mfAdicional ?? this.mfAdicional,
      tipoEcf: tipoEcf ?? this.tipoEcf,
      marcaEcf: marcaEcf ?? this.marcaEcf,
      modeloEcf: modeloEcf ?? this.modeloEcf,
      dataEstoque: dataEstoque ?? this.dataEstoque,
      horaEstoque: horaEstoque ?? this.horaEstoque,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (mfAdicional.present) {
      map['MF_ADICIONAL'] = Variable<String>(mfAdicional.value);
    }
    if (tipoEcf.present) {
      map['TIPO_ECF'] = Variable<String>(tipoEcf.value);
    }
    if (marcaEcf.present) {
      map['MARCA_ECF'] = Variable<String>(marcaEcf.value);
    }
    if (modeloEcf.present) {
      map['MODELO_ECF'] = Variable<String>(modeloEcf.value);
    }
    if (dataEstoque.present) {
      map['DATA_ESTOQUE'] = Variable<DateTime>(dataEstoque.value);
    }
    if (horaEstoque.present) {
      map['HORA_ESTOQUE'] = Variable<String>(horaEstoque.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfE3sCompanion(')
          ..write('id: $id, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('mfAdicional: $mfAdicional, ')
          ..write('tipoEcf: $tipoEcf, ')
          ..write('marcaEcf: $marcaEcf, ')
          ..write('modeloEcf: $modeloEcf, ')
          ..write('dataEstoque: $dataEstoque, ')
          ..write('horaEstoque: $horaEstoque, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfE3sTable extends EcfE3s with TableInfo<$EcfE3sTable, EcfE3> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfE3sTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  GeneratedTextColumn _serieEcf;
  @override
  GeneratedTextColumn get serieEcf => _serieEcf ??= _constructSerieEcf();
  GeneratedTextColumn _constructSerieEcf() {
    return GeneratedTextColumn('SERIE_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _mfAdicionalMeta =
      const VerificationMeta('mfAdicional');
  GeneratedTextColumn _mfAdicional;
  @override
  GeneratedTextColumn get mfAdicional =>
      _mfAdicional ??= _constructMfAdicional();
  GeneratedTextColumn _constructMfAdicional() {
    return GeneratedTextColumn('MF_ADICIONAL', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _tipoEcfMeta = const VerificationMeta('tipoEcf');
  GeneratedTextColumn _tipoEcf;
  @override
  GeneratedTextColumn get tipoEcf => _tipoEcf ??= _constructTipoEcf();
  GeneratedTextColumn _constructTipoEcf() {
    return GeneratedTextColumn('TIPO_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 7);
  }

  final VerificationMeta _marcaEcfMeta = const VerificationMeta('marcaEcf');
  GeneratedTextColumn _marcaEcf;
  @override
  GeneratedTextColumn get marcaEcf => _marcaEcf ??= _constructMarcaEcf();
  GeneratedTextColumn _constructMarcaEcf() {
    return GeneratedTextColumn('MARCA_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _modeloEcfMeta = const VerificationMeta('modeloEcf');
  GeneratedTextColumn _modeloEcf;
  @override
  GeneratedTextColumn get modeloEcf => _modeloEcf ??= _constructModeloEcf();
  GeneratedTextColumn _constructModeloEcf() {
    return GeneratedTextColumn('MODELO_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _dataEstoqueMeta =
      const VerificationMeta('dataEstoque');
  GeneratedDateTimeColumn _dataEstoque;
  @override
  GeneratedDateTimeColumn get dataEstoque =>
      _dataEstoque ??= _constructDataEstoque();
  GeneratedDateTimeColumn _constructDataEstoque() {
    return GeneratedDateTimeColumn(
      'DATA_ESTOQUE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaEstoqueMeta =
      const VerificationMeta('horaEstoque');
  GeneratedTextColumn _horaEstoque;
  @override
  GeneratedTextColumn get horaEstoque =>
      _horaEstoque ??= _constructHoraEstoque();
  GeneratedTextColumn _constructHoraEstoque() {
    return GeneratedTextColumn('HORA_ESTOQUE', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  GeneratedTextColumn _hashRegistro;
  @override
  GeneratedTextColumn get hashRegistro =>
      _hashRegistro ??= _constructHashRegistro();
  GeneratedTextColumn _constructHashRegistro() {
    return GeneratedTextColumn('HASH_REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        serieEcf,
        mfAdicional,
        tipoEcf,
        marcaEcf,
        modeloEcf,
        dataEstoque,
        horaEstoque,
        hashRegistro
      ];
  @override
  $EcfE3sTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_E3';
  @override
  final String actualTableName = 'ECF_E3';
  @override
  VerificationContext validateIntegrity(Insertable<EcfE3> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF'], _serieEcfMeta));
    }
    if (data.containsKey('MF_ADICIONAL')) {
      context.handle(
          _mfAdicionalMeta,
          mfAdicional.isAcceptableOrUnknown(
              data['MF_ADICIONAL'], _mfAdicionalMeta));
    }
    if (data.containsKey('TIPO_ECF')) {
      context.handle(_tipoEcfMeta,
          tipoEcf.isAcceptableOrUnknown(data['TIPO_ECF'], _tipoEcfMeta));
    }
    if (data.containsKey('MARCA_ECF')) {
      context.handle(_marcaEcfMeta,
          marcaEcf.isAcceptableOrUnknown(data['MARCA_ECF'], _marcaEcfMeta));
    }
    if (data.containsKey('MODELO_ECF')) {
      context.handle(_modeloEcfMeta,
          modeloEcf.isAcceptableOrUnknown(data['MODELO_ECF'], _modeloEcfMeta));
    }
    if (data.containsKey('DATA_ESTOQUE')) {
      context.handle(
          _dataEstoqueMeta,
          dataEstoque.isAcceptableOrUnknown(
              data['DATA_ESTOQUE'], _dataEstoqueMeta));
    }
    if (data.containsKey('HORA_ESTOQUE')) {
      context.handle(
          _horaEstoqueMeta,
          horaEstoque.isAcceptableOrUnknown(
              data['HORA_ESTOQUE'], _horaEstoqueMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO'], _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfE3 map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfE3.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfE3sTable createAlias(String alias) {
    return $EcfE3sTable(_db, alias);
  }
}

class EcfImpressora extends DataClass implements Insertable<EcfImpressora> {
  final int id;
  final int numero;
  final String codigo;
  final String serie;
  final String identificacao;
  final String mc;
  final String md;
  final String vr;
  final String tipo;
  final String marca;
  final String modelo;
  final String modeloAcbr;
  final String modeloDocumentoFiscal;
  final String versao;
  final String le;
  final String lef;
  final String mfd;
  final String lacreNaMfd;
  final String docto;
  final DateTime dataInstalacaoSb;
  final String horaInstalacaoSb;
  EcfImpressora(
      {@required this.id,
      this.numero,
      this.codigo,
      this.serie,
      this.identificacao,
      this.mc,
      this.md,
      this.vr,
      this.tipo,
      this.marca,
      this.modelo,
      this.modeloAcbr,
      this.modeloDocumentoFiscal,
      this.versao,
      this.le,
      this.lef,
      this.mfd,
      this.lacreNaMfd,
      this.docto,
      this.dataInstalacaoSb,
      this.horaInstalacaoSb});
  factory EcfImpressora.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    return EcfImpressora(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      numero: intType.mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
      codigo:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CODIGO']),
      serie:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}SERIE']),
      identificacao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}IDENTIFICACAO']),
      mc: stringType.mapFromDatabaseResponse(data['${effectivePrefix}MC']),
      md: stringType.mapFromDatabaseResponse(data['${effectivePrefix}MD']),
      vr: stringType.mapFromDatabaseResponse(data['${effectivePrefix}VR']),
      tipo: stringType.mapFromDatabaseResponse(data['${effectivePrefix}TIPO']),
      marca:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}MARCA']),
      modelo:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}MODELO']),
      modeloAcbr: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}MODELO_ACBR']),
      modeloDocumentoFiscal: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}MODELO_DOCUMENTO_FISCAL']),
      versao:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}VERSAO']),
      le: stringType.mapFromDatabaseResponse(data['${effectivePrefix}LE']),
      lef: stringType.mapFromDatabaseResponse(data['${effectivePrefix}LEF']),
      mfd: stringType.mapFromDatabaseResponse(data['${effectivePrefix}MFD']),
      lacreNaMfd: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}LACRE_NA_MFD']),
      docto:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}DOCTO']),
      dataInstalacaoSb: dateTimeType.mapFromDatabaseResponse(
          data['${effectivePrefix}DATA_INSTALACAO_SB']),
      horaInstalacaoSb: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}HORA_INSTALACAO_SB']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<int>(numero);
    }
    if (!nullToAbsent || codigo != null) {
      map['CODIGO'] = Variable<String>(codigo);
    }
    if (!nullToAbsent || serie != null) {
      map['SERIE'] = Variable<String>(serie);
    }
    if (!nullToAbsent || identificacao != null) {
      map['IDENTIFICACAO'] = Variable<String>(identificacao);
    }
    if (!nullToAbsent || mc != null) {
      map['MC'] = Variable<String>(mc);
    }
    if (!nullToAbsent || md != null) {
      map['MD'] = Variable<String>(md);
    }
    if (!nullToAbsent || vr != null) {
      map['VR'] = Variable<String>(vr);
    }
    if (!nullToAbsent || tipo != null) {
      map['TIPO'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || marca != null) {
      map['MARCA'] = Variable<String>(marca);
    }
    if (!nullToAbsent || modelo != null) {
      map['MODELO'] = Variable<String>(modelo);
    }
    if (!nullToAbsent || modeloAcbr != null) {
      map['MODELO_ACBR'] = Variable<String>(modeloAcbr);
    }
    if (!nullToAbsent || modeloDocumentoFiscal != null) {
      map['MODELO_DOCUMENTO_FISCAL'] = Variable<String>(modeloDocumentoFiscal);
    }
    if (!nullToAbsent || versao != null) {
      map['VERSAO'] = Variable<String>(versao);
    }
    if (!nullToAbsent || le != null) {
      map['LE'] = Variable<String>(le);
    }
    if (!nullToAbsent || lef != null) {
      map['LEF'] = Variable<String>(lef);
    }
    if (!nullToAbsent || mfd != null) {
      map['MFD'] = Variable<String>(mfd);
    }
    if (!nullToAbsent || lacreNaMfd != null) {
      map['LACRE_NA_MFD'] = Variable<String>(lacreNaMfd);
    }
    if (!nullToAbsent || docto != null) {
      map['DOCTO'] = Variable<String>(docto);
    }
    if (!nullToAbsent || dataInstalacaoSb != null) {
      map['DATA_INSTALACAO_SB'] = Variable<DateTime>(dataInstalacaoSb);
    }
    if (!nullToAbsent || horaInstalacaoSb != null) {
      map['HORA_INSTALACAO_SB'] = Variable<String>(horaInstalacaoSb);
    }
    return map;
  }

  EcfImpressorasCompanion toCompanion(bool nullToAbsent) {
    return EcfImpressorasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      serie:
          serie == null && nullToAbsent ? const Value.absent() : Value(serie),
      identificacao: identificacao == null && nullToAbsent
          ? const Value.absent()
          : Value(identificacao),
      mc: mc == null && nullToAbsent ? const Value.absent() : Value(mc),
      md: md == null && nullToAbsent ? const Value.absent() : Value(md),
      vr: vr == null && nullToAbsent ? const Value.absent() : Value(vr),
      tipo: tipo == null && nullToAbsent ? const Value.absent() : Value(tipo),
      marca:
          marca == null && nullToAbsent ? const Value.absent() : Value(marca),
      modelo:
          modelo == null && nullToAbsent ? const Value.absent() : Value(modelo),
      modeloAcbr: modeloAcbr == null && nullToAbsent
          ? const Value.absent()
          : Value(modeloAcbr),
      modeloDocumentoFiscal: modeloDocumentoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(modeloDocumentoFiscal),
      versao:
          versao == null && nullToAbsent ? const Value.absent() : Value(versao),
      le: le == null && nullToAbsent ? const Value.absent() : Value(le),
      lef: lef == null && nullToAbsent ? const Value.absent() : Value(lef),
      mfd: mfd == null && nullToAbsent ? const Value.absent() : Value(mfd),
      lacreNaMfd: lacreNaMfd == null && nullToAbsent
          ? const Value.absent()
          : Value(lacreNaMfd),
      docto:
          docto == null && nullToAbsent ? const Value.absent() : Value(docto),
      dataInstalacaoSb: dataInstalacaoSb == null && nullToAbsent
          ? const Value.absent()
          : Value(dataInstalacaoSb),
      horaInstalacaoSb: horaInstalacaoSb == null && nullToAbsent
          ? const Value.absent()
          : Value(horaInstalacaoSb),
    );
  }

  factory EcfImpressora.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfImpressora(
      id: serializer.fromJson<int>(json['id']),
      numero: serializer.fromJson<int>(json['numero']),
      codigo: serializer.fromJson<String>(json['codigo']),
      serie: serializer.fromJson<String>(json['serie']),
      identificacao: serializer.fromJson<String>(json['identificacao']),
      mc: serializer.fromJson<String>(json['mc']),
      md: serializer.fromJson<String>(json['md']),
      vr: serializer.fromJson<String>(json['vr']),
      tipo: serializer.fromJson<String>(json['tipo']),
      marca: serializer.fromJson<String>(json['marca']),
      modelo: serializer.fromJson<String>(json['modelo']),
      modeloAcbr: serializer.fromJson<String>(json['modeloAcbr']),
      modeloDocumentoFiscal:
          serializer.fromJson<String>(json['modeloDocumentoFiscal']),
      versao: serializer.fromJson<String>(json['versao']),
      le: serializer.fromJson<String>(json['le']),
      lef: serializer.fromJson<String>(json['lef']),
      mfd: serializer.fromJson<String>(json['mfd']),
      lacreNaMfd: serializer.fromJson<String>(json['lacreNaMfd']),
      docto: serializer.fromJson<String>(json['docto']),
      dataInstalacaoSb: serializer.fromJson<DateTime>(json['dataInstalacaoSb']),
      horaInstalacaoSb: serializer.fromJson<String>(json['horaInstalacaoSb']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'numero': serializer.toJson<int>(numero),
      'codigo': serializer.toJson<String>(codigo),
      'serie': serializer.toJson<String>(serie),
      'identificacao': serializer.toJson<String>(identificacao),
      'mc': serializer.toJson<String>(mc),
      'md': serializer.toJson<String>(md),
      'vr': serializer.toJson<String>(vr),
      'tipo': serializer.toJson<String>(tipo),
      'marca': serializer.toJson<String>(marca),
      'modelo': serializer.toJson<String>(modelo),
      'modeloAcbr': serializer.toJson<String>(modeloAcbr),
      'modeloDocumentoFiscal': serializer.toJson<String>(modeloDocumentoFiscal),
      'versao': serializer.toJson<String>(versao),
      'le': serializer.toJson<String>(le),
      'lef': serializer.toJson<String>(lef),
      'mfd': serializer.toJson<String>(mfd),
      'lacreNaMfd': serializer.toJson<String>(lacreNaMfd),
      'docto': serializer.toJson<String>(docto),
      'dataInstalacaoSb': serializer.toJson<DateTime>(dataInstalacaoSb),
      'horaInstalacaoSb': serializer.toJson<String>(horaInstalacaoSb),
    };
  }

  EcfImpressora copyWith(
          {int id,
          int numero,
          String codigo,
          String serie,
          String identificacao,
          String mc,
          String md,
          String vr,
          String tipo,
          String marca,
          String modelo,
          String modeloAcbr,
          String modeloDocumentoFiscal,
          String versao,
          String le,
          String lef,
          String mfd,
          String lacreNaMfd,
          String docto,
          DateTime dataInstalacaoSb,
          String horaInstalacaoSb}) =>
      EcfImpressora(
        id: id ?? this.id,
        numero: numero ?? this.numero,
        codigo: codigo ?? this.codigo,
        serie: serie ?? this.serie,
        identificacao: identificacao ?? this.identificacao,
        mc: mc ?? this.mc,
        md: md ?? this.md,
        vr: vr ?? this.vr,
        tipo: tipo ?? this.tipo,
        marca: marca ?? this.marca,
        modelo: modelo ?? this.modelo,
        modeloAcbr: modeloAcbr ?? this.modeloAcbr,
        modeloDocumentoFiscal:
            modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
        versao: versao ?? this.versao,
        le: le ?? this.le,
        lef: lef ?? this.lef,
        mfd: mfd ?? this.mfd,
        lacreNaMfd: lacreNaMfd ?? this.lacreNaMfd,
        docto: docto ?? this.docto,
        dataInstalacaoSb: dataInstalacaoSb ?? this.dataInstalacaoSb,
        horaInstalacaoSb: horaInstalacaoSb ?? this.horaInstalacaoSb,
      );
  @override
  String toString() {
    return (StringBuffer('EcfImpressora(')
          ..write('id: $id, ')
          ..write('numero: $numero, ')
          ..write('codigo: $codigo, ')
          ..write('serie: $serie, ')
          ..write('identificacao: $identificacao, ')
          ..write('mc: $mc, ')
          ..write('md: $md, ')
          ..write('vr: $vr, ')
          ..write('tipo: $tipo, ')
          ..write('marca: $marca, ')
          ..write('modelo: $modelo, ')
          ..write('modeloAcbr: $modeloAcbr, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('versao: $versao, ')
          ..write('le: $le, ')
          ..write('lef: $lef, ')
          ..write('mfd: $mfd, ')
          ..write('lacreNaMfd: $lacreNaMfd, ')
          ..write('docto: $docto, ')
          ..write('dataInstalacaoSb: $dataInstalacaoSb, ')
          ..write('horaInstalacaoSb: $horaInstalacaoSb')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          numero.hashCode,
          $mrjc(
              codigo.hashCode,
              $mrjc(
                  serie.hashCode,
                  $mrjc(
                      identificacao.hashCode,
                      $mrjc(
                          mc.hashCode,
                          $mrjc(
                              md.hashCode,
                              $mrjc(
                                  vr.hashCode,
                                  $mrjc(
                                      tipo.hashCode,
                                      $mrjc(
                                          marca.hashCode,
                                          $mrjc(
                                              modelo.hashCode,
                                              $mrjc(
                                                  modeloAcbr.hashCode,
                                                  $mrjc(
                                                      modeloDocumentoFiscal
                                                          .hashCode,
                                                      $mrjc(
                                                          versao.hashCode,
                                                          $mrjc(
                                                              le.hashCode,
                                                              $mrjc(
                                                                  lef.hashCode,
                                                                  $mrjc(
                                                                      mfd
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          lacreNaMfd
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              docto.hashCode,
                                                                              $mrjc(dataInstalacaoSb.hashCode, horaInstalacaoSb.hashCode)))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfImpressora &&
          other.id == this.id &&
          other.numero == this.numero &&
          other.codigo == this.codigo &&
          other.serie == this.serie &&
          other.identificacao == this.identificacao &&
          other.mc == this.mc &&
          other.md == this.md &&
          other.vr == this.vr &&
          other.tipo == this.tipo &&
          other.marca == this.marca &&
          other.modelo == this.modelo &&
          other.modeloAcbr == this.modeloAcbr &&
          other.modeloDocumentoFiscal == this.modeloDocumentoFiscal &&
          other.versao == this.versao &&
          other.le == this.le &&
          other.lef == this.lef &&
          other.mfd == this.mfd &&
          other.lacreNaMfd == this.lacreNaMfd &&
          other.docto == this.docto &&
          other.dataInstalacaoSb == this.dataInstalacaoSb &&
          other.horaInstalacaoSb == this.horaInstalacaoSb);
}

class EcfImpressorasCompanion extends UpdateCompanion<EcfImpressora> {
  final Value<int> id;
  final Value<int> numero;
  final Value<String> codigo;
  final Value<String> serie;
  final Value<String> identificacao;
  final Value<String> mc;
  final Value<String> md;
  final Value<String> vr;
  final Value<String> tipo;
  final Value<String> marca;
  final Value<String> modelo;
  final Value<String> modeloAcbr;
  final Value<String> modeloDocumentoFiscal;
  final Value<String> versao;
  final Value<String> le;
  final Value<String> lef;
  final Value<String> mfd;
  final Value<String> lacreNaMfd;
  final Value<String> docto;
  final Value<DateTime> dataInstalacaoSb;
  final Value<String> horaInstalacaoSb;
  const EcfImpressorasCompanion({
    this.id = const Value.absent(),
    this.numero = const Value.absent(),
    this.codigo = const Value.absent(),
    this.serie = const Value.absent(),
    this.identificacao = const Value.absent(),
    this.mc = const Value.absent(),
    this.md = const Value.absent(),
    this.vr = const Value.absent(),
    this.tipo = const Value.absent(),
    this.marca = const Value.absent(),
    this.modelo = const Value.absent(),
    this.modeloAcbr = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.versao = const Value.absent(),
    this.le = const Value.absent(),
    this.lef = const Value.absent(),
    this.mfd = const Value.absent(),
    this.lacreNaMfd = const Value.absent(),
    this.docto = const Value.absent(),
    this.dataInstalacaoSb = const Value.absent(),
    this.horaInstalacaoSb = const Value.absent(),
  });
  EcfImpressorasCompanion.insert({
    this.id = const Value.absent(),
    this.numero = const Value.absent(),
    this.codigo = const Value.absent(),
    this.serie = const Value.absent(),
    this.identificacao = const Value.absent(),
    this.mc = const Value.absent(),
    this.md = const Value.absent(),
    this.vr = const Value.absent(),
    this.tipo = const Value.absent(),
    this.marca = const Value.absent(),
    this.modelo = const Value.absent(),
    this.modeloAcbr = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.versao = const Value.absent(),
    this.le = const Value.absent(),
    this.lef = const Value.absent(),
    this.mfd = const Value.absent(),
    this.lacreNaMfd = const Value.absent(),
    this.docto = const Value.absent(),
    this.dataInstalacaoSb = const Value.absent(),
    this.horaInstalacaoSb = const Value.absent(),
  });
  static Insertable<EcfImpressora> custom({
    Expression<int> id,
    Expression<int> numero,
    Expression<String> codigo,
    Expression<String> serie,
    Expression<String> identificacao,
    Expression<String> mc,
    Expression<String> md,
    Expression<String> vr,
    Expression<String> tipo,
    Expression<String> marca,
    Expression<String> modelo,
    Expression<String> modeloAcbr,
    Expression<String> modeloDocumentoFiscal,
    Expression<String> versao,
    Expression<String> le,
    Expression<String> lef,
    Expression<String> mfd,
    Expression<String> lacreNaMfd,
    Expression<String> docto,
    Expression<DateTime> dataInstalacaoSb,
    Expression<String> horaInstalacaoSb,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (numero != null) 'NUMERO': numero,
      if (codigo != null) 'CODIGO': codigo,
      if (serie != null) 'SERIE': serie,
      if (identificacao != null) 'IDENTIFICACAO': identificacao,
      if (mc != null) 'MC': mc,
      if (md != null) 'MD': md,
      if (vr != null) 'VR': vr,
      if (tipo != null) 'TIPO': tipo,
      if (marca != null) 'MARCA': marca,
      if (modelo != null) 'MODELO': modelo,
      if (modeloAcbr != null) 'MODELO_ACBR': modeloAcbr,
      if (modeloDocumentoFiscal != null)
        'MODELO_DOCUMENTO_FISCAL': modeloDocumentoFiscal,
      if (versao != null) 'VERSAO': versao,
      if (le != null) 'LE': le,
      if (lef != null) 'LEF': lef,
      if (mfd != null) 'MFD': mfd,
      if (lacreNaMfd != null) 'LACRE_NA_MFD': lacreNaMfd,
      if (docto != null) 'DOCTO': docto,
      if (dataInstalacaoSb != null) 'DATA_INSTALACAO_SB': dataInstalacaoSb,
      if (horaInstalacaoSb != null) 'HORA_INSTALACAO_SB': horaInstalacaoSb,
    });
  }

  EcfImpressorasCompanion copyWith(
      {Value<int> id,
      Value<int> numero,
      Value<String> codigo,
      Value<String> serie,
      Value<String> identificacao,
      Value<String> mc,
      Value<String> md,
      Value<String> vr,
      Value<String> tipo,
      Value<String> marca,
      Value<String> modelo,
      Value<String> modeloAcbr,
      Value<String> modeloDocumentoFiscal,
      Value<String> versao,
      Value<String> le,
      Value<String> lef,
      Value<String> mfd,
      Value<String> lacreNaMfd,
      Value<String> docto,
      Value<DateTime> dataInstalacaoSb,
      Value<String> horaInstalacaoSb}) {
    return EcfImpressorasCompanion(
      id: id ?? this.id,
      numero: numero ?? this.numero,
      codigo: codigo ?? this.codigo,
      serie: serie ?? this.serie,
      identificacao: identificacao ?? this.identificacao,
      mc: mc ?? this.mc,
      md: md ?? this.md,
      vr: vr ?? this.vr,
      tipo: tipo ?? this.tipo,
      marca: marca ?? this.marca,
      modelo: modelo ?? this.modelo,
      modeloAcbr: modeloAcbr ?? this.modeloAcbr,
      modeloDocumentoFiscal:
          modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
      versao: versao ?? this.versao,
      le: le ?? this.le,
      lef: lef ?? this.lef,
      mfd: mfd ?? this.mfd,
      lacreNaMfd: lacreNaMfd ?? this.lacreNaMfd,
      docto: docto ?? this.docto,
      dataInstalacaoSb: dataInstalacaoSb ?? this.dataInstalacaoSb,
      horaInstalacaoSb: horaInstalacaoSb ?? this.horaInstalacaoSb,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<int>(numero.value);
    }
    if (codigo.present) {
      map['CODIGO'] = Variable<String>(codigo.value);
    }
    if (serie.present) {
      map['SERIE'] = Variable<String>(serie.value);
    }
    if (identificacao.present) {
      map['IDENTIFICACAO'] = Variable<String>(identificacao.value);
    }
    if (mc.present) {
      map['MC'] = Variable<String>(mc.value);
    }
    if (md.present) {
      map['MD'] = Variable<String>(md.value);
    }
    if (vr.present) {
      map['VR'] = Variable<String>(vr.value);
    }
    if (tipo.present) {
      map['TIPO'] = Variable<String>(tipo.value);
    }
    if (marca.present) {
      map['MARCA'] = Variable<String>(marca.value);
    }
    if (modelo.present) {
      map['MODELO'] = Variable<String>(modelo.value);
    }
    if (modeloAcbr.present) {
      map['MODELO_ACBR'] = Variable<String>(modeloAcbr.value);
    }
    if (modeloDocumentoFiscal.present) {
      map['MODELO_DOCUMENTO_FISCAL'] =
          Variable<String>(modeloDocumentoFiscal.value);
    }
    if (versao.present) {
      map['VERSAO'] = Variable<String>(versao.value);
    }
    if (le.present) {
      map['LE'] = Variable<String>(le.value);
    }
    if (lef.present) {
      map['LEF'] = Variable<String>(lef.value);
    }
    if (mfd.present) {
      map['MFD'] = Variable<String>(mfd.value);
    }
    if (lacreNaMfd.present) {
      map['LACRE_NA_MFD'] = Variable<String>(lacreNaMfd.value);
    }
    if (docto.present) {
      map['DOCTO'] = Variable<String>(docto.value);
    }
    if (dataInstalacaoSb.present) {
      map['DATA_INSTALACAO_SB'] = Variable<DateTime>(dataInstalacaoSb.value);
    }
    if (horaInstalacaoSb.present) {
      map['HORA_INSTALACAO_SB'] = Variable<String>(horaInstalacaoSb.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfImpressorasCompanion(')
          ..write('id: $id, ')
          ..write('numero: $numero, ')
          ..write('codigo: $codigo, ')
          ..write('serie: $serie, ')
          ..write('identificacao: $identificacao, ')
          ..write('mc: $mc, ')
          ..write('md: $md, ')
          ..write('vr: $vr, ')
          ..write('tipo: $tipo, ')
          ..write('marca: $marca, ')
          ..write('modelo: $modelo, ')
          ..write('modeloAcbr: $modeloAcbr, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('versao: $versao, ')
          ..write('le: $le, ')
          ..write('lef: $lef, ')
          ..write('mfd: $mfd, ')
          ..write('lacreNaMfd: $lacreNaMfd, ')
          ..write('docto: $docto, ')
          ..write('dataInstalacaoSb: $dataInstalacaoSb, ')
          ..write('horaInstalacaoSb: $horaInstalacaoSb')
          ..write(')'))
        .toString();
  }
}

class $EcfImpressorasTable extends EcfImpressoras
    with TableInfo<$EcfImpressorasTable, EcfImpressora> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfImpressorasTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  GeneratedIntColumn _numero;
  @override
  GeneratedIntColumn get numero => _numero ??= _constructNumero();
  GeneratedIntColumn _constructNumero() {
    return GeneratedIntColumn(
      'NUMERO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  GeneratedTextColumn _codigo;
  @override
  GeneratedTextColumn get codigo => _codigo ??= _constructCodigo();
  GeneratedTextColumn _constructCodigo() {
    return GeneratedTextColumn('CODIGO', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _serieMeta = const VerificationMeta('serie');
  GeneratedTextColumn _serie;
  @override
  GeneratedTextColumn get serie => _serie ??= _constructSerie();
  GeneratedTextColumn _constructSerie() {
    return GeneratedTextColumn('SERIE', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _identificacaoMeta =
      const VerificationMeta('identificacao');
  GeneratedTextColumn _identificacao;
  @override
  GeneratedTextColumn get identificacao =>
      _identificacao ??= _constructIdentificacao();
  GeneratedTextColumn _constructIdentificacao() {
    return GeneratedTextColumn('IDENTIFICACAO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _mcMeta = const VerificationMeta('mc');
  GeneratedTextColumn _mc;
  @override
  GeneratedTextColumn get mc => _mc ??= _constructMc();
  GeneratedTextColumn _constructMc() {
    return GeneratedTextColumn('MC', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _mdMeta = const VerificationMeta('md');
  GeneratedTextColumn _md;
  @override
  GeneratedTextColumn get md => _md ??= _constructMd();
  GeneratedTextColumn _constructMd() {
    return GeneratedTextColumn('MD', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _vrMeta = const VerificationMeta('vr');
  GeneratedTextColumn _vr;
  @override
  GeneratedTextColumn get vr => _vr ??= _constructVr();
  GeneratedTextColumn _constructVr() {
    return GeneratedTextColumn('VR', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  GeneratedTextColumn _tipo;
  @override
  GeneratedTextColumn get tipo => _tipo ??= _constructTipo();
  GeneratedTextColumn _constructTipo() {
    return GeneratedTextColumn('TIPO', $tableName, true,
        minTextLength: 1, maxTextLength: 7);
  }

  final VerificationMeta _marcaMeta = const VerificationMeta('marca');
  GeneratedTextColumn _marca;
  @override
  GeneratedTextColumn get marca => _marca ??= _constructMarca();
  GeneratedTextColumn _constructMarca() {
    return GeneratedTextColumn('MARCA', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
  GeneratedTextColumn _modelo;
  @override
  GeneratedTextColumn get modelo => _modelo ??= _constructModelo();
  GeneratedTextColumn _constructModelo() {
    return GeneratedTextColumn('MODELO', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _modeloAcbrMeta = const VerificationMeta('modeloAcbr');
  GeneratedTextColumn _modeloAcbr;
  @override
  GeneratedTextColumn get modeloAcbr => _modeloAcbr ??= _constructModeloAcbr();
  GeneratedTextColumn _constructModeloAcbr() {
    return GeneratedTextColumn('MODELO_ACBR', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _modeloDocumentoFiscalMeta =
      const VerificationMeta('modeloDocumentoFiscal');
  GeneratedTextColumn _modeloDocumentoFiscal;
  @override
  GeneratedTextColumn get modeloDocumentoFiscal =>
      _modeloDocumentoFiscal ??= _constructModeloDocumentoFiscal();
  GeneratedTextColumn _constructModeloDocumentoFiscal() {
    return GeneratedTextColumn('MODELO_DOCUMENTO_FISCAL', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _versaoMeta = const VerificationMeta('versao');
  GeneratedTextColumn _versao;
  @override
  GeneratedTextColumn get versao => _versao ??= _constructVersao();
  GeneratedTextColumn _constructVersao() {
    return GeneratedTextColumn('VERSAO', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _leMeta = const VerificationMeta('le');
  GeneratedTextColumn _le;
  @override
  GeneratedTextColumn get le => _le ??= _constructLe();
  GeneratedTextColumn _constructLe() {
    return GeneratedTextColumn('LE', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _lefMeta = const VerificationMeta('lef');
  GeneratedTextColumn _lef;
  @override
  GeneratedTextColumn get lef => _lef ??= _constructLef();
  GeneratedTextColumn _constructLef() {
    return GeneratedTextColumn('LEF', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _mfdMeta = const VerificationMeta('mfd');
  GeneratedTextColumn _mfd;
  @override
  GeneratedTextColumn get mfd => _mfd ??= _constructMfd();
  GeneratedTextColumn _constructMfd() {
    return GeneratedTextColumn('MFD', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _lacreNaMfdMeta = const VerificationMeta('lacreNaMfd');
  GeneratedTextColumn _lacreNaMfd;
  @override
  GeneratedTextColumn get lacreNaMfd => _lacreNaMfd ??= _constructLacreNaMfd();
  GeneratedTextColumn _constructLacreNaMfd() {
    return GeneratedTextColumn('LACRE_NA_MFD', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _doctoMeta = const VerificationMeta('docto');
  GeneratedTextColumn _docto;
  @override
  GeneratedTextColumn get docto => _docto ??= _constructDocto();
  GeneratedTextColumn _constructDocto() {
    return GeneratedTextColumn('DOCTO', $tableName, true,
        minTextLength: 1, maxTextLength: 60);
  }

  final VerificationMeta _dataInstalacaoSbMeta =
      const VerificationMeta('dataInstalacaoSb');
  GeneratedDateTimeColumn _dataInstalacaoSb;
  @override
  GeneratedDateTimeColumn get dataInstalacaoSb =>
      _dataInstalacaoSb ??= _constructDataInstalacaoSb();
  GeneratedDateTimeColumn _constructDataInstalacaoSb() {
    return GeneratedDateTimeColumn(
      'DATA_INSTALACAO_SB',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaInstalacaoSbMeta =
      const VerificationMeta('horaInstalacaoSb');
  GeneratedTextColumn _horaInstalacaoSb;
  @override
  GeneratedTextColumn get horaInstalacaoSb =>
      _horaInstalacaoSb ??= _constructHoraInstalacaoSb();
  GeneratedTextColumn _constructHoraInstalacaoSb() {
    return GeneratedTextColumn('HORA_INSTALACAO_SB', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        numero,
        codigo,
        serie,
        identificacao,
        mc,
        md,
        vr,
        tipo,
        marca,
        modelo,
        modeloAcbr,
        modeloDocumentoFiscal,
        versao,
        le,
        lef,
        mfd,
        lacreNaMfd,
        docto,
        dataInstalacaoSb,
        horaInstalacaoSb
      ];
  @override
  $EcfImpressorasTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_IMPRESSORA';
  @override
  final String actualTableName = 'ECF_IMPRESSORA';
  @override
  VerificationContext validateIntegrity(Insertable<EcfImpressora> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO'], _numeroMeta));
    }
    if (data.containsKey('CODIGO')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['CODIGO'], _codigoMeta));
    }
    if (data.containsKey('SERIE')) {
      context.handle(
          _serieMeta, serie.isAcceptableOrUnknown(data['SERIE'], _serieMeta));
    }
    if (data.containsKey('IDENTIFICACAO')) {
      context.handle(
          _identificacaoMeta,
          identificacao.isAcceptableOrUnknown(
              data['IDENTIFICACAO'], _identificacaoMeta));
    }
    if (data.containsKey('MC')) {
      context.handle(_mcMeta, mc.isAcceptableOrUnknown(data['MC'], _mcMeta));
    }
    if (data.containsKey('MD')) {
      context.handle(_mdMeta, md.isAcceptableOrUnknown(data['MD'], _mdMeta));
    }
    if (data.containsKey('VR')) {
      context.handle(_vrMeta, vr.isAcceptableOrUnknown(data['VR'], _vrMeta));
    }
    if (data.containsKey('TIPO')) {
      context.handle(
          _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO'], _tipoMeta));
    }
    if (data.containsKey('MARCA')) {
      context.handle(
          _marcaMeta, marca.isAcceptableOrUnknown(data['MARCA'], _marcaMeta));
    }
    if (data.containsKey('MODELO')) {
      context.handle(_modeloMeta,
          modelo.isAcceptableOrUnknown(data['MODELO'], _modeloMeta));
    }
    if (data.containsKey('MODELO_ACBR')) {
      context.handle(
          _modeloAcbrMeta,
          modeloAcbr.isAcceptableOrUnknown(
              data['MODELO_ACBR'], _modeloAcbrMeta));
    }
    if (data.containsKey('MODELO_DOCUMENTO_FISCAL')) {
      context.handle(
          _modeloDocumentoFiscalMeta,
          modeloDocumentoFiscal.isAcceptableOrUnknown(
              data['MODELO_DOCUMENTO_FISCAL'], _modeloDocumentoFiscalMeta));
    }
    if (data.containsKey('VERSAO')) {
      context.handle(_versaoMeta,
          versao.isAcceptableOrUnknown(data['VERSAO'], _versaoMeta));
    }
    if (data.containsKey('LE')) {
      context.handle(_leMeta, le.isAcceptableOrUnknown(data['LE'], _leMeta));
    }
    if (data.containsKey('LEF')) {
      context.handle(
          _lefMeta, lef.isAcceptableOrUnknown(data['LEF'], _lefMeta));
    }
    if (data.containsKey('MFD')) {
      context.handle(
          _mfdMeta, mfd.isAcceptableOrUnknown(data['MFD'], _mfdMeta));
    }
    if (data.containsKey('LACRE_NA_MFD')) {
      context.handle(
          _lacreNaMfdMeta,
          lacreNaMfd.isAcceptableOrUnknown(
              data['LACRE_NA_MFD'], _lacreNaMfdMeta));
    }
    if (data.containsKey('DOCTO')) {
      context.handle(
          _doctoMeta, docto.isAcceptableOrUnknown(data['DOCTO'], _doctoMeta));
    }
    if (data.containsKey('DATA_INSTALACAO_SB')) {
      context.handle(
          _dataInstalacaoSbMeta,
          dataInstalacaoSb.isAcceptableOrUnknown(
              data['DATA_INSTALACAO_SB'], _dataInstalacaoSbMeta));
    }
    if (data.containsKey('HORA_INSTALACAO_SB')) {
      context.handle(
          _horaInstalacaoSbMeta,
          horaInstalacaoSb.isAcceptableOrUnknown(
              data['HORA_INSTALACAO_SB'], _horaInstalacaoSbMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfImpressora map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfImpressora.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfImpressorasTable createAlias(String alias) {
    return $EcfImpressorasTable(_db, alias);
  }
}

class EcfLogTotais extends DataClass implements Insertable<EcfLogTotais> {
  final int id;
  final int tipoPagamento;
  final int produto;
  final int r01;
  final int r02;
  final int r03;
  final int r04;
  final int r05;
  final int r06;
  final int r07;
  EcfLogTotais(
      {@required this.id,
      this.tipoPagamento,
      this.produto,
      this.r01,
      this.r02,
      this.r03,
      this.r04,
      this.r05,
      this.r06,
      this.r07});
  factory EcfLogTotais.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    return EcfLogTotais(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      tipoPagamento: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_PAGAMENTO']),
      produto:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}PRODUTO']),
      r01: intType.mapFromDatabaseResponse(data['${effectivePrefix}R01']),
      r02: intType.mapFromDatabaseResponse(data['${effectivePrefix}R02']),
      r03: intType.mapFromDatabaseResponse(data['${effectivePrefix}R03']),
      r04: intType.mapFromDatabaseResponse(data['${effectivePrefix}R04']),
      r05: intType.mapFromDatabaseResponse(data['${effectivePrefix}R05']),
      r06: intType.mapFromDatabaseResponse(data['${effectivePrefix}R06']),
      r07: intType.mapFromDatabaseResponse(data['${effectivePrefix}R07']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || tipoPagamento != null) {
      map['TIPO_PAGAMENTO'] = Variable<int>(tipoPagamento);
    }
    if (!nullToAbsent || produto != null) {
      map['PRODUTO'] = Variable<int>(produto);
    }
    if (!nullToAbsent || r01 != null) {
      map['R01'] = Variable<int>(r01);
    }
    if (!nullToAbsent || r02 != null) {
      map['R02'] = Variable<int>(r02);
    }
    if (!nullToAbsent || r03 != null) {
      map['R03'] = Variable<int>(r03);
    }
    if (!nullToAbsent || r04 != null) {
      map['R04'] = Variable<int>(r04);
    }
    if (!nullToAbsent || r05 != null) {
      map['R05'] = Variable<int>(r05);
    }
    if (!nullToAbsent || r06 != null) {
      map['R06'] = Variable<int>(r06);
    }
    if (!nullToAbsent || r07 != null) {
      map['R07'] = Variable<int>(r07);
    }
    return map;
  }

  EcfLogTotaissCompanion toCompanion(bool nullToAbsent) {
    return EcfLogTotaissCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      tipoPagamento: tipoPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoPagamento),
      produto: produto == null && nullToAbsent
          ? const Value.absent()
          : Value(produto),
      r01: r01 == null && nullToAbsent ? const Value.absent() : Value(r01),
      r02: r02 == null && nullToAbsent ? const Value.absent() : Value(r02),
      r03: r03 == null && nullToAbsent ? const Value.absent() : Value(r03),
      r04: r04 == null && nullToAbsent ? const Value.absent() : Value(r04),
      r05: r05 == null && nullToAbsent ? const Value.absent() : Value(r05),
      r06: r06 == null && nullToAbsent ? const Value.absent() : Value(r06),
      r07: r07 == null && nullToAbsent ? const Value.absent() : Value(r07),
    );
  }

  factory EcfLogTotais.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfLogTotais(
      id: serializer.fromJson<int>(json['id']),
      tipoPagamento: serializer.fromJson<int>(json['tipoPagamento']),
      produto: serializer.fromJson<int>(json['produto']),
      r01: serializer.fromJson<int>(json['r01']),
      r02: serializer.fromJson<int>(json['r02']),
      r03: serializer.fromJson<int>(json['r03']),
      r04: serializer.fromJson<int>(json['r04']),
      r05: serializer.fromJson<int>(json['r05']),
      r06: serializer.fromJson<int>(json['r06']),
      r07: serializer.fromJson<int>(json['r07']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'tipoPagamento': serializer.toJson<int>(tipoPagamento),
      'produto': serializer.toJson<int>(produto),
      'r01': serializer.toJson<int>(r01),
      'r02': serializer.toJson<int>(r02),
      'r03': serializer.toJson<int>(r03),
      'r04': serializer.toJson<int>(r04),
      'r05': serializer.toJson<int>(r05),
      'r06': serializer.toJson<int>(r06),
      'r07': serializer.toJson<int>(r07),
    };
  }

  EcfLogTotais copyWith(
          {int id,
          int tipoPagamento,
          int produto,
          int r01,
          int r02,
          int r03,
          int r04,
          int r05,
          int r06,
          int r07}) =>
      EcfLogTotais(
        id: id ?? this.id,
        tipoPagamento: tipoPagamento ?? this.tipoPagamento,
        produto: produto ?? this.produto,
        r01: r01 ?? this.r01,
        r02: r02 ?? this.r02,
        r03: r03 ?? this.r03,
        r04: r04 ?? this.r04,
        r05: r05 ?? this.r05,
        r06: r06 ?? this.r06,
        r07: r07 ?? this.r07,
      );
  @override
  String toString() {
    return (StringBuffer('EcfLogTotais(')
          ..write('id: $id, ')
          ..write('tipoPagamento: $tipoPagamento, ')
          ..write('produto: $produto, ')
          ..write('r01: $r01, ')
          ..write('r02: $r02, ')
          ..write('r03: $r03, ')
          ..write('r04: $r04, ')
          ..write('r05: $r05, ')
          ..write('r06: $r06, ')
          ..write('r07: $r07')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          tipoPagamento.hashCode,
          $mrjc(
              produto.hashCode,
              $mrjc(
                  r01.hashCode,
                  $mrjc(
                      r02.hashCode,
                      $mrjc(
                          r03.hashCode,
                          $mrjc(
                              r04.hashCode,
                              $mrjc(r05.hashCode,
                                  $mrjc(r06.hashCode, r07.hashCode))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfLogTotais &&
          other.id == this.id &&
          other.tipoPagamento == this.tipoPagamento &&
          other.produto == this.produto &&
          other.r01 == this.r01 &&
          other.r02 == this.r02 &&
          other.r03 == this.r03 &&
          other.r04 == this.r04 &&
          other.r05 == this.r05 &&
          other.r06 == this.r06 &&
          other.r07 == this.r07);
}

class EcfLogTotaissCompanion extends UpdateCompanion<EcfLogTotais> {
  final Value<int> id;
  final Value<int> tipoPagamento;
  final Value<int> produto;
  final Value<int> r01;
  final Value<int> r02;
  final Value<int> r03;
  final Value<int> r04;
  final Value<int> r05;
  final Value<int> r06;
  final Value<int> r07;
  const EcfLogTotaissCompanion({
    this.id = const Value.absent(),
    this.tipoPagamento = const Value.absent(),
    this.produto = const Value.absent(),
    this.r01 = const Value.absent(),
    this.r02 = const Value.absent(),
    this.r03 = const Value.absent(),
    this.r04 = const Value.absent(),
    this.r05 = const Value.absent(),
    this.r06 = const Value.absent(),
    this.r07 = const Value.absent(),
  });
  EcfLogTotaissCompanion.insert({
    this.id = const Value.absent(),
    this.tipoPagamento = const Value.absent(),
    this.produto = const Value.absent(),
    this.r01 = const Value.absent(),
    this.r02 = const Value.absent(),
    this.r03 = const Value.absent(),
    this.r04 = const Value.absent(),
    this.r05 = const Value.absent(),
    this.r06 = const Value.absent(),
    this.r07 = const Value.absent(),
  });
  static Insertable<EcfLogTotais> custom({
    Expression<int> id,
    Expression<int> tipoPagamento,
    Expression<int> produto,
    Expression<int> r01,
    Expression<int> r02,
    Expression<int> r03,
    Expression<int> r04,
    Expression<int> r05,
    Expression<int> r06,
    Expression<int> r07,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (tipoPagamento != null) 'TIPO_PAGAMENTO': tipoPagamento,
      if (produto != null) 'PRODUTO': produto,
      if (r01 != null) 'R01': r01,
      if (r02 != null) 'R02': r02,
      if (r03 != null) 'R03': r03,
      if (r04 != null) 'R04': r04,
      if (r05 != null) 'R05': r05,
      if (r06 != null) 'R06': r06,
      if (r07 != null) 'R07': r07,
    });
  }

  EcfLogTotaissCompanion copyWith(
      {Value<int> id,
      Value<int> tipoPagamento,
      Value<int> produto,
      Value<int> r01,
      Value<int> r02,
      Value<int> r03,
      Value<int> r04,
      Value<int> r05,
      Value<int> r06,
      Value<int> r07}) {
    return EcfLogTotaissCompanion(
      id: id ?? this.id,
      tipoPagamento: tipoPagamento ?? this.tipoPagamento,
      produto: produto ?? this.produto,
      r01: r01 ?? this.r01,
      r02: r02 ?? this.r02,
      r03: r03 ?? this.r03,
      r04: r04 ?? this.r04,
      r05: r05 ?? this.r05,
      r06: r06 ?? this.r06,
      r07: r07 ?? this.r07,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (tipoPagamento.present) {
      map['TIPO_PAGAMENTO'] = Variable<int>(tipoPagamento.value);
    }
    if (produto.present) {
      map['PRODUTO'] = Variable<int>(produto.value);
    }
    if (r01.present) {
      map['R01'] = Variable<int>(r01.value);
    }
    if (r02.present) {
      map['R02'] = Variable<int>(r02.value);
    }
    if (r03.present) {
      map['R03'] = Variable<int>(r03.value);
    }
    if (r04.present) {
      map['R04'] = Variable<int>(r04.value);
    }
    if (r05.present) {
      map['R05'] = Variable<int>(r05.value);
    }
    if (r06.present) {
      map['R06'] = Variable<int>(r06.value);
    }
    if (r07.present) {
      map['R07'] = Variable<int>(r07.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfLogTotaissCompanion(')
          ..write('id: $id, ')
          ..write('tipoPagamento: $tipoPagamento, ')
          ..write('produto: $produto, ')
          ..write('r01: $r01, ')
          ..write('r02: $r02, ')
          ..write('r03: $r03, ')
          ..write('r04: $r04, ')
          ..write('r05: $r05, ')
          ..write('r06: $r06, ')
          ..write('r07: $r07')
          ..write(')'))
        .toString();
  }
}

class $EcfLogTotaissTable extends EcfLogTotaiss
    with TableInfo<$EcfLogTotaissTable, EcfLogTotais> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfLogTotaissTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _tipoPagamentoMeta =
      const VerificationMeta('tipoPagamento');
  GeneratedIntColumn _tipoPagamento;
  @override
  GeneratedIntColumn get tipoPagamento =>
      _tipoPagamento ??= _constructTipoPagamento();
  GeneratedIntColumn _constructTipoPagamento() {
    return GeneratedIntColumn(
      'TIPO_PAGAMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _produtoMeta = const VerificationMeta('produto');
  GeneratedIntColumn _produto;
  @override
  GeneratedIntColumn get produto => _produto ??= _constructProduto();
  GeneratedIntColumn _constructProduto() {
    return GeneratedIntColumn(
      'PRODUTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _r01Meta = const VerificationMeta('r01');
  GeneratedIntColumn _r01;
  @override
  GeneratedIntColumn get r01 => _r01 ??= _constructR01();
  GeneratedIntColumn _constructR01() {
    return GeneratedIntColumn(
      'R01',
      $tableName,
      true,
    );
  }

  final VerificationMeta _r02Meta = const VerificationMeta('r02');
  GeneratedIntColumn _r02;
  @override
  GeneratedIntColumn get r02 => _r02 ??= _constructR02();
  GeneratedIntColumn _constructR02() {
    return GeneratedIntColumn(
      'R02',
      $tableName,
      true,
    );
  }

  final VerificationMeta _r03Meta = const VerificationMeta('r03');
  GeneratedIntColumn _r03;
  @override
  GeneratedIntColumn get r03 => _r03 ??= _constructR03();
  GeneratedIntColumn _constructR03() {
    return GeneratedIntColumn(
      'R03',
      $tableName,
      true,
    );
  }

  final VerificationMeta _r04Meta = const VerificationMeta('r04');
  GeneratedIntColumn _r04;
  @override
  GeneratedIntColumn get r04 => _r04 ??= _constructR04();
  GeneratedIntColumn _constructR04() {
    return GeneratedIntColumn(
      'R04',
      $tableName,
      true,
    );
  }

  final VerificationMeta _r05Meta = const VerificationMeta('r05');
  GeneratedIntColumn _r05;
  @override
  GeneratedIntColumn get r05 => _r05 ??= _constructR05();
  GeneratedIntColumn _constructR05() {
    return GeneratedIntColumn(
      'R05',
      $tableName,
      true,
    );
  }

  final VerificationMeta _r06Meta = const VerificationMeta('r06');
  GeneratedIntColumn _r06;
  @override
  GeneratedIntColumn get r06 => _r06 ??= _constructR06();
  GeneratedIntColumn _constructR06() {
    return GeneratedIntColumn(
      'R06',
      $tableName,
      true,
    );
  }

  final VerificationMeta _r07Meta = const VerificationMeta('r07');
  GeneratedIntColumn _r07;
  @override
  GeneratedIntColumn get r07 => _r07 ??= _constructR07();
  GeneratedIntColumn _constructR07() {
    return GeneratedIntColumn(
      'R07',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, tipoPagamento, produto, r01, r02, r03, r04, r05, r06, r07];
  @override
  $EcfLogTotaissTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_LOG_TOTAIS';
  @override
  final String actualTableName = 'ECF_LOG_TOTAIS';
  @override
  VerificationContext validateIntegrity(Insertable<EcfLogTotais> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('TIPO_PAGAMENTO')) {
      context.handle(
          _tipoPagamentoMeta,
          tipoPagamento.isAcceptableOrUnknown(
              data['TIPO_PAGAMENTO'], _tipoPagamentoMeta));
    }
    if (data.containsKey('PRODUTO')) {
      context.handle(_produtoMeta,
          produto.isAcceptableOrUnknown(data['PRODUTO'], _produtoMeta));
    }
    if (data.containsKey('R01')) {
      context.handle(
          _r01Meta, r01.isAcceptableOrUnknown(data['R01'], _r01Meta));
    }
    if (data.containsKey('R02')) {
      context.handle(
          _r02Meta, r02.isAcceptableOrUnknown(data['R02'], _r02Meta));
    }
    if (data.containsKey('R03')) {
      context.handle(
          _r03Meta, r03.isAcceptableOrUnknown(data['R03'], _r03Meta));
    }
    if (data.containsKey('R04')) {
      context.handle(
          _r04Meta, r04.isAcceptableOrUnknown(data['R04'], _r04Meta));
    }
    if (data.containsKey('R05')) {
      context.handle(
          _r05Meta, r05.isAcceptableOrUnknown(data['R05'], _r05Meta));
    }
    if (data.containsKey('R06')) {
      context.handle(
          _r06Meta, r06.isAcceptableOrUnknown(data['R06'], _r06Meta));
    }
    if (data.containsKey('R07')) {
      context.handle(
          _r07Meta, r07.isAcceptableOrUnknown(data['R07'], _r07Meta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfLogTotais map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfLogTotais.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfLogTotaissTable createAlias(String alias) {
    return $EcfLogTotaissTable(_db, alias);
  }
}

class EcfR01 extends DataClass implements Insertable<EcfR01> {
  final int id;
  final String serieEcf;
  final String cnpjEmpresa;
  final String cnpjSh;
  final String inscricaoEstadualSh;
  final String inscricaoMunicipalSh;
  final String denominacaoSh;
  final String nomePafEcf;
  final String versaoPafEcf;
  final String md5PafEcf;
  final DateTime dataInicial;
  final DateTime dataFinal;
  final String versaoEr;
  final String numeroLaudoPaf;
  final String razaoSocialSh;
  final String enderecoSh;
  final String numeroSh;
  final String complementoSh;
  final String bairroSh;
  final String cidadeSh;
  final String cepSh;
  final String ufSh;
  final String telefoneSh;
  final String contatoSh;
  final String principalExecutavel;
  final String hashRegistro;
  EcfR01(
      {@required this.id,
      this.serieEcf,
      this.cnpjEmpresa,
      this.cnpjSh,
      this.inscricaoEstadualSh,
      this.inscricaoMunicipalSh,
      this.denominacaoSh,
      this.nomePafEcf,
      this.versaoPafEcf,
      this.md5PafEcf,
      this.dataInicial,
      this.dataFinal,
      this.versaoEr,
      this.numeroLaudoPaf,
      this.razaoSocialSh,
      this.enderecoSh,
      this.numeroSh,
      this.complementoSh,
      this.bairroSh,
      this.cidadeSh,
      this.cepSh,
      this.ufSh,
      this.telefoneSh,
      this.contatoSh,
      this.principalExecutavel,
      this.hashRegistro});
  factory EcfR01.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    return EcfR01(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      serieEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
      cnpjEmpresa: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CNPJ_EMPRESA']),
      cnpjSh:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CNPJ_SH']),
      inscricaoEstadualSh: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}INSCRICAO_ESTADUAL_SH']),
      inscricaoMunicipalSh: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}INSCRICAO_MUNICIPAL_SH']),
      denominacaoSh: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DENOMINACAO_SH']),
      nomePafEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}NOME_PAF_ECF']),
      versaoPafEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}VERSAO_PAF_ECF']),
      md5PafEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}MD5_PAF_ECF']),
      dataInicial: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_INICIAL']),
      dataFinal: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_FINAL']),
      versaoEr: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}VERSAO_ER']),
      numeroLaudoPaf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_LAUDO_PAF']),
      razaoSocialSh: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}RAZAO_SOCIAL_SH']),
      enderecoSh: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}ENDERECO_SH']),
      numeroSh: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_SH']),
      complementoSh: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO_SH']),
      bairroSh: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO_SH']),
      cidadeSh: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CIDADE_SH']),
      cepSh:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CEP_SH']),
      ufSh: stringType.mapFromDatabaseResponse(data['${effectivePrefix}UF_SH']),
      telefoneSh: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE_SH']),
      contatoSh: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CONTATO_SH']),
      principalExecutavel: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}PRINCIPAL_EXECUTAVEL']),
      hashRegistro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || cnpjEmpresa != null) {
      map['CNPJ_EMPRESA'] = Variable<String>(cnpjEmpresa);
    }
    if (!nullToAbsent || cnpjSh != null) {
      map['CNPJ_SH'] = Variable<String>(cnpjSh);
    }
    if (!nullToAbsent || inscricaoEstadualSh != null) {
      map['INSCRICAO_ESTADUAL_SH'] = Variable<String>(inscricaoEstadualSh);
    }
    if (!nullToAbsent || inscricaoMunicipalSh != null) {
      map['INSCRICAO_MUNICIPAL_SH'] = Variable<String>(inscricaoMunicipalSh);
    }
    if (!nullToAbsent || denominacaoSh != null) {
      map['DENOMINACAO_SH'] = Variable<String>(denominacaoSh);
    }
    if (!nullToAbsent || nomePafEcf != null) {
      map['NOME_PAF_ECF'] = Variable<String>(nomePafEcf);
    }
    if (!nullToAbsent || versaoPafEcf != null) {
      map['VERSAO_PAF_ECF'] = Variable<String>(versaoPafEcf);
    }
    if (!nullToAbsent || md5PafEcf != null) {
      map['MD5_PAF_ECF'] = Variable<String>(md5PafEcf);
    }
    if (!nullToAbsent || dataInicial != null) {
      map['DATA_INICIAL'] = Variable<DateTime>(dataInicial);
    }
    if (!nullToAbsent || dataFinal != null) {
      map['DATA_FINAL'] = Variable<DateTime>(dataFinal);
    }
    if (!nullToAbsent || versaoEr != null) {
      map['VERSAO_ER'] = Variable<String>(versaoEr);
    }
    if (!nullToAbsent || numeroLaudoPaf != null) {
      map['NUMERO_LAUDO_PAF'] = Variable<String>(numeroLaudoPaf);
    }
    if (!nullToAbsent || razaoSocialSh != null) {
      map['RAZAO_SOCIAL_SH'] = Variable<String>(razaoSocialSh);
    }
    if (!nullToAbsent || enderecoSh != null) {
      map['ENDERECO_SH'] = Variable<String>(enderecoSh);
    }
    if (!nullToAbsent || numeroSh != null) {
      map['NUMERO_SH'] = Variable<String>(numeroSh);
    }
    if (!nullToAbsent || complementoSh != null) {
      map['COMPLEMENTO_SH'] = Variable<String>(complementoSh);
    }
    if (!nullToAbsent || bairroSh != null) {
      map['BAIRRO_SH'] = Variable<String>(bairroSh);
    }
    if (!nullToAbsent || cidadeSh != null) {
      map['CIDADE_SH'] = Variable<String>(cidadeSh);
    }
    if (!nullToAbsent || cepSh != null) {
      map['CEP_SH'] = Variable<String>(cepSh);
    }
    if (!nullToAbsent || ufSh != null) {
      map['UF_SH'] = Variable<String>(ufSh);
    }
    if (!nullToAbsent || telefoneSh != null) {
      map['TELEFONE_SH'] = Variable<String>(telefoneSh);
    }
    if (!nullToAbsent || contatoSh != null) {
      map['CONTATO_SH'] = Variable<String>(contatoSh);
    }
    if (!nullToAbsent || principalExecutavel != null) {
      map['PRINCIPAL_EXECUTAVEL'] = Variable<String>(principalExecutavel);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfR01sCompanion toCompanion(bool nullToAbsent) {
    return EcfR01sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      cnpjEmpresa: cnpjEmpresa == null && nullToAbsent
          ? const Value.absent()
          : Value(cnpjEmpresa),
      cnpjSh:
          cnpjSh == null && nullToAbsent ? const Value.absent() : Value(cnpjSh),
      inscricaoEstadualSh: inscricaoEstadualSh == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadualSh),
      inscricaoMunicipalSh: inscricaoMunicipalSh == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoMunicipalSh),
      denominacaoSh: denominacaoSh == null && nullToAbsent
          ? const Value.absent()
          : Value(denominacaoSh),
      nomePafEcf: nomePafEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(nomePafEcf),
      versaoPafEcf: versaoPafEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(versaoPafEcf),
      md5PafEcf: md5PafEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(md5PafEcf),
      dataInicial: dataInicial == null && nullToAbsent
          ? const Value.absent()
          : Value(dataInicial),
      dataFinal: dataFinal == null && nullToAbsent
          ? const Value.absent()
          : Value(dataFinal),
      versaoEr: versaoEr == null && nullToAbsent
          ? const Value.absent()
          : Value(versaoEr),
      numeroLaudoPaf: numeroLaudoPaf == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroLaudoPaf),
      razaoSocialSh: razaoSocialSh == null && nullToAbsent
          ? const Value.absent()
          : Value(razaoSocialSh),
      enderecoSh: enderecoSh == null && nullToAbsent
          ? const Value.absent()
          : Value(enderecoSh),
      numeroSh: numeroSh == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroSh),
      complementoSh: complementoSh == null && nullToAbsent
          ? const Value.absent()
          : Value(complementoSh),
      bairroSh: bairroSh == null && nullToAbsent
          ? const Value.absent()
          : Value(bairroSh),
      cidadeSh: cidadeSh == null && nullToAbsent
          ? const Value.absent()
          : Value(cidadeSh),
      cepSh:
          cepSh == null && nullToAbsent ? const Value.absent() : Value(cepSh),
      ufSh: ufSh == null && nullToAbsent ? const Value.absent() : Value(ufSh),
      telefoneSh: telefoneSh == null && nullToAbsent
          ? const Value.absent()
          : Value(telefoneSh),
      contatoSh: contatoSh == null && nullToAbsent
          ? const Value.absent()
          : Value(contatoSh),
      principalExecutavel: principalExecutavel == null && nullToAbsent
          ? const Value.absent()
          : Value(principalExecutavel),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfR01.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfR01(
      id: serializer.fromJson<int>(json['id']),
      serieEcf: serializer.fromJson<String>(json['serieEcf']),
      cnpjEmpresa: serializer.fromJson<String>(json['cnpjEmpresa']),
      cnpjSh: serializer.fromJson<String>(json['cnpjSh']),
      inscricaoEstadualSh:
          serializer.fromJson<String>(json['inscricaoEstadualSh']),
      inscricaoMunicipalSh:
          serializer.fromJson<String>(json['inscricaoMunicipalSh']),
      denominacaoSh: serializer.fromJson<String>(json['denominacaoSh']),
      nomePafEcf: serializer.fromJson<String>(json['nomePafEcf']),
      versaoPafEcf: serializer.fromJson<String>(json['versaoPafEcf']),
      md5PafEcf: serializer.fromJson<String>(json['md5PafEcf']),
      dataInicial: serializer.fromJson<DateTime>(json['dataInicial']),
      dataFinal: serializer.fromJson<DateTime>(json['dataFinal']),
      versaoEr: serializer.fromJson<String>(json['versaoEr']),
      numeroLaudoPaf: serializer.fromJson<String>(json['numeroLaudoPaf']),
      razaoSocialSh: serializer.fromJson<String>(json['razaoSocialSh']),
      enderecoSh: serializer.fromJson<String>(json['enderecoSh']),
      numeroSh: serializer.fromJson<String>(json['numeroSh']),
      complementoSh: serializer.fromJson<String>(json['complementoSh']),
      bairroSh: serializer.fromJson<String>(json['bairroSh']),
      cidadeSh: serializer.fromJson<String>(json['cidadeSh']),
      cepSh: serializer.fromJson<String>(json['cepSh']),
      ufSh: serializer.fromJson<String>(json['ufSh']),
      telefoneSh: serializer.fromJson<String>(json['telefoneSh']),
      contatoSh: serializer.fromJson<String>(json['contatoSh']),
      principalExecutavel:
          serializer.fromJson<String>(json['principalExecutavel']),
      hashRegistro: serializer.fromJson<String>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'serieEcf': serializer.toJson<String>(serieEcf),
      'cnpjEmpresa': serializer.toJson<String>(cnpjEmpresa),
      'cnpjSh': serializer.toJson<String>(cnpjSh),
      'inscricaoEstadualSh': serializer.toJson<String>(inscricaoEstadualSh),
      'inscricaoMunicipalSh': serializer.toJson<String>(inscricaoMunicipalSh),
      'denominacaoSh': serializer.toJson<String>(denominacaoSh),
      'nomePafEcf': serializer.toJson<String>(nomePafEcf),
      'versaoPafEcf': serializer.toJson<String>(versaoPafEcf),
      'md5PafEcf': serializer.toJson<String>(md5PafEcf),
      'dataInicial': serializer.toJson<DateTime>(dataInicial),
      'dataFinal': serializer.toJson<DateTime>(dataFinal),
      'versaoEr': serializer.toJson<String>(versaoEr),
      'numeroLaudoPaf': serializer.toJson<String>(numeroLaudoPaf),
      'razaoSocialSh': serializer.toJson<String>(razaoSocialSh),
      'enderecoSh': serializer.toJson<String>(enderecoSh),
      'numeroSh': serializer.toJson<String>(numeroSh),
      'complementoSh': serializer.toJson<String>(complementoSh),
      'bairroSh': serializer.toJson<String>(bairroSh),
      'cidadeSh': serializer.toJson<String>(cidadeSh),
      'cepSh': serializer.toJson<String>(cepSh),
      'ufSh': serializer.toJson<String>(ufSh),
      'telefoneSh': serializer.toJson<String>(telefoneSh),
      'contatoSh': serializer.toJson<String>(contatoSh),
      'principalExecutavel': serializer.toJson<String>(principalExecutavel),
      'hashRegistro': serializer.toJson<String>(hashRegistro),
    };
  }

  EcfR01 copyWith(
          {int id,
          String serieEcf,
          String cnpjEmpresa,
          String cnpjSh,
          String inscricaoEstadualSh,
          String inscricaoMunicipalSh,
          String denominacaoSh,
          String nomePafEcf,
          String versaoPafEcf,
          String md5PafEcf,
          DateTime dataInicial,
          DateTime dataFinal,
          String versaoEr,
          String numeroLaudoPaf,
          String razaoSocialSh,
          String enderecoSh,
          String numeroSh,
          String complementoSh,
          String bairroSh,
          String cidadeSh,
          String cepSh,
          String ufSh,
          String telefoneSh,
          String contatoSh,
          String principalExecutavel,
          String hashRegistro}) =>
      EcfR01(
        id: id ?? this.id,
        serieEcf: serieEcf ?? this.serieEcf,
        cnpjEmpresa: cnpjEmpresa ?? this.cnpjEmpresa,
        cnpjSh: cnpjSh ?? this.cnpjSh,
        inscricaoEstadualSh: inscricaoEstadualSh ?? this.inscricaoEstadualSh,
        inscricaoMunicipalSh: inscricaoMunicipalSh ?? this.inscricaoMunicipalSh,
        denominacaoSh: denominacaoSh ?? this.denominacaoSh,
        nomePafEcf: nomePafEcf ?? this.nomePafEcf,
        versaoPafEcf: versaoPafEcf ?? this.versaoPafEcf,
        md5PafEcf: md5PafEcf ?? this.md5PafEcf,
        dataInicial: dataInicial ?? this.dataInicial,
        dataFinal: dataFinal ?? this.dataFinal,
        versaoEr: versaoEr ?? this.versaoEr,
        numeroLaudoPaf: numeroLaudoPaf ?? this.numeroLaudoPaf,
        razaoSocialSh: razaoSocialSh ?? this.razaoSocialSh,
        enderecoSh: enderecoSh ?? this.enderecoSh,
        numeroSh: numeroSh ?? this.numeroSh,
        complementoSh: complementoSh ?? this.complementoSh,
        bairroSh: bairroSh ?? this.bairroSh,
        cidadeSh: cidadeSh ?? this.cidadeSh,
        cepSh: cepSh ?? this.cepSh,
        ufSh: ufSh ?? this.ufSh,
        telefoneSh: telefoneSh ?? this.telefoneSh,
        contatoSh: contatoSh ?? this.contatoSh,
        principalExecutavel: principalExecutavel ?? this.principalExecutavel,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfR01(')
          ..write('id: $id, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('cnpjEmpresa: $cnpjEmpresa, ')
          ..write('cnpjSh: $cnpjSh, ')
          ..write('inscricaoEstadualSh: $inscricaoEstadualSh, ')
          ..write('inscricaoMunicipalSh: $inscricaoMunicipalSh, ')
          ..write('denominacaoSh: $denominacaoSh, ')
          ..write('nomePafEcf: $nomePafEcf, ')
          ..write('versaoPafEcf: $versaoPafEcf, ')
          ..write('md5PafEcf: $md5PafEcf, ')
          ..write('dataInicial: $dataInicial, ')
          ..write('dataFinal: $dataFinal, ')
          ..write('versaoEr: $versaoEr, ')
          ..write('numeroLaudoPaf: $numeroLaudoPaf, ')
          ..write('razaoSocialSh: $razaoSocialSh, ')
          ..write('enderecoSh: $enderecoSh, ')
          ..write('numeroSh: $numeroSh, ')
          ..write('complementoSh: $complementoSh, ')
          ..write('bairroSh: $bairroSh, ')
          ..write('cidadeSh: $cidadeSh, ')
          ..write('cepSh: $cepSh, ')
          ..write('ufSh: $ufSh, ')
          ..write('telefoneSh: $telefoneSh, ')
          ..write('contatoSh: $contatoSh, ')
          ..write('principalExecutavel: $principalExecutavel, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          serieEcf.hashCode,
          $mrjc(
              cnpjEmpresa.hashCode,
              $mrjc(
                  cnpjSh.hashCode,
                  $mrjc(
                      inscricaoEstadualSh.hashCode,
                      $mrjc(
                          inscricaoMunicipalSh.hashCode,
                          $mrjc(
                              denominacaoSh.hashCode,
                              $mrjc(
                                  nomePafEcf.hashCode,
                                  $mrjc(
                                      versaoPafEcf.hashCode,
                                      $mrjc(
                                          md5PafEcf.hashCode,
                                          $mrjc(
                                              dataInicial.hashCode,
                                              $mrjc(
                                                  dataFinal.hashCode,
                                                  $mrjc(
                                                      versaoEr.hashCode,
                                                      $mrjc(
                                                          numeroLaudoPaf
                                                              .hashCode,
                                                          $mrjc(
                                                              razaoSocialSh
                                                                  .hashCode,
                                                              $mrjc(
                                                                  enderecoSh
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      numeroSh
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          complementoSh
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              bairroSh.hashCode,
                                                                              $mrjc(cidadeSh.hashCode, $mrjc(cepSh.hashCode, $mrjc(ufSh.hashCode, $mrjc(telefoneSh.hashCode, $mrjc(contatoSh.hashCode, $mrjc(principalExecutavel.hashCode, hashRegistro.hashCode))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfR01 &&
          other.id == this.id &&
          other.serieEcf == this.serieEcf &&
          other.cnpjEmpresa == this.cnpjEmpresa &&
          other.cnpjSh == this.cnpjSh &&
          other.inscricaoEstadualSh == this.inscricaoEstadualSh &&
          other.inscricaoMunicipalSh == this.inscricaoMunicipalSh &&
          other.denominacaoSh == this.denominacaoSh &&
          other.nomePafEcf == this.nomePafEcf &&
          other.versaoPafEcf == this.versaoPafEcf &&
          other.md5PafEcf == this.md5PafEcf &&
          other.dataInicial == this.dataInicial &&
          other.dataFinal == this.dataFinal &&
          other.versaoEr == this.versaoEr &&
          other.numeroLaudoPaf == this.numeroLaudoPaf &&
          other.razaoSocialSh == this.razaoSocialSh &&
          other.enderecoSh == this.enderecoSh &&
          other.numeroSh == this.numeroSh &&
          other.complementoSh == this.complementoSh &&
          other.bairroSh == this.bairroSh &&
          other.cidadeSh == this.cidadeSh &&
          other.cepSh == this.cepSh &&
          other.ufSh == this.ufSh &&
          other.telefoneSh == this.telefoneSh &&
          other.contatoSh == this.contatoSh &&
          other.principalExecutavel == this.principalExecutavel &&
          other.hashRegistro == this.hashRegistro);
}

class EcfR01sCompanion extends UpdateCompanion<EcfR01> {
  final Value<int> id;
  final Value<String> serieEcf;
  final Value<String> cnpjEmpresa;
  final Value<String> cnpjSh;
  final Value<String> inscricaoEstadualSh;
  final Value<String> inscricaoMunicipalSh;
  final Value<String> denominacaoSh;
  final Value<String> nomePafEcf;
  final Value<String> versaoPafEcf;
  final Value<String> md5PafEcf;
  final Value<DateTime> dataInicial;
  final Value<DateTime> dataFinal;
  final Value<String> versaoEr;
  final Value<String> numeroLaudoPaf;
  final Value<String> razaoSocialSh;
  final Value<String> enderecoSh;
  final Value<String> numeroSh;
  final Value<String> complementoSh;
  final Value<String> bairroSh;
  final Value<String> cidadeSh;
  final Value<String> cepSh;
  final Value<String> ufSh;
  final Value<String> telefoneSh;
  final Value<String> contatoSh;
  final Value<String> principalExecutavel;
  final Value<String> hashRegistro;
  const EcfR01sCompanion({
    this.id = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.cnpjEmpresa = const Value.absent(),
    this.cnpjSh = const Value.absent(),
    this.inscricaoEstadualSh = const Value.absent(),
    this.inscricaoMunicipalSh = const Value.absent(),
    this.denominacaoSh = const Value.absent(),
    this.nomePafEcf = const Value.absent(),
    this.versaoPafEcf = const Value.absent(),
    this.md5PafEcf = const Value.absent(),
    this.dataInicial = const Value.absent(),
    this.dataFinal = const Value.absent(),
    this.versaoEr = const Value.absent(),
    this.numeroLaudoPaf = const Value.absent(),
    this.razaoSocialSh = const Value.absent(),
    this.enderecoSh = const Value.absent(),
    this.numeroSh = const Value.absent(),
    this.complementoSh = const Value.absent(),
    this.bairroSh = const Value.absent(),
    this.cidadeSh = const Value.absent(),
    this.cepSh = const Value.absent(),
    this.ufSh = const Value.absent(),
    this.telefoneSh = const Value.absent(),
    this.contatoSh = const Value.absent(),
    this.principalExecutavel = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfR01sCompanion.insert({
    this.id = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.cnpjEmpresa = const Value.absent(),
    this.cnpjSh = const Value.absent(),
    this.inscricaoEstadualSh = const Value.absent(),
    this.inscricaoMunicipalSh = const Value.absent(),
    this.denominacaoSh = const Value.absent(),
    this.nomePafEcf = const Value.absent(),
    this.versaoPafEcf = const Value.absent(),
    this.md5PafEcf = const Value.absent(),
    this.dataInicial = const Value.absent(),
    this.dataFinal = const Value.absent(),
    this.versaoEr = const Value.absent(),
    this.numeroLaudoPaf = const Value.absent(),
    this.razaoSocialSh = const Value.absent(),
    this.enderecoSh = const Value.absent(),
    this.numeroSh = const Value.absent(),
    this.complementoSh = const Value.absent(),
    this.bairroSh = const Value.absent(),
    this.cidadeSh = const Value.absent(),
    this.cepSh = const Value.absent(),
    this.ufSh = const Value.absent(),
    this.telefoneSh = const Value.absent(),
    this.contatoSh = const Value.absent(),
    this.principalExecutavel = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfR01> custom({
    Expression<int> id,
    Expression<String> serieEcf,
    Expression<String> cnpjEmpresa,
    Expression<String> cnpjSh,
    Expression<String> inscricaoEstadualSh,
    Expression<String> inscricaoMunicipalSh,
    Expression<String> denominacaoSh,
    Expression<String> nomePafEcf,
    Expression<String> versaoPafEcf,
    Expression<String> md5PafEcf,
    Expression<DateTime> dataInicial,
    Expression<DateTime> dataFinal,
    Expression<String> versaoEr,
    Expression<String> numeroLaudoPaf,
    Expression<String> razaoSocialSh,
    Expression<String> enderecoSh,
    Expression<String> numeroSh,
    Expression<String> complementoSh,
    Expression<String> bairroSh,
    Expression<String> cidadeSh,
    Expression<String> cepSh,
    Expression<String> ufSh,
    Expression<String> telefoneSh,
    Expression<String> contatoSh,
    Expression<String> principalExecutavel,
    Expression<String> hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (cnpjEmpresa != null) 'CNPJ_EMPRESA': cnpjEmpresa,
      if (cnpjSh != null) 'CNPJ_SH': cnpjSh,
      if (inscricaoEstadualSh != null)
        'INSCRICAO_ESTADUAL_SH': inscricaoEstadualSh,
      if (inscricaoMunicipalSh != null)
        'INSCRICAO_MUNICIPAL_SH': inscricaoMunicipalSh,
      if (denominacaoSh != null) 'DENOMINACAO_SH': denominacaoSh,
      if (nomePafEcf != null) 'NOME_PAF_ECF': nomePafEcf,
      if (versaoPafEcf != null) 'VERSAO_PAF_ECF': versaoPafEcf,
      if (md5PafEcf != null) 'MD5_PAF_ECF': md5PafEcf,
      if (dataInicial != null) 'DATA_INICIAL': dataInicial,
      if (dataFinal != null) 'DATA_FINAL': dataFinal,
      if (versaoEr != null) 'VERSAO_ER': versaoEr,
      if (numeroLaudoPaf != null) 'NUMERO_LAUDO_PAF': numeroLaudoPaf,
      if (razaoSocialSh != null) 'RAZAO_SOCIAL_SH': razaoSocialSh,
      if (enderecoSh != null) 'ENDERECO_SH': enderecoSh,
      if (numeroSh != null) 'NUMERO_SH': numeroSh,
      if (complementoSh != null) 'COMPLEMENTO_SH': complementoSh,
      if (bairroSh != null) 'BAIRRO_SH': bairroSh,
      if (cidadeSh != null) 'CIDADE_SH': cidadeSh,
      if (cepSh != null) 'CEP_SH': cepSh,
      if (ufSh != null) 'UF_SH': ufSh,
      if (telefoneSh != null) 'TELEFONE_SH': telefoneSh,
      if (contatoSh != null) 'CONTATO_SH': contatoSh,
      if (principalExecutavel != null)
        'PRINCIPAL_EXECUTAVEL': principalExecutavel,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfR01sCompanion copyWith(
      {Value<int> id,
      Value<String> serieEcf,
      Value<String> cnpjEmpresa,
      Value<String> cnpjSh,
      Value<String> inscricaoEstadualSh,
      Value<String> inscricaoMunicipalSh,
      Value<String> denominacaoSh,
      Value<String> nomePafEcf,
      Value<String> versaoPafEcf,
      Value<String> md5PafEcf,
      Value<DateTime> dataInicial,
      Value<DateTime> dataFinal,
      Value<String> versaoEr,
      Value<String> numeroLaudoPaf,
      Value<String> razaoSocialSh,
      Value<String> enderecoSh,
      Value<String> numeroSh,
      Value<String> complementoSh,
      Value<String> bairroSh,
      Value<String> cidadeSh,
      Value<String> cepSh,
      Value<String> ufSh,
      Value<String> telefoneSh,
      Value<String> contatoSh,
      Value<String> principalExecutavel,
      Value<String> hashRegistro}) {
    return EcfR01sCompanion(
      id: id ?? this.id,
      serieEcf: serieEcf ?? this.serieEcf,
      cnpjEmpresa: cnpjEmpresa ?? this.cnpjEmpresa,
      cnpjSh: cnpjSh ?? this.cnpjSh,
      inscricaoEstadualSh: inscricaoEstadualSh ?? this.inscricaoEstadualSh,
      inscricaoMunicipalSh: inscricaoMunicipalSh ?? this.inscricaoMunicipalSh,
      denominacaoSh: denominacaoSh ?? this.denominacaoSh,
      nomePafEcf: nomePafEcf ?? this.nomePafEcf,
      versaoPafEcf: versaoPafEcf ?? this.versaoPafEcf,
      md5PafEcf: md5PafEcf ?? this.md5PafEcf,
      dataInicial: dataInicial ?? this.dataInicial,
      dataFinal: dataFinal ?? this.dataFinal,
      versaoEr: versaoEr ?? this.versaoEr,
      numeroLaudoPaf: numeroLaudoPaf ?? this.numeroLaudoPaf,
      razaoSocialSh: razaoSocialSh ?? this.razaoSocialSh,
      enderecoSh: enderecoSh ?? this.enderecoSh,
      numeroSh: numeroSh ?? this.numeroSh,
      complementoSh: complementoSh ?? this.complementoSh,
      bairroSh: bairroSh ?? this.bairroSh,
      cidadeSh: cidadeSh ?? this.cidadeSh,
      cepSh: cepSh ?? this.cepSh,
      ufSh: ufSh ?? this.ufSh,
      telefoneSh: telefoneSh ?? this.telefoneSh,
      contatoSh: contatoSh ?? this.contatoSh,
      principalExecutavel: principalExecutavel ?? this.principalExecutavel,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (cnpjEmpresa.present) {
      map['CNPJ_EMPRESA'] = Variable<String>(cnpjEmpresa.value);
    }
    if (cnpjSh.present) {
      map['CNPJ_SH'] = Variable<String>(cnpjSh.value);
    }
    if (inscricaoEstadualSh.present) {
      map['INSCRICAO_ESTADUAL_SH'] =
          Variable<String>(inscricaoEstadualSh.value);
    }
    if (inscricaoMunicipalSh.present) {
      map['INSCRICAO_MUNICIPAL_SH'] =
          Variable<String>(inscricaoMunicipalSh.value);
    }
    if (denominacaoSh.present) {
      map['DENOMINACAO_SH'] = Variable<String>(denominacaoSh.value);
    }
    if (nomePafEcf.present) {
      map['NOME_PAF_ECF'] = Variable<String>(nomePafEcf.value);
    }
    if (versaoPafEcf.present) {
      map['VERSAO_PAF_ECF'] = Variable<String>(versaoPafEcf.value);
    }
    if (md5PafEcf.present) {
      map['MD5_PAF_ECF'] = Variable<String>(md5PafEcf.value);
    }
    if (dataInicial.present) {
      map['DATA_INICIAL'] = Variable<DateTime>(dataInicial.value);
    }
    if (dataFinal.present) {
      map['DATA_FINAL'] = Variable<DateTime>(dataFinal.value);
    }
    if (versaoEr.present) {
      map['VERSAO_ER'] = Variable<String>(versaoEr.value);
    }
    if (numeroLaudoPaf.present) {
      map['NUMERO_LAUDO_PAF'] = Variable<String>(numeroLaudoPaf.value);
    }
    if (razaoSocialSh.present) {
      map['RAZAO_SOCIAL_SH'] = Variable<String>(razaoSocialSh.value);
    }
    if (enderecoSh.present) {
      map['ENDERECO_SH'] = Variable<String>(enderecoSh.value);
    }
    if (numeroSh.present) {
      map['NUMERO_SH'] = Variable<String>(numeroSh.value);
    }
    if (complementoSh.present) {
      map['COMPLEMENTO_SH'] = Variable<String>(complementoSh.value);
    }
    if (bairroSh.present) {
      map['BAIRRO_SH'] = Variable<String>(bairroSh.value);
    }
    if (cidadeSh.present) {
      map['CIDADE_SH'] = Variable<String>(cidadeSh.value);
    }
    if (cepSh.present) {
      map['CEP_SH'] = Variable<String>(cepSh.value);
    }
    if (ufSh.present) {
      map['UF_SH'] = Variable<String>(ufSh.value);
    }
    if (telefoneSh.present) {
      map['TELEFONE_SH'] = Variable<String>(telefoneSh.value);
    }
    if (contatoSh.present) {
      map['CONTATO_SH'] = Variable<String>(contatoSh.value);
    }
    if (principalExecutavel.present) {
      map['PRINCIPAL_EXECUTAVEL'] = Variable<String>(principalExecutavel.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfR01sCompanion(')
          ..write('id: $id, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('cnpjEmpresa: $cnpjEmpresa, ')
          ..write('cnpjSh: $cnpjSh, ')
          ..write('inscricaoEstadualSh: $inscricaoEstadualSh, ')
          ..write('inscricaoMunicipalSh: $inscricaoMunicipalSh, ')
          ..write('denominacaoSh: $denominacaoSh, ')
          ..write('nomePafEcf: $nomePafEcf, ')
          ..write('versaoPafEcf: $versaoPafEcf, ')
          ..write('md5PafEcf: $md5PafEcf, ')
          ..write('dataInicial: $dataInicial, ')
          ..write('dataFinal: $dataFinal, ')
          ..write('versaoEr: $versaoEr, ')
          ..write('numeroLaudoPaf: $numeroLaudoPaf, ')
          ..write('razaoSocialSh: $razaoSocialSh, ')
          ..write('enderecoSh: $enderecoSh, ')
          ..write('numeroSh: $numeroSh, ')
          ..write('complementoSh: $complementoSh, ')
          ..write('bairroSh: $bairroSh, ')
          ..write('cidadeSh: $cidadeSh, ')
          ..write('cepSh: $cepSh, ')
          ..write('ufSh: $ufSh, ')
          ..write('telefoneSh: $telefoneSh, ')
          ..write('contatoSh: $contatoSh, ')
          ..write('principalExecutavel: $principalExecutavel, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfR01sTable extends EcfR01s with TableInfo<$EcfR01sTable, EcfR01> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfR01sTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  GeneratedTextColumn _serieEcf;
  @override
  GeneratedTextColumn get serieEcf => _serieEcf ??= _constructSerieEcf();
  GeneratedTextColumn _constructSerieEcf() {
    return GeneratedTextColumn('SERIE_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _cnpjEmpresaMeta =
      const VerificationMeta('cnpjEmpresa');
  GeneratedTextColumn _cnpjEmpresa;
  @override
  GeneratedTextColumn get cnpjEmpresa =>
      _cnpjEmpresa ??= _constructCnpjEmpresa();
  GeneratedTextColumn _constructCnpjEmpresa() {
    return GeneratedTextColumn('CNPJ_EMPRESA', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _cnpjShMeta = const VerificationMeta('cnpjSh');
  GeneratedTextColumn _cnpjSh;
  @override
  GeneratedTextColumn get cnpjSh => _cnpjSh ??= _constructCnpjSh();
  GeneratedTextColumn _constructCnpjSh() {
    return GeneratedTextColumn('CNPJ_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _inscricaoEstadualShMeta =
      const VerificationMeta('inscricaoEstadualSh');
  GeneratedTextColumn _inscricaoEstadualSh;
  @override
  GeneratedTextColumn get inscricaoEstadualSh =>
      _inscricaoEstadualSh ??= _constructInscricaoEstadualSh();
  GeneratedTextColumn _constructInscricaoEstadualSh() {
    return GeneratedTextColumn('INSCRICAO_ESTADUAL_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _inscricaoMunicipalShMeta =
      const VerificationMeta('inscricaoMunicipalSh');
  GeneratedTextColumn _inscricaoMunicipalSh;
  @override
  GeneratedTextColumn get inscricaoMunicipalSh =>
      _inscricaoMunicipalSh ??= _constructInscricaoMunicipalSh();
  GeneratedTextColumn _constructInscricaoMunicipalSh() {
    return GeneratedTextColumn('INSCRICAO_MUNICIPAL_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _denominacaoShMeta =
      const VerificationMeta('denominacaoSh');
  GeneratedTextColumn _denominacaoSh;
  @override
  GeneratedTextColumn get denominacaoSh =>
      _denominacaoSh ??= _constructDenominacaoSh();
  GeneratedTextColumn _constructDenominacaoSh() {
    return GeneratedTextColumn('DENOMINACAO_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 40);
  }

  final VerificationMeta _nomePafEcfMeta = const VerificationMeta('nomePafEcf');
  GeneratedTextColumn _nomePafEcf;
  @override
  GeneratedTextColumn get nomePafEcf => _nomePafEcf ??= _constructNomePafEcf();
  GeneratedTextColumn _constructNomePafEcf() {
    return GeneratedTextColumn('NOME_PAF_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 40);
  }

  final VerificationMeta _versaoPafEcfMeta =
      const VerificationMeta('versaoPafEcf');
  GeneratedTextColumn _versaoPafEcf;
  @override
  GeneratedTextColumn get versaoPafEcf =>
      _versaoPafEcf ??= _constructVersaoPafEcf();
  GeneratedTextColumn _constructVersaoPafEcf() {
    return GeneratedTextColumn('VERSAO_PAF_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _md5PafEcfMeta = const VerificationMeta('md5PafEcf');
  GeneratedTextColumn _md5PafEcf;
  @override
  GeneratedTextColumn get md5PafEcf => _md5PafEcf ??= _constructMd5PafEcf();
  GeneratedTextColumn _constructMd5PafEcf() {
    return GeneratedTextColumn('MD5_PAF_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  final VerificationMeta _dataInicialMeta =
      const VerificationMeta('dataInicial');
  GeneratedDateTimeColumn _dataInicial;
  @override
  GeneratedDateTimeColumn get dataInicial =>
      _dataInicial ??= _constructDataInicial();
  GeneratedDateTimeColumn _constructDataInicial() {
    return GeneratedDateTimeColumn(
      'DATA_INICIAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataFinalMeta = const VerificationMeta('dataFinal');
  GeneratedDateTimeColumn _dataFinal;
  @override
  GeneratedDateTimeColumn get dataFinal => _dataFinal ??= _constructDataFinal();
  GeneratedDateTimeColumn _constructDataFinal() {
    return GeneratedDateTimeColumn(
      'DATA_FINAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _versaoErMeta = const VerificationMeta('versaoEr');
  GeneratedTextColumn _versaoEr;
  @override
  GeneratedTextColumn get versaoEr => _versaoEr ??= _constructVersaoEr();
  GeneratedTextColumn _constructVersaoEr() {
    return GeneratedTextColumn('VERSAO_ER', $tableName, true,
        minTextLength: 1, maxTextLength: 4);
  }

  final VerificationMeta _numeroLaudoPafMeta =
      const VerificationMeta('numeroLaudoPaf');
  GeneratedTextColumn _numeroLaudoPaf;
  @override
  GeneratedTextColumn get numeroLaudoPaf =>
      _numeroLaudoPaf ??= _constructNumeroLaudoPaf();
  GeneratedTextColumn _constructNumeroLaudoPaf() {
    return GeneratedTextColumn('NUMERO_LAUDO_PAF', $tableName, true,
        minTextLength: 1, maxTextLength: 40);
  }

  final VerificationMeta _razaoSocialShMeta =
      const VerificationMeta('razaoSocialSh');
  GeneratedTextColumn _razaoSocialSh;
  @override
  GeneratedTextColumn get razaoSocialSh =>
      _razaoSocialSh ??= _constructRazaoSocialSh();
  GeneratedTextColumn _constructRazaoSocialSh() {
    return GeneratedTextColumn('RAZAO_SOCIAL_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 40);
  }

  final VerificationMeta _enderecoShMeta = const VerificationMeta('enderecoSh');
  GeneratedTextColumn _enderecoSh;
  @override
  GeneratedTextColumn get enderecoSh => _enderecoSh ??= _constructEnderecoSh();
  GeneratedTextColumn _constructEnderecoSh() {
    return GeneratedTextColumn('ENDERECO_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 40);
  }

  final VerificationMeta _numeroShMeta = const VerificationMeta('numeroSh');
  GeneratedTextColumn _numeroSh;
  @override
  GeneratedTextColumn get numeroSh => _numeroSh ??= _constructNumeroSh();
  GeneratedTextColumn _constructNumeroSh() {
    return GeneratedTextColumn('NUMERO_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _complementoShMeta =
      const VerificationMeta('complementoSh');
  GeneratedTextColumn _complementoSh;
  @override
  GeneratedTextColumn get complementoSh =>
      _complementoSh ??= _constructComplementoSh();
  GeneratedTextColumn _constructComplementoSh() {
    return GeneratedTextColumn('COMPLEMENTO_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 40);
  }

  final VerificationMeta _bairroShMeta = const VerificationMeta('bairroSh');
  GeneratedTextColumn _bairroSh;
  @override
  GeneratedTextColumn get bairroSh => _bairroSh ??= _constructBairroSh();
  GeneratedTextColumn _constructBairroSh() {
    return GeneratedTextColumn('BAIRRO_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 40);
  }

  final VerificationMeta _cidadeShMeta = const VerificationMeta('cidadeSh');
  GeneratedTextColumn _cidadeSh;
  @override
  GeneratedTextColumn get cidadeSh => _cidadeSh ??= _constructCidadeSh();
  GeneratedTextColumn _constructCidadeSh() {
    return GeneratedTextColumn('CIDADE_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 40);
  }

  final VerificationMeta _cepShMeta = const VerificationMeta('cepSh');
  GeneratedTextColumn _cepSh;
  @override
  GeneratedTextColumn get cepSh => _cepSh ??= _constructCepSh();
  GeneratedTextColumn _constructCepSh() {
    return GeneratedTextColumn('CEP_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _ufShMeta = const VerificationMeta('ufSh');
  GeneratedTextColumn _ufSh;
  @override
  GeneratedTextColumn get ufSh => _ufSh ??= _constructUfSh();
  GeneratedTextColumn _constructUfSh() {
    return GeneratedTextColumn('UF_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _telefoneShMeta = const VerificationMeta('telefoneSh');
  GeneratedTextColumn _telefoneSh;
  @override
  GeneratedTextColumn get telefoneSh => _telefoneSh ??= _constructTelefoneSh();
  GeneratedTextColumn _constructTelefoneSh() {
    return GeneratedTextColumn('TELEFONE_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _contatoShMeta = const VerificationMeta('contatoSh');
  GeneratedTextColumn _contatoSh;
  @override
  GeneratedTextColumn get contatoSh => _contatoSh ??= _constructContatoSh();
  GeneratedTextColumn _constructContatoSh() {
    return GeneratedTextColumn('CONTATO_SH', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _principalExecutavelMeta =
      const VerificationMeta('principalExecutavel');
  GeneratedTextColumn _principalExecutavel;
  @override
  GeneratedTextColumn get principalExecutavel =>
      _principalExecutavel ??= _constructPrincipalExecutavel();
  GeneratedTextColumn _constructPrincipalExecutavel() {
    return GeneratedTextColumn('PRINCIPAL_EXECUTAVEL', $tableName, true,
        minTextLength: 1, maxTextLength: 40);
  }

  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  GeneratedTextColumn _hashRegistro;
  @override
  GeneratedTextColumn get hashRegistro =>
      _hashRegistro ??= _constructHashRegistro();
  GeneratedTextColumn _constructHashRegistro() {
    return GeneratedTextColumn('HASH_REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        serieEcf,
        cnpjEmpresa,
        cnpjSh,
        inscricaoEstadualSh,
        inscricaoMunicipalSh,
        denominacaoSh,
        nomePafEcf,
        versaoPafEcf,
        md5PafEcf,
        dataInicial,
        dataFinal,
        versaoEr,
        numeroLaudoPaf,
        razaoSocialSh,
        enderecoSh,
        numeroSh,
        complementoSh,
        bairroSh,
        cidadeSh,
        cepSh,
        ufSh,
        telefoneSh,
        contatoSh,
        principalExecutavel,
        hashRegistro
      ];
  @override
  $EcfR01sTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_R01';
  @override
  final String actualTableName = 'ECF_R01';
  @override
  VerificationContext validateIntegrity(Insertable<EcfR01> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF'], _serieEcfMeta));
    }
    if (data.containsKey('CNPJ_EMPRESA')) {
      context.handle(
          _cnpjEmpresaMeta,
          cnpjEmpresa.isAcceptableOrUnknown(
              data['CNPJ_EMPRESA'], _cnpjEmpresaMeta));
    }
    if (data.containsKey('CNPJ_SH')) {
      context.handle(_cnpjShMeta,
          cnpjSh.isAcceptableOrUnknown(data['CNPJ_SH'], _cnpjShMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL_SH')) {
      context.handle(
          _inscricaoEstadualShMeta,
          inscricaoEstadualSh.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL_SH'], _inscricaoEstadualShMeta));
    }
    if (data.containsKey('INSCRICAO_MUNICIPAL_SH')) {
      context.handle(
          _inscricaoMunicipalShMeta,
          inscricaoMunicipalSh.isAcceptableOrUnknown(
              data['INSCRICAO_MUNICIPAL_SH'], _inscricaoMunicipalShMeta));
    }
    if (data.containsKey('DENOMINACAO_SH')) {
      context.handle(
          _denominacaoShMeta,
          denominacaoSh.isAcceptableOrUnknown(
              data['DENOMINACAO_SH'], _denominacaoShMeta));
    }
    if (data.containsKey('NOME_PAF_ECF')) {
      context.handle(
          _nomePafEcfMeta,
          nomePafEcf.isAcceptableOrUnknown(
              data['NOME_PAF_ECF'], _nomePafEcfMeta));
    }
    if (data.containsKey('VERSAO_PAF_ECF')) {
      context.handle(
          _versaoPafEcfMeta,
          versaoPafEcf.isAcceptableOrUnknown(
              data['VERSAO_PAF_ECF'], _versaoPafEcfMeta));
    }
    if (data.containsKey('MD5_PAF_ECF')) {
      context.handle(_md5PafEcfMeta,
          md5PafEcf.isAcceptableOrUnknown(data['MD5_PAF_ECF'], _md5PafEcfMeta));
    }
    if (data.containsKey('DATA_INICIAL')) {
      context.handle(
          _dataInicialMeta,
          dataInicial.isAcceptableOrUnknown(
              data['DATA_INICIAL'], _dataInicialMeta));
    }
    if (data.containsKey('DATA_FINAL')) {
      context.handle(_dataFinalMeta,
          dataFinal.isAcceptableOrUnknown(data['DATA_FINAL'], _dataFinalMeta));
    }
    if (data.containsKey('VERSAO_ER')) {
      context.handle(_versaoErMeta,
          versaoEr.isAcceptableOrUnknown(data['VERSAO_ER'], _versaoErMeta));
    }
    if (data.containsKey('NUMERO_LAUDO_PAF')) {
      context.handle(
          _numeroLaudoPafMeta,
          numeroLaudoPaf.isAcceptableOrUnknown(
              data['NUMERO_LAUDO_PAF'], _numeroLaudoPafMeta));
    }
    if (data.containsKey('RAZAO_SOCIAL_SH')) {
      context.handle(
          _razaoSocialShMeta,
          razaoSocialSh.isAcceptableOrUnknown(
              data['RAZAO_SOCIAL_SH'], _razaoSocialShMeta));
    }
    if (data.containsKey('ENDERECO_SH')) {
      context.handle(
          _enderecoShMeta,
          enderecoSh.isAcceptableOrUnknown(
              data['ENDERECO_SH'], _enderecoShMeta));
    }
    if (data.containsKey('NUMERO_SH')) {
      context.handle(_numeroShMeta,
          numeroSh.isAcceptableOrUnknown(data['NUMERO_SH'], _numeroShMeta));
    }
    if (data.containsKey('COMPLEMENTO_SH')) {
      context.handle(
          _complementoShMeta,
          complementoSh.isAcceptableOrUnknown(
              data['COMPLEMENTO_SH'], _complementoShMeta));
    }
    if (data.containsKey('BAIRRO_SH')) {
      context.handle(_bairroShMeta,
          bairroSh.isAcceptableOrUnknown(data['BAIRRO_SH'], _bairroShMeta));
    }
    if (data.containsKey('CIDADE_SH')) {
      context.handle(_cidadeShMeta,
          cidadeSh.isAcceptableOrUnknown(data['CIDADE_SH'], _cidadeShMeta));
    }
    if (data.containsKey('CEP_SH')) {
      context.handle(
          _cepShMeta, cepSh.isAcceptableOrUnknown(data['CEP_SH'], _cepShMeta));
    }
    if (data.containsKey('UF_SH')) {
      context.handle(
          _ufShMeta, ufSh.isAcceptableOrUnknown(data['UF_SH'], _ufShMeta));
    }
    if (data.containsKey('TELEFONE_SH')) {
      context.handle(
          _telefoneShMeta,
          telefoneSh.isAcceptableOrUnknown(
              data['TELEFONE_SH'], _telefoneShMeta));
    }
    if (data.containsKey('CONTATO_SH')) {
      context.handle(_contatoShMeta,
          contatoSh.isAcceptableOrUnknown(data['CONTATO_SH'], _contatoShMeta));
    }
    if (data.containsKey('PRINCIPAL_EXECUTAVEL')) {
      context.handle(
          _principalExecutavelMeta,
          principalExecutavel.isAcceptableOrUnknown(
              data['PRINCIPAL_EXECUTAVEL'], _principalExecutavelMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO'], _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfR01 map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfR01.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfR01sTable createAlias(String alias) {
    return $EcfR01sTable(_db, alias);
  }
}

class EcfR02 extends DataClass implements Insertable<EcfR02> {
  final int id;
  final int idPdvOperador;
  final int idEcfImpressora;
  final int idEcfCaixa;
  final String serieEcf;
  final int crz;
  final int coo;
  final int cro;
  final DateTime dataMovimento;
  final DateTime dataEmissao;
  final String horaEmissao;
  final double vendaBruta;
  final double grandeTotal;
  final String hashRegistro;
  EcfR02(
      {@required this.id,
      this.idPdvOperador,
      this.idEcfImpressora,
      this.idEcfCaixa,
      this.serieEcf,
      this.crz,
      this.coo,
      this.cro,
      this.dataMovimento,
      this.dataEmissao,
      this.horaEmissao,
      this.vendaBruta,
      this.grandeTotal,
      this.hashRegistro});
  factory EcfR02.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final doubleType = db.typeSystem.forDartType<double>();
    return EcfR02(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvOperador: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_OPERADOR']),
      idEcfImpressora: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
      idEcfCaixa: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_CAIXA']),
      serieEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
      crz: intType.mapFromDatabaseResponse(data['${effectivePrefix}CRZ']),
      coo: intType.mapFromDatabaseResponse(data['${effectivePrefix}COO']),
      cro: intType.mapFromDatabaseResponse(data['${effectivePrefix}CRO']),
      dataMovimento: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_MOVIMENTO']),
      dataEmissao: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO']),
      horaEmissao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_EMISSAO']),
      vendaBruta: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VENDA_BRUTA']),
      grandeTotal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}GRANDE_TOTAL']),
      hashRegistro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvOperador != null) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador);
    }
    if (!nullToAbsent || idEcfImpressora != null) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora);
    }
    if (!nullToAbsent || idEcfCaixa != null) {
      map['ID_ECF_CAIXA'] = Variable<int>(idEcfCaixa);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || crz != null) {
      map['CRZ'] = Variable<int>(crz);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || cro != null) {
      map['CRO'] = Variable<int>(cro);
    }
    if (!nullToAbsent || dataMovimento != null) {
      map['DATA_MOVIMENTO'] = Variable<DateTime>(dataMovimento);
    }
    if (!nullToAbsent || dataEmissao != null) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao);
    }
    if (!nullToAbsent || horaEmissao != null) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao);
    }
    if (!nullToAbsent || vendaBruta != null) {
      map['VENDA_BRUTA'] = Variable<double>(vendaBruta);
    }
    if (!nullToAbsent || grandeTotal != null) {
      map['GRANDE_TOTAL'] = Variable<double>(grandeTotal);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfR02sCompanion toCompanion(bool nullToAbsent) {
    return EcfR02sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvOperador: idPdvOperador == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvOperador),
      idEcfImpressora: idEcfImpressora == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfImpressora),
      idEcfCaixa: idEcfCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfCaixa),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      crz: crz == null && nullToAbsent ? const Value.absent() : Value(crz),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      cro: cro == null && nullToAbsent ? const Value.absent() : Value(cro),
      dataMovimento: dataMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataMovimento),
      dataEmissao: dataEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissao),
      horaEmissao: horaEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(horaEmissao),
      vendaBruta: vendaBruta == null && nullToAbsent
          ? const Value.absent()
          : Value(vendaBruta),
      grandeTotal: grandeTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(grandeTotal),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfR02.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfR02(
      id: serializer.fromJson<int>(json['id']),
      idPdvOperador: serializer.fromJson<int>(json['idPdvOperador']),
      idEcfImpressora: serializer.fromJson<int>(json['idEcfImpressora']),
      idEcfCaixa: serializer.fromJson<int>(json['idEcfCaixa']),
      serieEcf: serializer.fromJson<String>(json['serieEcf']),
      crz: serializer.fromJson<int>(json['crz']),
      coo: serializer.fromJson<int>(json['coo']),
      cro: serializer.fromJson<int>(json['cro']),
      dataMovimento: serializer.fromJson<DateTime>(json['dataMovimento']),
      dataEmissao: serializer.fromJson<DateTime>(json['dataEmissao']),
      horaEmissao: serializer.fromJson<String>(json['horaEmissao']),
      vendaBruta: serializer.fromJson<double>(json['vendaBruta']),
      grandeTotal: serializer.fromJson<double>(json['grandeTotal']),
      hashRegistro: serializer.fromJson<String>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvOperador': serializer.toJson<int>(idPdvOperador),
      'idEcfImpressora': serializer.toJson<int>(idEcfImpressora),
      'idEcfCaixa': serializer.toJson<int>(idEcfCaixa),
      'serieEcf': serializer.toJson<String>(serieEcf),
      'crz': serializer.toJson<int>(crz),
      'coo': serializer.toJson<int>(coo),
      'cro': serializer.toJson<int>(cro),
      'dataMovimento': serializer.toJson<DateTime>(dataMovimento),
      'dataEmissao': serializer.toJson<DateTime>(dataEmissao),
      'horaEmissao': serializer.toJson<String>(horaEmissao),
      'vendaBruta': serializer.toJson<double>(vendaBruta),
      'grandeTotal': serializer.toJson<double>(grandeTotal),
      'hashRegistro': serializer.toJson<String>(hashRegistro),
    };
  }

  EcfR02 copyWith(
          {int id,
          int idPdvOperador,
          int idEcfImpressora,
          int idEcfCaixa,
          String serieEcf,
          int crz,
          int coo,
          int cro,
          DateTime dataMovimento,
          DateTime dataEmissao,
          String horaEmissao,
          double vendaBruta,
          double grandeTotal,
          String hashRegistro}) =>
      EcfR02(
        id: id ?? this.id,
        idPdvOperador: idPdvOperador ?? this.idPdvOperador,
        idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
        idEcfCaixa: idEcfCaixa ?? this.idEcfCaixa,
        serieEcf: serieEcf ?? this.serieEcf,
        crz: crz ?? this.crz,
        coo: coo ?? this.coo,
        cro: cro ?? this.cro,
        dataMovimento: dataMovimento ?? this.dataMovimento,
        dataEmissao: dataEmissao ?? this.dataEmissao,
        horaEmissao: horaEmissao ?? this.horaEmissao,
        vendaBruta: vendaBruta ?? this.vendaBruta,
        grandeTotal: grandeTotal ?? this.grandeTotal,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfR02(')
          ..write('id: $id, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idEcfCaixa: $idEcfCaixa, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('crz: $crz, ')
          ..write('coo: $coo, ')
          ..write('cro: $cro, ')
          ..write('dataMovimento: $dataMovimento, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('vendaBruta: $vendaBruta, ')
          ..write('grandeTotal: $grandeTotal, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idPdvOperador.hashCode,
          $mrjc(
              idEcfImpressora.hashCode,
              $mrjc(
                  idEcfCaixa.hashCode,
                  $mrjc(
                      serieEcf.hashCode,
                      $mrjc(
                          crz.hashCode,
                          $mrjc(
                              coo.hashCode,
                              $mrjc(
                                  cro.hashCode,
                                  $mrjc(
                                      dataMovimento.hashCode,
                                      $mrjc(
                                          dataEmissao.hashCode,
                                          $mrjc(
                                              horaEmissao.hashCode,
                                              $mrjc(
                                                  vendaBruta.hashCode,
                                                  $mrjc(
                                                      grandeTotal.hashCode,
                                                      hashRegistro
                                                          .hashCode))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfR02 &&
          other.id == this.id &&
          other.idPdvOperador == this.idPdvOperador &&
          other.idEcfImpressora == this.idEcfImpressora &&
          other.idEcfCaixa == this.idEcfCaixa &&
          other.serieEcf == this.serieEcf &&
          other.crz == this.crz &&
          other.coo == this.coo &&
          other.cro == this.cro &&
          other.dataMovimento == this.dataMovimento &&
          other.dataEmissao == this.dataEmissao &&
          other.horaEmissao == this.horaEmissao &&
          other.vendaBruta == this.vendaBruta &&
          other.grandeTotal == this.grandeTotal &&
          other.hashRegistro == this.hashRegistro);
}

class EcfR02sCompanion extends UpdateCompanion<EcfR02> {
  final Value<int> id;
  final Value<int> idPdvOperador;
  final Value<int> idEcfImpressora;
  final Value<int> idEcfCaixa;
  final Value<String> serieEcf;
  final Value<int> crz;
  final Value<int> coo;
  final Value<int> cro;
  final Value<DateTime> dataMovimento;
  final Value<DateTime> dataEmissao;
  final Value<String> horaEmissao;
  final Value<double> vendaBruta;
  final Value<double> grandeTotal;
  final Value<String> hashRegistro;
  const EcfR02sCompanion({
    this.id = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idEcfCaixa = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.crz = const Value.absent(),
    this.coo = const Value.absent(),
    this.cro = const Value.absent(),
    this.dataMovimento = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.vendaBruta = const Value.absent(),
    this.grandeTotal = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfR02sCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idEcfCaixa = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.crz = const Value.absent(),
    this.coo = const Value.absent(),
    this.cro = const Value.absent(),
    this.dataMovimento = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.vendaBruta = const Value.absent(),
    this.grandeTotal = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfR02> custom({
    Expression<int> id,
    Expression<int> idPdvOperador,
    Expression<int> idEcfImpressora,
    Expression<int> idEcfCaixa,
    Expression<String> serieEcf,
    Expression<int> crz,
    Expression<int> coo,
    Expression<int> cro,
    Expression<DateTime> dataMovimento,
    Expression<DateTime> dataEmissao,
    Expression<String> horaEmissao,
    Expression<double> vendaBruta,
    Expression<double> grandeTotal,
    Expression<String> hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvOperador != null) 'ID_PDV_OPERADOR': idPdvOperador,
      if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
      if (idEcfCaixa != null) 'ID_ECF_CAIXA': idEcfCaixa,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (crz != null) 'CRZ': crz,
      if (coo != null) 'COO': coo,
      if (cro != null) 'CRO': cro,
      if (dataMovimento != null) 'DATA_MOVIMENTO': dataMovimento,
      if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
      if (horaEmissao != null) 'HORA_EMISSAO': horaEmissao,
      if (vendaBruta != null) 'VENDA_BRUTA': vendaBruta,
      if (grandeTotal != null) 'GRANDE_TOTAL': grandeTotal,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfR02sCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvOperador,
      Value<int> idEcfImpressora,
      Value<int> idEcfCaixa,
      Value<String> serieEcf,
      Value<int> crz,
      Value<int> coo,
      Value<int> cro,
      Value<DateTime> dataMovimento,
      Value<DateTime> dataEmissao,
      Value<String> horaEmissao,
      Value<double> vendaBruta,
      Value<double> grandeTotal,
      Value<String> hashRegistro}) {
    return EcfR02sCompanion(
      id: id ?? this.id,
      idPdvOperador: idPdvOperador ?? this.idPdvOperador,
      idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
      idEcfCaixa: idEcfCaixa ?? this.idEcfCaixa,
      serieEcf: serieEcf ?? this.serieEcf,
      crz: crz ?? this.crz,
      coo: coo ?? this.coo,
      cro: cro ?? this.cro,
      dataMovimento: dataMovimento ?? this.dataMovimento,
      dataEmissao: dataEmissao ?? this.dataEmissao,
      horaEmissao: horaEmissao ?? this.horaEmissao,
      vendaBruta: vendaBruta ?? this.vendaBruta,
      grandeTotal: grandeTotal ?? this.grandeTotal,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvOperador.present) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador.value);
    }
    if (idEcfImpressora.present) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora.value);
    }
    if (idEcfCaixa.present) {
      map['ID_ECF_CAIXA'] = Variable<int>(idEcfCaixa.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (crz.present) {
      map['CRZ'] = Variable<int>(crz.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (cro.present) {
      map['CRO'] = Variable<int>(cro.value);
    }
    if (dataMovimento.present) {
      map['DATA_MOVIMENTO'] = Variable<DateTime>(dataMovimento.value);
    }
    if (dataEmissao.present) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao.value);
    }
    if (horaEmissao.present) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao.value);
    }
    if (vendaBruta.present) {
      map['VENDA_BRUTA'] = Variable<double>(vendaBruta.value);
    }
    if (grandeTotal.present) {
      map['GRANDE_TOTAL'] = Variable<double>(grandeTotal.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfR02sCompanion(')
          ..write('id: $id, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idEcfCaixa: $idEcfCaixa, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('crz: $crz, ')
          ..write('coo: $coo, ')
          ..write('cro: $cro, ')
          ..write('dataMovimento: $dataMovimento, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('vendaBruta: $vendaBruta, ')
          ..write('grandeTotal: $grandeTotal, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfR02sTable extends EcfR02s with TableInfo<$EcfR02sTable, EcfR02> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfR02sTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvOperadorMeta =
      const VerificationMeta('idPdvOperador');
  GeneratedIntColumn _idPdvOperador;
  @override
  GeneratedIntColumn get idPdvOperador =>
      _idPdvOperador ??= _constructIdPdvOperador();
  GeneratedIntColumn _constructIdPdvOperador() {
    return GeneratedIntColumn('ID_PDV_OPERADOR', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_OPERADOR(ID)');
  }

  final VerificationMeta _idEcfImpressoraMeta =
      const VerificationMeta('idEcfImpressora');
  GeneratedIntColumn _idEcfImpressora;
  @override
  GeneratedIntColumn get idEcfImpressora =>
      _idEcfImpressora ??= _constructIdEcfImpressora();
  GeneratedIntColumn _constructIdEcfImpressora() {
    return GeneratedIntColumn('ID_ECF_IMPRESSORA', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
  }

  final VerificationMeta _idEcfCaixaMeta = const VerificationMeta('idEcfCaixa');
  GeneratedIntColumn _idEcfCaixa;
  @override
  GeneratedIntColumn get idEcfCaixa => _idEcfCaixa ??= _constructIdEcfCaixa();
  GeneratedIntColumn _constructIdEcfCaixa() {
    return GeneratedIntColumn('ID_ECF_CAIXA', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_CAIXA(ID)');
  }

  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  GeneratedTextColumn _serieEcf;
  @override
  GeneratedTextColumn get serieEcf => _serieEcf ??= _constructSerieEcf();
  GeneratedTextColumn _constructSerieEcf() {
    return GeneratedTextColumn('SERIE_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _crzMeta = const VerificationMeta('crz');
  GeneratedIntColumn _crz;
  @override
  GeneratedIntColumn get crz => _crz ??= _constructCrz();
  GeneratedIntColumn _constructCrz() {
    return GeneratedIntColumn(
      'CRZ',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  GeneratedIntColumn _coo;
  @override
  GeneratedIntColumn get coo => _coo ??= _constructCoo();
  GeneratedIntColumn _constructCoo() {
    return GeneratedIntColumn(
      'COO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _croMeta = const VerificationMeta('cro');
  GeneratedIntColumn _cro;
  @override
  GeneratedIntColumn get cro => _cro ??= _constructCro();
  GeneratedIntColumn _constructCro() {
    return GeneratedIntColumn(
      'CRO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataMovimentoMeta =
      const VerificationMeta('dataMovimento');
  GeneratedDateTimeColumn _dataMovimento;
  @override
  GeneratedDateTimeColumn get dataMovimento =>
      _dataMovimento ??= _constructDataMovimento();
  GeneratedDateTimeColumn _constructDataMovimento() {
    return GeneratedDateTimeColumn(
      'DATA_MOVIMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataEmissaoMeta =
      const VerificationMeta('dataEmissao');
  GeneratedDateTimeColumn _dataEmissao;
  @override
  GeneratedDateTimeColumn get dataEmissao =>
      _dataEmissao ??= _constructDataEmissao();
  GeneratedDateTimeColumn _constructDataEmissao() {
    return GeneratedDateTimeColumn(
      'DATA_EMISSAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaEmissaoMeta =
      const VerificationMeta('horaEmissao');
  GeneratedTextColumn _horaEmissao;
  @override
  GeneratedTextColumn get horaEmissao =>
      _horaEmissao ??= _constructHoraEmissao();
  GeneratedTextColumn _constructHoraEmissao() {
    return GeneratedTextColumn('HORA_EMISSAO', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _vendaBrutaMeta = const VerificationMeta('vendaBruta');
  GeneratedRealColumn _vendaBruta;
  @override
  GeneratedRealColumn get vendaBruta => _vendaBruta ??= _constructVendaBruta();
  GeneratedRealColumn _constructVendaBruta() {
    return GeneratedRealColumn(
      'VENDA_BRUTA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _grandeTotalMeta =
      const VerificationMeta('grandeTotal');
  GeneratedRealColumn _grandeTotal;
  @override
  GeneratedRealColumn get grandeTotal =>
      _grandeTotal ??= _constructGrandeTotal();
  GeneratedRealColumn _constructGrandeTotal() {
    return GeneratedRealColumn(
      'GRANDE_TOTAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  GeneratedTextColumn _hashRegistro;
  @override
  GeneratedTextColumn get hashRegistro =>
      _hashRegistro ??= _constructHashRegistro();
  GeneratedTextColumn _constructHashRegistro() {
    return GeneratedTextColumn('HASH_REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvOperador,
        idEcfImpressora,
        idEcfCaixa,
        serieEcf,
        crz,
        coo,
        cro,
        dataMovimento,
        dataEmissao,
        horaEmissao,
        vendaBruta,
        grandeTotal,
        hashRegistro
      ];
  @override
  $EcfR02sTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_R02';
  @override
  final String actualTableName = 'ECF_R02';
  @override
  VerificationContext validateIntegrity(Insertable<EcfR02> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_OPERADOR')) {
      context.handle(
          _idPdvOperadorMeta,
          idPdvOperador.isAcceptableOrUnknown(
              data['ID_PDV_OPERADOR'], _idPdvOperadorMeta));
    }
    if (data.containsKey('ID_ECF_IMPRESSORA')) {
      context.handle(
          _idEcfImpressoraMeta,
          idEcfImpressora.isAcceptableOrUnknown(
              data['ID_ECF_IMPRESSORA'], _idEcfImpressoraMeta));
    }
    if (data.containsKey('ID_ECF_CAIXA')) {
      context.handle(
          _idEcfCaixaMeta,
          idEcfCaixa.isAcceptableOrUnknown(
              data['ID_ECF_CAIXA'], _idEcfCaixaMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF'], _serieEcfMeta));
    }
    if (data.containsKey('CRZ')) {
      context.handle(
          _crzMeta, crz.isAcceptableOrUnknown(data['CRZ'], _crzMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO'], _cooMeta));
    }
    if (data.containsKey('CRO')) {
      context.handle(
          _croMeta, cro.isAcceptableOrUnknown(data['CRO'], _croMeta));
    }
    if (data.containsKey('DATA_MOVIMENTO')) {
      context.handle(
          _dataMovimentoMeta,
          dataMovimento.isAcceptableOrUnknown(
              data['DATA_MOVIMENTO'], _dataMovimentoMeta));
    }
    if (data.containsKey('DATA_EMISSAO')) {
      context.handle(
          _dataEmissaoMeta,
          dataEmissao.isAcceptableOrUnknown(
              data['DATA_EMISSAO'], _dataEmissaoMeta));
    }
    if (data.containsKey('HORA_EMISSAO')) {
      context.handle(
          _horaEmissaoMeta,
          horaEmissao.isAcceptableOrUnknown(
              data['HORA_EMISSAO'], _horaEmissaoMeta));
    }
    if (data.containsKey('VENDA_BRUTA')) {
      context.handle(
          _vendaBrutaMeta,
          vendaBruta.isAcceptableOrUnknown(
              data['VENDA_BRUTA'], _vendaBrutaMeta));
    }
    if (data.containsKey('GRANDE_TOTAL')) {
      context.handle(
          _grandeTotalMeta,
          grandeTotal.isAcceptableOrUnknown(
              data['GRANDE_TOTAL'], _grandeTotalMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO'], _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfR02 map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfR02.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfR02sTable createAlias(String alias) {
    return $EcfR02sTable(_db, alias);
  }
}

class EcfR03 extends DataClass implements Insertable<EcfR03> {
  final int id;
  final int idEcfR02;
  final String serieEcf;
  final String totalizadorParcial;
  final double valorAcumulado;
  final int crz;
  final String hashRegistro;
  EcfR03(
      {@required this.id,
      this.idEcfR02,
      this.serieEcf,
      this.totalizadorParcial,
      this.valorAcumulado,
      this.crz,
      this.hashRegistro});
  factory EcfR03.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return EcfR03(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idEcfR02:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_R02']),
      serieEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
      totalizadorParcial: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
      valorAcumulado: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ACUMULADO']),
      crz: intType.mapFromDatabaseResponse(data['${effectivePrefix}CRZ']),
      hashRegistro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEcfR02 != null) {
      map['ID_ECF_R02'] = Variable<int>(idEcfR02);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || totalizadorParcial != null) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial);
    }
    if (!nullToAbsent || valorAcumulado != null) {
      map['VALOR_ACUMULADO'] = Variable<double>(valorAcumulado);
    }
    if (!nullToAbsent || crz != null) {
      map['CRZ'] = Variable<int>(crz);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfR03sCompanion toCompanion(bool nullToAbsent) {
    return EcfR03sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEcfR02: idEcfR02 == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfR02),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      totalizadorParcial: totalizadorParcial == null && nullToAbsent
          ? const Value.absent()
          : Value(totalizadorParcial),
      valorAcumulado: valorAcumulado == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAcumulado),
      crz: crz == null && nullToAbsent ? const Value.absent() : Value(crz),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfR03.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfR03(
      id: serializer.fromJson<int>(json['id']),
      idEcfR02: serializer.fromJson<int>(json['idEcfR02']),
      serieEcf: serializer.fromJson<String>(json['serieEcf']),
      totalizadorParcial:
          serializer.fromJson<String>(json['totalizadorParcial']),
      valorAcumulado: serializer.fromJson<double>(json['valorAcumulado']),
      crz: serializer.fromJson<int>(json['crz']),
      hashRegistro: serializer.fromJson<String>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idEcfR02': serializer.toJson<int>(idEcfR02),
      'serieEcf': serializer.toJson<String>(serieEcf),
      'totalizadorParcial': serializer.toJson<String>(totalizadorParcial),
      'valorAcumulado': serializer.toJson<double>(valorAcumulado),
      'crz': serializer.toJson<int>(crz),
      'hashRegistro': serializer.toJson<String>(hashRegistro),
    };
  }

  EcfR03 copyWith(
          {int id,
          int idEcfR02,
          String serieEcf,
          String totalizadorParcial,
          double valorAcumulado,
          int crz,
          String hashRegistro}) =>
      EcfR03(
        id: id ?? this.id,
        idEcfR02: idEcfR02 ?? this.idEcfR02,
        serieEcf: serieEcf ?? this.serieEcf,
        totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
        valorAcumulado: valorAcumulado ?? this.valorAcumulado,
        crz: crz ?? this.crz,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfR03(')
          ..write('id: $id, ')
          ..write('idEcfR02: $idEcfR02, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('valorAcumulado: $valorAcumulado, ')
          ..write('crz: $crz, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idEcfR02.hashCode,
          $mrjc(
              serieEcf.hashCode,
              $mrjc(
                  totalizadorParcial.hashCode,
                  $mrjc(valorAcumulado.hashCode,
                      $mrjc(crz.hashCode, hashRegistro.hashCode)))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfR03 &&
          other.id == this.id &&
          other.idEcfR02 == this.idEcfR02 &&
          other.serieEcf == this.serieEcf &&
          other.totalizadorParcial == this.totalizadorParcial &&
          other.valorAcumulado == this.valorAcumulado &&
          other.crz == this.crz &&
          other.hashRegistro == this.hashRegistro);
}

class EcfR03sCompanion extends UpdateCompanion<EcfR03> {
  final Value<int> id;
  final Value<int> idEcfR02;
  final Value<String> serieEcf;
  final Value<String> totalizadorParcial;
  final Value<double> valorAcumulado;
  final Value<int> crz;
  final Value<String> hashRegistro;
  const EcfR03sCompanion({
    this.id = const Value.absent(),
    this.idEcfR02 = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.valorAcumulado = const Value.absent(),
    this.crz = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfR03sCompanion.insert({
    this.id = const Value.absent(),
    this.idEcfR02 = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.valorAcumulado = const Value.absent(),
    this.crz = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfR03> custom({
    Expression<int> id,
    Expression<int> idEcfR02,
    Expression<String> serieEcf,
    Expression<String> totalizadorParcial,
    Expression<double> valorAcumulado,
    Expression<int> crz,
    Expression<String> hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEcfR02 != null) 'ID_ECF_R02': idEcfR02,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
      if (valorAcumulado != null) 'VALOR_ACUMULADO': valorAcumulado,
      if (crz != null) 'CRZ': crz,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfR03sCompanion copyWith(
      {Value<int> id,
      Value<int> idEcfR02,
      Value<String> serieEcf,
      Value<String> totalizadorParcial,
      Value<double> valorAcumulado,
      Value<int> crz,
      Value<String> hashRegistro}) {
    return EcfR03sCompanion(
      id: id ?? this.id,
      idEcfR02: idEcfR02 ?? this.idEcfR02,
      serieEcf: serieEcf ?? this.serieEcf,
      totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
      valorAcumulado: valorAcumulado ?? this.valorAcumulado,
      crz: crz ?? this.crz,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEcfR02.present) {
      map['ID_ECF_R02'] = Variable<int>(idEcfR02.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (totalizadorParcial.present) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial.value);
    }
    if (valorAcumulado.present) {
      map['VALOR_ACUMULADO'] = Variable<double>(valorAcumulado.value);
    }
    if (crz.present) {
      map['CRZ'] = Variable<int>(crz.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfR03sCompanion(')
          ..write('id: $id, ')
          ..write('idEcfR02: $idEcfR02, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('valorAcumulado: $valorAcumulado, ')
          ..write('crz: $crz, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfR03sTable extends EcfR03s with TableInfo<$EcfR03sTable, EcfR03> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfR03sTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idEcfR02Meta = const VerificationMeta('idEcfR02');
  GeneratedIntColumn _idEcfR02;
  @override
  GeneratedIntColumn get idEcfR02 => _idEcfR02 ??= _constructIdEcfR02();
  GeneratedIntColumn _constructIdEcfR02() {
    return GeneratedIntColumn('ID_ECF_R02', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_R02(ID)');
  }

  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  GeneratedTextColumn _serieEcf;
  @override
  GeneratedTextColumn get serieEcf => _serieEcf ??= _constructSerieEcf();
  GeneratedTextColumn _constructSerieEcf() {
    return GeneratedTextColumn('SERIE_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _totalizadorParcialMeta =
      const VerificationMeta('totalizadorParcial');
  GeneratedTextColumn _totalizadorParcial;
  @override
  GeneratedTextColumn get totalizadorParcial =>
      _totalizadorParcial ??= _constructTotalizadorParcial();
  GeneratedTextColumn _constructTotalizadorParcial() {
    return GeneratedTextColumn('TOTALIZADOR_PARCIAL', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _valorAcumuladoMeta =
      const VerificationMeta('valorAcumulado');
  GeneratedRealColumn _valorAcumulado;
  @override
  GeneratedRealColumn get valorAcumulado =>
      _valorAcumulado ??= _constructValorAcumulado();
  GeneratedRealColumn _constructValorAcumulado() {
    return GeneratedRealColumn(
      'VALOR_ACUMULADO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crzMeta = const VerificationMeta('crz');
  GeneratedIntColumn _crz;
  @override
  GeneratedIntColumn get crz => _crz ??= _constructCrz();
  GeneratedIntColumn _constructCrz() {
    return GeneratedIntColumn(
      'CRZ',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  GeneratedTextColumn _hashRegistro;
  @override
  GeneratedTextColumn get hashRegistro =>
      _hashRegistro ??= _constructHashRegistro();
  GeneratedTextColumn _constructHashRegistro() {
    return GeneratedTextColumn('HASH_REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idEcfR02,
        serieEcf,
        totalizadorParcial,
        valorAcumulado,
        crz,
        hashRegistro
      ];
  @override
  $EcfR03sTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_R03';
  @override
  final String actualTableName = 'ECF_R03';
  @override
  VerificationContext validateIntegrity(Insertable<EcfR03> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_ECF_R02')) {
      context.handle(_idEcfR02Meta,
          idEcfR02.isAcceptableOrUnknown(data['ID_ECF_R02'], _idEcfR02Meta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF'], _serieEcfMeta));
    }
    if (data.containsKey('TOTALIZADOR_PARCIAL')) {
      context.handle(
          _totalizadorParcialMeta,
          totalizadorParcial.isAcceptableOrUnknown(
              data['TOTALIZADOR_PARCIAL'], _totalizadorParcialMeta));
    }
    if (data.containsKey('VALOR_ACUMULADO')) {
      context.handle(
          _valorAcumuladoMeta,
          valorAcumulado.isAcceptableOrUnknown(
              data['VALOR_ACUMULADO'], _valorAcumuladoMeta));
    }
    if (data.containsKey('CRZ')) {
      context.handle(
          _crzMeta, crz.isAcceptableOrUnknown(data['CRZ'], _crzMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO'], _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfR03 map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfR03.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfR03sTable createAlias(String alias) {
    return $EcfR03sTable(_db, alias);
  }
}

class EcfR06 extends DataClass implements Insertable<EcfR06> {
  final int id;
  final int idPdvOperador;
  final int idEcfImpressora;
  final int idEcfCaixa;
  final String serieEcf;
  final int coo;
  final int gnf;
  final int grg;
  final int cdc;
  final String denominacao;
  final DateTime dataEmissao;
  final String horaEmissao;
  final String hashRegistro;
  EcfR06(
      {@required this.id,
      this.idPdvOperador,
      this.idEcfImpressora,
      this.idEcfCaixa,
      this.serieEcf,
      this.coo,
      this.gnf,
      this.grg,
      this.cdc,
      this.denominacao,
      this.dataEmissao,
      this.horaEmissao,
      this.hashRegistro});
  factory EcfR06.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    return EcfR06(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvOperador: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_OPERADOR']),
      idEcfImpressora: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
      idEcfCaixa: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_CAIXA']),
      serieEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
      coo: intType.mapFromDatabaseResponse(data['${effectivePrefix}COO']),
      gnf: intType.mapFromDatabaseResponse(data['${effectivePrefix}GNF']),
      grg: intType.mapFromDatabaseResponse(data['${effectivePrefix}GRG']),
      cdc: intType.mapFromDatabaseResponse(data['${effectivePrefix}CDC']),
      denominacao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DENOMINACAO']),
      dataEmissao: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO']),
      horaEmissao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_EMISSAO']),
      hashRegistro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvOperador != null) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador);
    }
    if (!nullToAbsent || idEcfImpressora != null) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora);
    }
    if (!nullToAbsent || idEcfCaixa != null) {
      map['ID_ECF_CAIXA'] = Variable<int>(idEcfCaixa);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || gnf != null) {
      map['GNF'] = Variable<int>(gnf);
    }
    if (!nullToAbsent || grg != null) {
      map['GRG'] = Variable<int>(grg);
    }
    if (!nullToAbsent || cdc != null) {
      map['CDC'] = Variable<int>(cdc);
    }
    if (!nullToAbsent || denominacao != null) {
      map['DENOMINACAO'] = Variable<String>(denominacao);
    }
    if (!nullToAbsent || dataEmissao != null) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao);
    }
    if (!nullToAbsent || horaEmissao != null) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfR06sCompanion toCompanion(bool nullToAbsent) {
    return EcfR06sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvOperador: idPdvOperador == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvOperador),
      idEcfImpressora: idEcfImpressora == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfImpressora),
      idEcfCaixa: idEcfCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfCaixa),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      gnf: gnf == null && nullToAbsent ? const Value.absent() : Value(gnf),
      grg: grg == null && nullToAbsent ? const Value.absent() : Value(grg),
      cdc: cdc == null && nullToAbsent ? const Value.absent() : Value(cdc),
      denominacao: denominacao == null && nullToAbsent
          ? const Value.absent()
          : Value(denominacao),
      dataEmissao: dataEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissao),
      horaEmissao: horaEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(horaEmissao),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfR06.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfR06(
      id: serializer.fromJson<int>(json['id']),
      idPdvOperador: serializer.fromJson<int>(json['idPdvOperador']),
      idEcfImpressora: serializer.fromJson<int>(json['idEcfImpressora']),
      idEcfCaixa: serializer.fromJson<int>(json['idEcfCaixa']),
      serieEcf: serializer.fromJson<String>(json['serieEcf']),
      coo: serializer.fromJson<int>(json['coo']),
      gnf: serializer.fromJson<int>(json['gnf']),
      grg: serializer.fromJson<int>(json['grg']),
      cdc: serializer.fromJson<int>(json['cdc']),
      denominacao: serializer.fromJson<String>(json['denominacao']),
      dataEmissao: serializer.fromJson<DateTime>(json['dataEmissao']),
      horaEmissao: serializer.fromJson<String>(json['horaEmissao']),
      hashRegistro: serializer.fromJson<String>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvOperador': serializer.toJson<int>(idPdvOperador),
      'idEcfImpressora': serializer.toJson<int>(idEcfImpressora),
      'idEcfCaixa': serializer.toJson<int>(idEcfCaixa),
      'serieEcf': serializer.toJson<String>(serieEcf),
      'coo': serializer.toJson<int>(coo),
      'gnf': serializer.toJson<int>(gnf),
      'grg': serializer.toJson<int>(grg),
      'cdc': serializer.toJson<int>(cdc),
      'denominacao': serializer.toJson<String>(denominacao),
      'dataEmissao': serializer.toJson<DateTime>(dataEmissao),
      'horaEmissao': serializer.toJson<String>(horaEmissao),
      'hashRegistro': serializer.toJson<String>(hashRegistro),
    };
  }

  EcfR06 copyWith(
          {int id,
          int idPdvOperador,
          int idEcfImpressora,
          int idEcfCaixa,
          String serieEcf,
          int coo,
          int gnf,
          int grg,
          int cdc,
          String denominacao,
          DateTime dataEmissao,
          String horaEmissao,
          String hashRegistro}) =>
      EcfR06(
        id: id ?? this.id,
        idPdvOperador: idPdvOperador ?? this.idPdvOperador,
        idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
        idEcfCaixa: idEcfCaixa ?? this.idEcfCaixa,
        serieEcf: serieEcf ?? this.serieEcf,
        coo: coo ?? this.coo,
        gnf: gnf ?? this.gnf,
        grg: grg ?? this.grg,
        cdc: cdc ?? this.cdc,
        denominacao: denominacao ?? this.denominacao,
        dataEmissao: dataEmissao ?? this.dataEmissao,
        horaEmissao: horaEmissao ?? this.horaEmissao,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfR06(')
          ..write('id: $id, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idEcfCaixa: $idEcfCaixa, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('coo: $coo, ')
          ..write('gnf: $gnf, ')
          ..write('grg: $grg, ')
          ..write('cdc: $cdc, ')
          ..write('denominacao: $denominacao, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idPdvOperador.hashCode,
          $mrjc(
              idEcfImpressora.hashCode,
              $mrjc(
                  idEcfCaixa.hashCode,
                  $mrjc(
                      serieEcf.hashCode,
                      $mrjc(
                          coo.hashCode,
                          $mrjc(
                              gnf.hashCode,
                              $mrjc(
                                  grg.hashCode,
                                  $mrjc(
                                      cdc.hashCode,
                                      $mrjc(
                                          denominacao.hashCode,
                                          $mrjc(
                                              dataEmissao.hashCode,
                                              $mrjc(
                                                  horaEmissao.hashCode,
                                                  hashRegistro
                                                      .hashCode)))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfR06 &&
          other.id == this.id &&
          other.idPdvOperador == this.idPdvOperador &&
          other.idEcfImpressora == this.idEcfImpressora &&
          other.idEcfCaixa == this.idEcfCaixa &&
          other.serieEcf == this.serieEcf &&
          other.coo == this.coo &&
          other.gnf == this.gnf &&
          other.grg == this.grg &&
          other.cdc == this.cdc &&
          other.denominacao == this.denominacao &&
          other.dataEmissao == this.dataEmissao &&
          other.horaEmissao == this.horaEmissao &&
          other.hashRegistro == this.hashRegistro);
}

class EcfR06sCompanion extends UpdateCompanion<EcfR06> {
  final Value<int> id;
  final Value<int> idPdvOperador;
  final Value<int> idEcfImpressora;
  final Value<int> idEcfCaixa;
  final Value<String> serieEcf;
  final Value<int> coo;
  final Value<int> gnf;
  final Value<int> grg;
  final Value<int> cdc;
  final Value<String> denominacao;
  final Value<DateTime> dataEmissao;
  final Value<String> horaEmissao;
  final Value<String> hashRegistro;
  const EcfR06sCompanion({
    this.id = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idEcfCaixa = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.gnf = const Value.absent(),
    this.grg = const Value.absent(),
    this.cdc = const Value.absent(),
    this.denominacao = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfR06sCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idEcfCaixa = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.gnf = const Value.absent(),
    this.grg = const Value.absent(),
    this.cdc = const Value.absent(),
    this.denominacao = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.horaEmissao = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfR06> custom({
    Expression<int> id,
    Expression<int> idPdvOperador,
    Expression<int> idEcfImpressora,
    Expression<int> idEcfCaixa,
    Expression<String> serieEcf,
    Expression<int> coo,
    Expression<int> gnf,
    Expression<int> grg,
    Expression<int> cdc,
    Expression<String> denominacao,
    Expression<DateTime> dataEmissao,
    Expression<String> horaEmissao,
    Expression<String> hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvOperador != null) 'ID_PDV_OPERADOR': idPdvOperador,
      if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
      if (idEcfCaixa != null) 'ID_ECF_CAIXA': idEcfCaixa,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (coo != null) 'COO': coo,
      if (gnf != null) 'GNF': gnf,
      if (grg != null) 'GRG': grg,
      if (cdc != null) 'CDC': cdc,
      if (denominacao != null) 'DENOMINACAO': denominacao,
      if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
      if (horaEmissao != null) 'HORA_EMISSAO': horaEmissao,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfR06sCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvOperador,
      Value<int> idEcfImpressora,
      Value<int> idEcfCaixa,
      Value<String> serieEcf,
      Value<int> coo,
      Value<int> gnf,
      Value<int> grg,
      Value<int> cdc,
      Value<String> denominacao,
      Value<DateTime> dataEmissao,
      Value<String> horaEmissao,
      Value<String> hashRegistro}) {
    return EcfR06sCompanion(
      id: id ?? this.id,
      idPdvOperador: idPdvOperador ?? this.idPdvOperador,
      idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
      idEcfCaixa: idEcfCaixa ?? this.idEcfCaixa,
      serieEcf: serieEcf ?? this.serieEcf,
      coo: coo ?? this.coo,
      gnf: gnf ?? this.gnf,
      grg: grg ?? this.grg,
      cdc: cdc ?? this.cdc,
      denominacao: denominacao ?? this.denominacao,
      dataEmissao: dataEmissao ?? this.dataEmissao,
      horaEmissao: horaEmissao ?? this.horaEmissao,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvOperador.present) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador.value);
    }
    if (idEcfImpressora.present) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora.value);
    }
    if (idEcfCaixa.present) {
      map['ID_ECF_CAIXA'] = Variable<int>(idEcfCaixa.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (gnf.present) {
      map['GNF'] = Variable<int>(gnf.value);
    }
    if (grg.present) {
      map['GRG'] = Variable<int>(grg.value);
    }
    if (cdc.present) {
      map['CDC'] = Variable<int>(cdc.value);
    }
    if (denominacao.present) {
      map['DENOMINACAO'] = Variable<String>(denominacao.value);
    }
    if (dataEmissao.present) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao.value);
    }
    if (horaEmissao.present) {
      map['HORA_EMISSAO'] = Variable<String>(horaEmissao.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfR06sCompanion(')
          ..write('id: $id, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idEcfCaixa: $idEcfCaixa, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('coo: $coo, ')
          ..write('gnf: $gnf, ')
          ..write('grg: $grg, ')
          ..write('cdc: $cdc, ')
          ..write('denominacao: $denominacao, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('horaEmissao: $horaEmissao, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfR06sTable extends EcfR06s with TableInfo<$EcfR06sTable, EcfR06> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfR06sTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvOperadorMeta =
      const VerificationMeta('idPdvOperador');
  GeneratedIntColumn _idPdvOperador;
  @override
  GeneratedIntColumn get idPdvOperador =>
      _idPdvOperador ??= _constructIdPdvOperador();
  GeneratedIntColumn _constructIdPdvOperador() {
    return GeneratedIntColumn('ID_PDV_OPERADOR', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_OPERADOR(ID)');
  }

  final VerificationMeta _idEcfImpressoraMeta =
      const VerificationMeta('idEcfImpressora');
  GeneratedIntColumn _idEcfImpressora;
  @override
  GeneratedIntColumn get idEcfImpressora =>
      _idEcfImpressora ??= _constructIdEcfImpressora();
  GeneratedIntColumn _constructIdEcfImpressora() {
    return GeneratedIntColumn('ID_ECF_IMPRESSORA', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
  }

  final VerificationMeta _idEcfCaixaMeta = const VerificationMeta('idEcfCaixa');
  GeneratedIntColumn _idEcfCaixa;
  @override
  GeneratedIntColumn get idEcfCaixa => _idEcfCaixa ??= _constructIdEcfCaixa();
  GeneratedIntColumn _constructIdEcfCaixa() {
    return GeneratedIntColumn('ID_ECF_CAIXA', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_CAIXA(ID)');
  }

  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  GeneratedTextColumn _serieEcf;
  @override
  GeneratedTextColumn get serieEcf => _serieEcf ??= _constructSerieEcf();
  GeneratedTextColumn _constructSerieEcf() {
    return GeneratedTextColumn('SERIE_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  GeneratedIntColumn _coo;
  @override
  GeneratedIntColumn get coo => _coo ??= _constructCoo();
  GeneratedIntColumn _constructCoo() {
    return GeneratedIntColumn(
      'COO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _gnfMeta = const VerificationMeta('gnf');
  GeneratedIntColumn _gnf;
  @override
  GeneratedIntColumn get gnf => _gnf ??= _constructGnf();
  GeneratedIntColumn _constructGnf() {
    return GeneratedIntColumn(
      'GNF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _grgMeta = const VerificationMeta('grg');
  GeneratedIntColumn _grg;
  @override
  GeneratedIntColumn get grg => _grg ??= _constructGrg();
  GeneratedIntColumn _constructGrg() {
    return GeneratedIntColumn(
      'GRG',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cdcMeta = const VerificationMeta('cdc');
  GeneratedIntColumn _cdc;
  @override
  GeneratedIntColumn get cdc => _cdc ??= _constructCdc();
  GeneratedIntColumn _constructCdc() {
    return GeneratedIntColumn(
      'CDC',
      $tableName,
      true,
    );
  }

  final VerificationMeta _denominacaoMeta =
      const VerificationMeta('denominacao');
  GeneratedTextColumn _denominacao;
  @override
  GeneratedTextColumn get denominacao =>
      _denominacao ??= _constructDenominacao();
  GeneratedTextColumn _constructDenominacao() {
    return GeneratedTextColumn('DENOMINACAO', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _dataEmissaoMeta =
      const VerificationMeta('dataEmissao');
  GeneratedDateTimeColumn _dataEmissao;
  @override
  GeneratedDateTimeColumn get dataEmissao =>
      _dataEmissao ??= _constructDataEmissao();
  GeneratedDateTimeColumn _constructDataEmissao() {
    return GeneratedDateTimeColumn(
      'DATA_EMISSAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaEmissaoMeta =
      const VerificationMeta('horaEmissao');
  GeneratedTextColumn _horaEmissao;
  @override
  GeneratedTextColumn get horaEmissao =>
      _horaEmissao ??= _constructHoraEmissao();
  GeneratedTextColumn _constructHoraEmissao() {
    return GeneratedTextColumn('HORA_EMISSAO', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  GeneratedTextColumn _hashRegistro;
  @override
  GeneratedTextColumn get hashRegistro =>
      _hashRegistro ??= _constructHashRegistro();
  GeneratedTextColumn _constructHashRegistro() {
    return GeneratedTextColumn('HASH_REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvOperador,
        idEcfImpressora,
        idEcfCaixa,
        serieEcf,
        coo,
        gnf,
        grg,
        cdc,
        denominacao,
        dataEmissao,
        horaEmissao,
        hashRegistro
      ];
  @override
  $EcfR06sTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_R06';
  @override
  final String actualTableName = 'ECF_R06';
  @override
  VerificationContext validateIntegrity(Insertable<EcfR06> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_OPERADOR')) {
      context.handle(
          _idPdvOperadorMeta,
          idPdvOperador.isAcceptableOrUnknown(
              data['ID_PDV_OPERADOR'], _idPdvOperadorMeta));
    }
    if (data.containsKey('ID_ECF_IMPRESSORA')) {
      context.handle(
          _idEcfImpressoraMeta,
          idEcfImpressora.isAcceptableOrUnknown(
              data['ID_ECF_IMPRESSORA'], _idEcfImpressoraMeta));
    }
    if (data.containsKey('ID_ECF_CAIXA')) {
      context.handle(
          _idEcfCaixaMeta,
          idEcfCaixa.isAcceptableOrUnknown(
              data['ID_ECF_CAIXA'], _idEcfCaixaMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF'], _serieEcfMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO'], _cooMeta));
    }
    if (data.containsKey('GNF')) {
      context.handle(
          _gnfMeta, gnf.isAcceptableOrUnknown(data['GNF'], _gnfMeta));
    }
    if (data.containsKey('GRG')) {
      context.handle(
          _grgMeta, grg.isAcceptableOrUnknown(data['GRG'], _grgMeta));
    }
    if (data.containsKey('CDC')) {
      context.handle(
          _cdcMeta, cdc.isAcceptableOrUnknown(data['CDC'], _cdcMeta));
    }
    if (data.containsKey('DENOMINACAO')) {
      context.handle(
          _denominacaoMeta,
          denominacao.isAcceptableOrUnknown(
              data['DENOMINACAO'], _denominacaoMeta));
    }
    if (data.containsKey('DATA_EMISSAO')) {
      context.handle(
          _dataEmissaoMeta,
          dataEmissao.isAcceptableOrUnknown(
              data['DATA_EMISSAO'], _dataEmissaoMeta));
    }
    if (data.containsKey('HORA_EMISSAO')) {
      context.handle(
          _horaEmissaoMeta,
          horaEmissao.isAcceptableOrUnknown(
              data['HORA_EMISSAO'], _horaEmissaoMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO'], _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfR06 map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfR06.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfR06sTable createAlias(String alias) {
    return $EcfR06sTable(_db, alias);
  }
}

class EcfR07 extends DataClass implements Insertable<EcfR07> {
  final int id;
  final int idEcfR06;
  final int ccf;
  final String meioPagamento;
  final double valorPagamento;
  final String estorno;
  final double valorEstorno;
  final String hashRegistro;
  EcfR07(
      {@required this.id,
      this.idEcfR06,
      this.ccf,
      this.meioPagamento,
      this.valorPagamento,
      this.estorno,
      this.valorEstorno,
      this.hashRegistro});
  factory EcfR07.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return EcfR07(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idEcfR06:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_R06']),
      ccf: intType.mapFromDatabaseResponse(data['${effectivePrefix}CCF']),
      meioPagamento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}MEIO_PAGAMENTO']),
      valorPagamento: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PAGAMENTO']),
      estorno:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}ESTORNO']),
      valorEstorno: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ESTORNO']),
      hashRegistro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEcfR06 != null) {
      map['ID_ECF_R06'] = Variable<int>(idEcfR06);
    }
    if (!nullToAbsent || ccf != null) {
      map['CCF'] = Variable<int>(ccf);
    }
    if (!nullToAbsent || meioPagamento != null) {
      map['MEIO_PAGAMENTO'] = Variable<String>(meioPagamento);
    }
    if (!nullToAbsent || valorPagamento != null) {
      map['VALOR_PAGAMENTO'] = Variable<double>(valorPagamento);
    }
    if (!nullToAbsent || estorno != null) {
      map['ESTORNO'] = Variable<String>(estorno);
    }
    if (!nullToAbsent || valorEstorno != null) {
      map['VALOR_ESTORNO'] = Variable<double>(valorEstorno);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  EcfR07sCompanion toCompanion(bool nullToAbsent) {
    return EcfR07sCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEcfR06: idEcfR06 == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfR06),
      ccf: ccf == null && nullToAbsent ? const Value.absent() : Value(ccf),
      meioPagamento: meioPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(meioPagamento),
      valorPagamento: valorPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPagamento),
      estorno: estorno == null && nullToAbsent
          ? const Value.absent()
          : Value(estorno),
      valorEstorno: valorEstorno == null && nullToAbsent
          ? const Value.absent()
          : Value(valorEstorno),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory EcfR07.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfR07(
      id: serializer.fromJson<int>(json['id']),
      idEcfR06: serializer.fromJson<int>(json['idEcfR06']),
      ccf: serializer.fromJson<int>(json['ccf']),
      meioPagamento: serializer.fromJson<String>(json['meioPagamento']),
      valorPagamento: serializer.fromJson<double>(json['valorPagamento']),
      estorno: serializer.fromJson<String>(json['estorno']),
      valorEstorno: serializer.fromJson<double>(json['valorEstorno']),
      hashRegistro: serializer.fromJson<String>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idEcfR06': serializer.toJson<int>(idEcfR06),
      'ccf': serializer.toJson<int>(ccf),
      'meioPagamento': serializer.toJson<String>(meioPagamento),
      'valorPagamento': serializer.toJson<double>(valorPagamento),
      'estorno': serializer.toJson<String>(estorno),
      'valorEstorno': serializer.toJson<double>(valorEstorno),
      'hashRegistro': serializer.toJson<String>(hashRegistro),
    };
  }

  EcfR07 copyWith(
          {int id,
          int idEcfR06,
          int ccf,
          String meioPagamento,
          double valorPagamento,
          String estorno,
          double valorEstorno,
          String hashRegistro}) =>
      EcfR07(
        id: id ?? this.id,
        idEcfR06: idEcfR06 ?? this.idEcfR06,
        ccf: ccf ?? this.ccf,
        meioPagamento: meioPagamento ?? this.meioPagamento,
        valorPagamento: valorPagamento ?? this.valorPagamento,
        estorno: estorno ?? this.estorno,
        valorEstorno: valorEstorno ?? this.valorEstorno,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('EcfR07(')
          ..write('id: $id, ')
          ..write('idEcfR06: $idEcfR06, ')
          ..write('ccf: $ccf, ')
          ..write('meioPagamento: $meioPagamento, ')
          ..write('valorPagamento: $valorPagamento, ')
          ..write('estorno: $estorno, ')
          ..write('valorEstorno: $valorEstorno, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idEcfR06.hashCode,
          $mrjc(
              ccf.hashCode,
              $mrjc(
                  meioPagamento.hashCode,
                  $mrjc(
                      valorPagamento.hashCode,
                      $mrjc(
                          estorno.hashCode,
                          $mrjc(valorEstorno.hashCode,
                              hashRegistro.hashCode))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfR07 &&
          other.id == this.id &&
          other.idEcfR06 == this.idEcfR06 &&
          other.ccf == this.ccf &&
          other.meioPagamento == this.meioPagamento &&
          other.valorPagamento == this.valorPagamento &&
          other.estorno == this.estorno &&
          other.valorEstorno == this.valorEstorno &&
          other.hashRegistro == this.hashRegistro);
}

class EcfR07sCompanion extends UpdateCompanion<EcfR07> {
  final Value<int> id;
  final Value<int> idEcfR06;
  final Value<int> ccf;
  final Value<String> meioPagamento;
  final Value<double> valorPagamento;
  final Value<String> estorno;
  final Value<double> valorEstorno;
  final Value<String> hashRegistro;
  const EcfR07sCompanion({
    this.id = const Value.absent(),
    this.idEcfR06 = const Value.absent(),
    this.ccf = const Value.absent(),
    this.meioPagamento = const Value.absent(),
    this.valorPagamento = const Value.absent(),
    this.estorno = const Value.absent(),
    this.valorEstorno = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  EcfR07sCompanion.insert({
    this.id = const Value.absent(),
    this.idEcfR06 = const Value.absent(),
    this.ccf = const Value.absent(),
    this.meioPagamento = const Value.absent(),
    this.valorPagamento = const Value.absent(),
    this.estorno = const Value.absent(),
    this.valorEstorno = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<EcfR07> custom({
    Expression<int> id,
    Expression<int> idEcfR06,
    Expression<int> ccf,
    Expression<String> meioPagamento,
    Expression<double> valorPagamento,
    Expression<String> estorno,
    Expression<double> valorEstorno,
    Expression<String> hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEcfR06 != null) 'ID_ECF_R06': idEcfR06,
      if (ccf != null) 'CCF': ccf,
      if (meioPagamento != null) 'MEIO_PAGAMENTO': meioPagamento,
      if (valorPagamento != null) 'VALOR_PAGAMENTO': valorPagamento,
      if (estorno != null) 'ESTORNO': estorno,
      if (valorEstorno != null) 'VALOR_ESTORNO': valorEstorno,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  EcfR07sCompanion copyWith(
      {Value<int> id,
      Value<int> idEcfR06,
      Value<int> ccf,
      Value<String> meioPagamento,
      Value<double> valorPagamento,
      Value<String> estorno,
      Value<double> valorEstorno,
      Value<String> hashRegistro}) {
    return EcfR07sCompanion(
      id: id ?? this.id,
      idEcfR06: idEcfR06 ?? this.idEcfR06,
      ccf: ccf ?? this.ccf,
      meioPagamento: meioPagamento ?? this.meioPagamento,
      valorPagamento: valorPagamento ?? this.valorPagamento,
      estorno: estorno ?? this.estorno,
      valorEstorno: valorEstorno ?? this.valorEstorno,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEcfR06.present) {
      map['ID_ECF_R06'] = Variable<int>(idEcfR06.value);
    }
    if (ccf.present) {
      map['CCF'] = Variable<int>(ccf.value);
    }
    if (meioPagamento.present) {
      map['MEIO_PAGAMENTO'] = Variable<String>(meioPagamento.value);
    }
    if (valorPagamento.present) {
      map['VALOR_PAGAMENTO'] = Variable<double>(valorPagamento.value);
    }
    if (estorno.present) {
      map['ESTORNO'] = Variable<String>(estorno.value);
    }
    if (valorEstorno.present) {
      map['VALOR_ESTORNO'] = Variable<double>(valorEstorno.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfR07sCompanion(')
          ..write('id: $id, ')
          ..write('idEcfR06: $idEcfR06, ')
          ..write('ccf: $ccf, ')
          ..write('meioPagamento: $meioPagamento, ')
          ..write('valorPagamento: $valorPagamento, ')
          ..write('estorno: $estorno, ')
          ..write('valorEstorno: $valorEstorno, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $EcfR07sTable extends EcfR07s with TableInfo<$EcfR07sTable, EcfR07> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfR07sTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idEcfR06Meta = const VerificationMeta('idEcfR06');
  GeneratedIntColumn _idEcfR06;
  @override
  GeneratedIntColumn get idEcfR06 => _idEcfR06 ??= _constructIdEcfR06();
  GeneratedIntColumn _constructIdEcfR06() {
    return GeneratedIntColumn('ID_ECF_R06', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_R06(ID)');
  }

  final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
  GeneratedIntColumn _ccf;
  @override
  GeneratedIntColumn get ccf => _ccf ??= _constructCcf();
  GeneratedIntColumn _constructCcf() {
    return GeneratedIntColumn(
      'CCF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _meioPagamentoMeta =
      const VerificationMeta('meioPagamento');
  GeneratedTextColumn _meioPagamento;
  @override
  GeneratedTextColumn get meioPagamento =>
      _meioPagamento ??= _constructMeioPagamento();
  GeneratedTextColumn _constructMeioPagamento() {
    return GeneratedTextColumn('MEIO_PAGAMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _valorPagamentoMeta =
      const VerificationMeta('valorPagamento');
  GeneratedRealColumn _valorPagamento;
  @override
  GeneratedRealColumn get valorPagamento =>
      _valorPagamento ??= _constructValorPagamento();
  GeneratedRealColumn _constructValorPagamento() {
    return GeneratedRealColumn(
      'VALOR_PAGAMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _estornoMeta = const VerificationMeta('estorno');
  GeneratedTextColumn _estorno;
  @override
  GeneratedTextColumn get estorno => _estorno ??= _constructEstorno();
  GeneratedTextColumn _constructEstorno() {
    return GeneratedTextColumn('ESTORNO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _valorEstornoMeta =
      const VerificationMeta('valorEstorno');
  GeneratedRealColumn _valorEstorno;
  @override
  GeneratedRealColumn get valorEstorno =>
      _valorEstorno ??= _constructValorEstorno();
  GeneratedRealColumn _constructValorEstorno() {
    return GeneratedRealColumn(
      'VALOR_ESTORNO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  GeneratedTextColumn _hashRegistro;
  @override
  GeneratedTextColumn get hashRegistro =>
      _hashRegistro ??= _constructHashRegistro();
  GeneratedTextColumn _constructHashRegistro() {
    return GeneratedTextColumn('HASH_REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idEcfR06,
        ccf,
        meioPagamento,
        valorPagamento,
        estorno,
        valorEstorno,
        hashRegistro
      ];
  @override
  $EcfR07sTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_R07';
  @override
  final String actualTableName = 'ECF_R07';
  @override
  VerificationContext validateIntegrity(Insertable<EcfR07> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_ECF_R06')) {
      context.handle(_idEcfR06Meta,
          idEcfR06.isAcceptableOrUnknown(data['ID_ECF_R06'], _idEcfR06Meta));
    }
    if (data.containsKey('CCF')) {
      context.handle(
          _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF'], _ccfMeta));
    }
    if (data.containsKey('MEIO_PAGAMENTO')) {
      context.handle(
          _meioPagamentoMeta,
          meioPagamento.isAcceptableOrUnknown(
              data['MEIO_PAGAMENTO'], _meioPagamentoMeta));
    }
    if (data.containsKey('VALOR_PAGAMENTO')) {
      context.handle(
          _valorPagamentoMeta,
          valorPagamento.isAcceptableOrUnknown(
              data['VALOR_PAGAMENTO'], _valorPagamentoMeta));
    }
    if (data.containsKey('ESTORNO')) {
      context.handle(_estornoMeta,
          estorno.isAcceptableOrUnknown(data['ESTORNO'], _estornoMeta));
    }
    if (data.containsKey('VALOR_ESTORNO')) {
      context.handle(
          _valorEstornoMeta,
          valorEstorno.isAcceptableOrUnknown(
              data['VALOR_ESTORNO'], _valorEstornoMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO'], _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfR07 map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfR07.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfR07sTable createAlias(String alias) {
    return $EcfR07sTable(_db, alias);
  }
}

class EcfRecebimentoNaoFiscal extends DataClass
    implements Insertable<EcfRecebimentoNaoFiscal> {
  final int id;
  final int idPdvMovimento;
  final DateTime dataRecebimento;
  final String descricao;
  final double valor;
  EcfRecebimentoNaoFiscal(
      {@required this.id,
      this.idPdvMovimento,
      this.dataRecebimento,
      this.descricao,
      this.valor});
  factory EcfRecebimentoNaoFiscal.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return EcfRecebimentoNaoFiscal(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvMovimento: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      dataRecebimento: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_RECEBIMENTO']),
      descricao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
      valor:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || dataRecebimento != null) {
      map['DATA_RECEBIMENTO'] = Variable<DateTime>(dataRecebimento);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    return map;
  }

  EcfRecebimentoNaoFiscalsCompanion toCompanion(bool nullToAbsent) {
    return EcfRecebimentoNaoFiscalsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      dataRecebimento: dataRecebimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataRecebimento),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
    );
  }

  factory EcfRecebimentoNaoFiscal.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfRecebimentoNaoFiscal(
      id: serializer.fromJson<int>(json['id']),
      idPdvMovimento: serializer.fromJson<int>(json['idPdvMovimento']),
      dataRecebimento: serializer.fromJson<DateTime>(json['dataRecebimento']),
      descricao: serializer.fromJson<String>(json['descricao']),
      valor: serializer.fromJson<double>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvMovimento': serializer.toJson<int>(idPdvMovimento),
      'dataRecebimento': serializer.toJson<DateTime>(dataRecebimento),
      'descricao': serializer.toJson<String>(descricao),
      'valor': serializer.toJson<double>(valor),
    };
  }

  EcfRecebimentoNaoFiscal copyWith(
          {int id,
          int idPdvMovimento,
          DateTime dataRecebimento,
          String descricao,
          double valor}) =>
      EcfRecebimentoNaoFiscal(
        id: id ?? this.id,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        dataRecebimento: dataRecebimento ?? this.dataRecebimento,
        descricao: descricao ?? this.descricao,
        valor: valor ?? this.valor,
      );
  @override
  String toString() {
    return (StringBuffer('EcfRecebimentoNaoFiscal(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataRecebimento: $dataRecebimento, ')
          ..write('descricao: $descricao, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idPdvMovimento.hashCode,
          $mrjc(dataRecebimento.hashCode,
              $mrjc(descricao.hashCode, valor.hashCode)))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfRecebimentoNaoFiscal &&
          other.id == this.id &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.dataRecebimento == this.dataRecebimento &&
          other.descricao == this.descricao &&
          other.valor == this.valor);
}

class EcfRecebimentoNaoFiscalsCompanion
    extends UpdateCompanion<EcfRecebimentoNaoFiscal> {
  final Value<int> id;
  final Value<int> idPdvMovimento;
  final Value<DateTime> dataRecebimento;
  final Value<String> descricao;
  final Value<double> valor;
  const EcfRecebimentoNaoFiscalsCompanion({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataRecebimento = const Value.absent(),
    this.descricao = const Value.absent(),
    this.valor = const Value.absent(),
  });
  EcfRecebimentoNaoFiscalsCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataRecebimento = const Value.absent(),
    this.descricao = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<EcfRecebimentoNaoFiscal> custom({
    Expression<int> id,
    Expression<int> idPdvMovimento,
    Expression<DateTime> dataRecebimento,
    Expression<String> descricao,
    Expression<double> valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (dataRecebimento != null) 'DATA_RECEBIMENTO': dataRecebimento,
      if (descricao != null) 'DESCRICAO': descricao,
      if (valor != null) 'VALOR': valor,
    });
  }

  EcfRecebimentoNaoFiscalsCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvMovimento,
      Value<DateTime> dataRecebimento,
      Value<String> descricao,
      Value<double> valor}) {
    return EcfRecebimentoNaoFiscalsCompanion(
      id: id ?? this.id,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      dataRecebimento: dataRecebimento ?? this.dataRecebimento,
      descricao: descricao ?? this.descricao,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (dataRecebimento.present) {
      map['DATA_RECEBIMENTO'] = Variable<DateTime>(dataRecebimento.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfRecebimentoNaoFiscalsCompanion(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataRecebimento: $dataRecebimento, ')
          ..write('descricao: $descricao, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $EcfRecebimentoNaoFiscalsTable extends EcfRecebimentoNaoFiscals
    with TableInfo<$EcfRecebimentoNaoFiscalsTable, EcfRecebimentoNaoFiscal> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfRecebimentoNaoFiscalsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  GeneratedIntColumn _idPdvMovimento;
  @override
  GeneratedIntColumn get idPdvMovimento =>
      _idPdvMovimento ??= _constructIdPdvMovimento();
  GeneratedIntColumn _constructIdPdvMovimento() {
    return GeneratedIntColumn('ID_PDV_MOVIMENTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  }

  final VerificationMeta _dataRecebimentoMeta =
      const VerificationMeta('dataRecebimento');
  GeneratedDateTimeColumn _dataRecebimento;
  @override
  GeneratedDateTimeColumn get dataRecebimento =>
      _dataRecebimento ??= _constructDataRecebimento();
  GeneratedDateTimeColumn _constructDataRecebimento() {
    return GeneratedDateTimeColumn(
      'DATA_RECEBIMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  GeneratedTextColumn _descricao;
  @override
  GeneratedTextColumn get descricao => _descricao ??= _constructDescricao();
  GeneratedTextColumn _constructDescricao() {
    return GeneratedTextColumn('DESCRICAO', $tableName, true,
        minTextLength: 1, maxTextLength: 50);
  }

  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  GeneratedRealColumn _valor;
  @override
  GeneratedRealColumn get valor => _valor ??= _constructValor();
  GeneratedRealColumn _constructValor() {
    return GeneratedRealColumn(
      'VALOR',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, idPdvMovimento, dataRecebimento, descricao, valor];
  @override
  $EcfRecebimentoNaoFiscalsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_RECEBIMENTO_NAO_FISCAL';
  @override
  final String actualTableName = 'ECF_RECEBIMENTO_NAO_FISCAL';
  @override
  VerificationContext validateIntegrity(
      Insertable<EcfRecebimentoNaoFiscal> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO'], _idPdvMovimentoMeta));
    }
    if (data.containsKey('DATA_RECEBIMENTO')) {
      context.handle(
          _dataRecebimentoMeta,
          dataRecebimento.isAcceptableOrUnknown(
              data['DATA_RECEBIMENTO'], _dataRecebimentoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO'], _descricaoMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR'], _valorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfRecebimentoNaoFiscal map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfRecebimentoNaoFiscal.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfRecebimentoNaoFiscalsTable createAlias(String alias) {
    return $EcfRecebimentoNaoFiscalsTable(_db, alias);
  }
}

class EcfRelatorioGerencial extends DataClass
    implements Insertable<EcfRelatorioGerencial> {
  final int id;
  final int idPdvConfiguracao;
  final int x;
  final int meiosPagamento;
  final int davEmitidos;
  final int identificacaoPaf;
  final int parametrosConfiguracao;
  final int outros;
  EcfRelatorioGerencial(
      {@required this.id,
      this.idPdvConfiguracao,
      this.x,
      this.meiosPagamento,
      this.davEmitidos,
      this.identificacaoPaf,
      this.parametrosConfiguracao,
      this.outros});
  factory EcfRelatorioGerencial.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    return EcfRelatorioGerencial(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvConfiguracao: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_PDV_CONFIGURACAO']),
      x: intType.mapFromDatabaseResponse(data['${effectivePrefix}X']),
      meiosPagamento: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}MEIOS_PAGAMENTO']),
      davEmitidos: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}DAV_EMITIDOS']),
      identificacaoPaf: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}IDENTIFICACAO_PAF']),
      parametrosConfiguracao: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}PARAMETROS_CONFIGURACAO']),
      outros: intType.mapFromDatabaseResponse(data['${effectivePrefix}OUTROS']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvConfiguracao != null) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao);
    }
    if (!nullToAbsent || x != null) {
      map['X'] = Variable<int>(x);
    }
    if (!nullToAbsent || meiosPagamento != null) {
      map['MEIOS_PAGAMENTO'] = Variable<int>(meiosPagamento);
    }
    if (!nullToAbsent || davEmitidos != null) {
      map['DAV_EMITIDOS'] = Variable<int>(davEmitidos);
    }
    if (!nullToAbsent || identificacaoPaf != null) {
      map['IDENTIFICACAO_PAF'] = Variable<int>(identificacaoPaf);
    }
    if (!nullToAbsent || parametrosConfiguracao != null) {
      map['PARAMETROS_CONFIGURACAO'] = Variable<int>(parametrosConfiguracao);
    }
    if (!nullToAbsent || outros != null) {
      map['OUTROS'] = Variable<int>(outros);
    }
    return map;
  }

  EcfRelatorioGerencialsCompanion toCompanion(bool nullToAbsent) {
    return EcfRelatorioGerencialsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvConfiguracao: idPdvConfiguracao == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvConfiguracao),
      x: x == null && nullToAbsent ? const Value.absent() : Value(x),
      meiosPagamento: meiosPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(meiosPagamento),
      davEmitidos: davEmitidos == null && nullToAbsent
          ? const Value.absent()
          : Value(davEmitidos),
      identificacaoPaf: identificacaoPaf == null && nullToAbsent
          ? const Value.absent()
          : Value(identificacaoPaf),
      parametrosConfiguracao: parametrosConfiguracao == null && nullToAbsent
          ? const Value.absent()
          : Value(parametrosConfiguracao),
      outros:
          outros == null && nullToAbsent ? const Value.absent() : Value(outros),
    );
  }

  factory EcfRelatorioGerencial.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfRelatorioGerencial(
      id: serializer.fromJson<int>(json['id']),
      idPdvConfiguracao: serializer.fromJson<int>(json['idPdvConfiguracao']),
      x: serializer.fromJson<int>(json['x']),
      meiosPagamento: serializer.fromJson<int>(json['meiosPagamento']),
      davEmitidos: serializer.fromJson<int>(json['davEmitidos']),
      identificacaoPaf: serializer.fromJson<int>(json['identificacaoPaf']),
      parametrosConfiguracao:
          serializer.fromJson<int>(json['parametrosConfiguracao']),
      outros: serializer.fromJson<int>(json['outros']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvConfiguracao': serializer.toJson<int>(idPdvConfiguracao),
      'x': serializer.toJson<int>(x),
      'meiosPagamento': serializer.toJson<int>(meiosPagamento),
      'davEmitidos': serializer.toJson<int>(davEmitidos),
      'identificacaoPaf': serializer.toJson<int>(identificacaoPaf),
      'parametrosConfiguracao': serializer.toJson<int>(parametrosConfiguracao),
      'outros': serializer.toJson<int>(outros),
    };
  }

  EcfRelatorioGerencial copyWith(
          {int id,
          int idPdvConfiguracao,
          int x,
          int meiosPagamento,
          int davEmitidos,
          int identificacaoPaf,
          int parametrosConfiguracao,
          int outros}) =>
      EcfRelatorioGerencial(
        id: id ?? this.id,
        idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
        x: x ?? this.x,
        meiosPagamento: meiosPagamento ?? this.meiosPagamento,
        davEmitidos: davEmitidos ?? this.davEmitidos,
        identificacaoPaf: identificacaoPaf ?? this.identificacaoPaf,
        parametrosConfiguracao:
            parametrosConfiguracao ?? this.parametrosConfiguracao,
        outros: outros ?? this.outros,
      );
  @override
  String toString() {
    return (StringBuffer('EcfRelatorioGerencial(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('x: $x, ')
          ..write('meiosPagamento: $meiosPagamento, ')
          ..write('davEmitidos: $davEmitidos, ')
          ..write('identificacaoPaf: $identificacaoPaf, ')
          ..write('parametrosConfiguracao: $parametrosConfiguracao, ')
          ..write('outros: $outros')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idPdvConfiguracao.hashCode,
          $mrjc(
              x.hashCode,
              $mrjc(
                  meiosPagamento.hashCode,
                  $mrjc(
                      davEmitidos.hashCode,
                      $mrjc(
                          identificacaoPaf.hashCode,
                          $mrjc(parametrosConfiguracao.hashCode,
                              outros.hashCode))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfRelatorioGerencial &&
          other.id == this.id &&
          other.idPdvConfiguracao == this.idPdvConfiguracao &&
          other.x == this.x &&
          other.meiosPagamento == this.meiosPagamento &&
          other.davEmitidos == this.davEmitidos &&
          other.identificacaoPaf == this.identificacaoPaf &&
          other.parametrosConfiguracao == this.parametrosConfiguracao &&
          other.outros == this.outros);
}

class EcfRelatorioGerencialsCompanion
    extends UpdateCompanion<EcfRelatorioGerencial> {
  final Value<int> id;
  final Value<int> idPdvConfiguracao;
  final Value<int> x;
  final Value<int> meiosPagamento;
  final Value<int> davEmitidos;
  final Value<int> identificacaoPaf;
  final Value<int> parametrosConfiguracao;
  final Value<int> outros;
  const EcfRelatorioGerencialsCompanion({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.x = const Value.absent(),
    this.meiosPagamento = const Value.absent(),
    this.davEmitidos = const Value.absent(),
    this.identificacaoPaf = const Value.absent(),
    this.parametrosConfiguracao = const Value.absent(),
    this.outros = const Value.absent(),
  });
  EcfRelatorioGerencialsCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.x = const Value.absent(),
    this.meiosPagamento = const Value.absent(),
    this.davEmitidos = const Value.absent(),
    this.identificacaoPaf = const Value.absent(),
    this.parametrosConfiguracao = const Value.absent(),
    this.outros = const Value.absent(),
  });
  static Insertable<EcfRelatorioGerencial> custom({
    Expression<int> id,
    Expression<int> idPdvConfiguracao,
    Expression<int> x,
    Expression<int> meiosPagamento,
    Expression<int> davEmitidos,
    Expression<int> identificacaoPaf,
    Expression<int> parametrosConfiguracao,
    Expression<int> outros,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvConfiguracao != null) 'ID_PDV_CONFIGURACAO': idPdvConfiguracao,
      if (x != null) 'X': x,
      if (meiosPagamento != null) 'MEIOS_PAGAMENTO': meiosPagamento,
      if (davEmitidos != null) 'DAV_EMITIDOS': davEmitidos,
      if (identificacaoPaf != null) 'IDENTIFICACAO_PAF': identificacaoPaf,
      if (parametrosConfiguracao != null)
        'PARAMETROS_CONFIGURACAO': parametrosConfiguracao,
      if (outros != null) 'OUTROS': outros,
    });
  }

  EcfRelatorioGerencialsCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvConfiguracao,
      Value<int> x,
      Value<int> meiosPagamento,
      Value<int> davEmitidos,
      Value<int> identificacaoPaf,
      Value<int> parametrosConfiguracao,
      Value<int> outros}) {
    return EcfRelatorioGerencialsCompanion(
      id: id ?? this.id,
      idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
      x: x ?? this.x,
      meiosPagamento: meiosPagamento ?? this.meiosPagamento,
      davEmitidos: davEmitidos ?? this.davEmitidos,
      identificacaoPaf: identificacaoPaf ?? this.identificacaoPaf,
      parametrosConfiguracao:
          parametrosConfiguracao ?? this.parametrosConfiguracao,
      outros: outros ?? this.outros,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvConfiguracao.present) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao.value);
    }
    if (x.present) {
      map['X'] = Variable<int>(x.value);
    }
    if (meiosPagamento.present) {
      map['MEIOS_PAGAMENTO'] = Variable<int>(meiosPagamento.value);
    }
    if (davEmitidos.present) {
      map['DAV_EMITIDOS'] = Variable<int>(davEmitidos.value);
    }
    if (identificacaoPaf.present) {
      map['IDENTIFICACAO_PAF'] = Variable<int>(identificacaoPaf.value);
    }
    if (parametrosConfiguracao.present) {
      map['PARAMETROS_CONFIGURACAO'] =
          Variable<int>(parametrosConfiguracao.value);
    }
    if (outros.present) {
      map['OUTROS'] = Variable<int>(outros.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfRelatorioGerencialsCompanion(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('x: $x, ')
          ..write('meiosPagamento: $meiosPagamento, ')
          ..write('davEmitidos: $davEmitidos, ')
          ..write('identificacaoPaf: $identificacaoPaf, ')
          ..write('parametrosConfiguracao: $parametrosConfiguracao, ')
          ..write('outros: $outros')
          ..write(')'))
        .toString();
  }
}

class $EcfRelatorioGerencialsTable extends EcfRelatorioGerencials
    with TableInfo<$EcfRelatorioGerencialsTable, EcfRelatorioGerencial> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfRelatorioGerencialsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvConfiguracaoMeta =
      const VerificationMeta('idPdvConfiguracao');
  GeneratedIntColumn _idPdvConfiguracao;
  @override
  GeneratedIntColumn get idPdvConfiguracao =>
      _idPdvConfiguracao ??= _constructIdPdvConfiguracao();
  GeneratedIntColumn _constructIdPdvConfiguracao() {
    return GeneratedIntColumn('ID_PDV_CONFIGURACAO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_CONFIGURACAO(ID)');
  }

  final VerificationMeta _xMeta = const VerificationMeta('x');
  GeneratedIntColumn _x;
  @override
  GeneratedIntColumn get x => _x ??= _constructX();
  GeneratedIntColumn _constructX() {
    return GeneratedIntColumn(
      'X',
      $tableName,
      true,
    );
  }

  final VerificationMeta _meiosPagamentoMeta =
      const VerificationMeta('meiosPagamento');
  GeneratedIntColumn _meiosPagamento;
  @override
  GeneratedIntColumn get meiosPagamento =>
      _meiosPagamento ??= _constructMeiosPagamento();
  GeneratedIntColumn _constructMeiosPagamento() {
    return GeneratedIntColumn(
      'MEIOS_PAGAMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _davEmitidosMeta =
      const VerificationMeta('davEmitidos');
  GeneratedIntColumn _davEmitidos;
  @override
  GeneratedIntColumn get davEmitidos =>
      _davEmitidos ??= _constructDavEmitidos();
  GeneratedIntColumn _constructDavEmitidos() {
    return GeneratedIntColumn(
      'DAV_EMITIDOS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _identificacaoPafMeta =
      const VerificationMeta('identificacaoPaf');
  GeneratedIntColumn _identificacaoPaf;
  @override
  GeneratedIntColumn get identificacaoPaf =>
      _identificacaoPaf ??= _constructIdentificacaoPaf();
  GeneratedIntColumn _constructIdentificacaoPaf() {
    return GeneratedIntColumn(
      'IDENTIFICACAO_PAF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _parametrosConfiguracaoMeta =
      const VerificationMeta('parametrosConfiguracao');
  GeneratedIntColumn _parametrosConfiguracao;
  @override
  GeneratedIntColumn get parametrosConfiguracao =>
      _parametrosConfiguracao ??= _constructParametrosConfiguracao();
  GeneratedIntColumn _constructParametrosConfiguracao() {
    return GeneratedIntColumn(
      'PARAMETROS_CONFIGURACAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _outrosMeta = const VerificationMeta('outros');
  GeneratedIntColumn _outros;
  @override
  GeneratedIntColumn get outros => _outros ??= _constructOutros();
  GeneratedIntColumn _constructOutros() {
    return GeneratedIntColumn(
      'OUTROS',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvConfiguracao,
        x,
        meiosPagamento,
        davEmitidos,
        identificacaoPaf,
        parametrosConfiguracao,
        outros
      ];
  @override
  $EcfRelatorioGerencialsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_RELATORIO_GERENCIAL';
  @override
  final String actualTableName = 'ECF_RELATORIO_GERENCIAL';
  @override
  VerificationContext validateIntegrity(
      Insertable<EcfRelatorioGerencial> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_CONFIGURACAO')) {
      context.handle(
          _idPdvConfiguracaoMeta,
          idPdvConfiguracao.isAcceptableOrUnknown(
              data['ID_PDV_CONFIGURACAO'], _idPdvConfiguracaoMeta));
    }
    if (data.containsKey('X')) {
      context.handle(_xMeta, x.isAcceptableOrUnknown(data['X'], _xMeta));
    }
    if (data.containsKey('MEIOS_PAGAMENTO')) {
      context.handle(
          _meiosPagamentoMeta,
          meiosPagamento.isAcceptableOrUnknown(
              data['MEIOS_PAGAMENTO'], _meiosPagamentoMeta));
    }
    if (data.containsKey('DAV_EMITIDOS')) {
      context.handle(
          _davEmitidosMeta,
          davEmitidos.isAcceptableOrUnknown(
              data['DAV_EMITIDOS'], _davEmitidosMeta));
    }
    if (data.containsKey('IDENTIFICACAO_PAF')) {
      context.handle(
          _identificacaoPafMeta,
          identificacaoPaf.isAcceptableOrUnknown(
              data['IDENTIFICACAO_PAF'], _identificacaoPafMeta));
    }
    if (data.containsKey('PARAMETROS_CONFIGURACAO')) {
      context.handle(
          _parametrosConfiguracaoMeta,
          parametrosConfiguracao.isAcceptableOrUnknown(
              data['PARAMETROS_CONFIGURACAO'], _parametrosConfiguracaoMeta));
    }
    if (data.containsKey('OUTROS')) {
      context.handle(_outrosMeta,
          outros.isAcceptableOrUnknown(data['OUTROS'], _outrosMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfRelatorioGerencial map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfRelatorioGerencial.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfRelatorioGerencialsTable createAlias(String alias) {
    return $EcfRelatorioGerencialsTable(_db, alias);
  }
}

class EcfSintegra60A extends DataClass implements Insertable<EcfSintegra60A> {
  final int id;
  final int idEcfSintegra60M;
  final String situacaoTributaria;
  final double valor;
  EcfSintegra60A(
      {@required this.id,
      this.idEcfSintegra60M,
      this.situacaoTributaria,
      this.valor});
  factory EcfSintegra60A.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return EcfSintegra60A(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idEcfSintegra60M: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_ECF_SINTEGRA_60M']),
      situacaoTributaria: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}SITUACAO_TRIBUTARIA']),
      valor:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEcfSintegra60M != null) {
      map['ID_ECF_SINTEGRA_60M'] = Variable<int>(idEcfSintegra60M);
    }
    if (!nullToAbsent || situacaoTributaria != null) {
      map['SITUACAO_TRIBUTARIA'] = Variable<String>(situacaoTributaria);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    return map;
  }

  EcfSintegra60AsCompanion toCompanion(bool nullToAbsent) {
    return EcfSintegra60AsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEcfSintegra60M: idEcfSintegra60M == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfSintegra60M),
      situacaoTributaria: situacaoTributaria == null && nullToAbsent
          ? const Value.absent()
          : Value(situacaoTributaria),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
    );
  }

  factory EcfSintegra60A.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfSintegra60A(
      id: serializer.fromJson<int>(json['id']),
      idEcfSintegra60M: serializer.fromJson<int>(json['idEcfSintegra60M']),
      situacaoTributaria:
          serializer.fromJson<String>(json['situacaoTributaria']),
      valor: serializer.fromJson<double>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idEcfSintegra60M': serializer.toJson<int>(idEcfSintegra60M),
      'situacaoTributaria': serializer.toJson<String>(situacaoTributaria),
      'valor': serializer.toJson<double>(valor),
    };
  }

  EcfSintegra60A copyWith(
          {int id,
          int idEcfSintegra60M,
          String situacaoTributaria,
          double valor}) =>
      EcfSintegra60A(
        id: id ?? this.id,
        idEcfSintegra60M: idEcfSintegra60M ?? this.idEcfSintegra60M,
        situacaoTributaria: situacaoTributaria ?? this.situacaoTributaria,
        valor: valor ?? this.valor,
      );
  @override
  String toString() {
    return (StringBuffer('EcfSintegra60A(')
          ..write('id: $id, ')
          ..write('idEcfSintegra60M: $idEcfSintegra60M, ')
          ..write('situacaoTributaria: $situacaoTributaria, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(idEcfSintegra60M.hashCode,
          $mrjc(situacaoTributaria.hashCode, valor.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfSintegra60A &&
          other.id == this.id &&
          other.idEcfSintegra60M == this.idEcfSintegra60M &&
          other.situacaoTributaria == this.situacaoTributaria &&
          other.valor == this.valor);
}

class EcfSintegra60AsCompanion extends UpdateCompanion<EcfSintegra60A> {
  final Value<int> id;
  final Value<int> idEcfSintegra60M;
  final Value<String> situacaoTributaria;
  final Value<double> valor;
  const EcfSintegra60AsCompanion({
    this.id = const Value.absent(),
    this.idEcfSintegra60M = const Value.absent(),
    this.situacaoTributaria = const Value.absent(),
    this.valor = const Value.absent(),
  });
  EcfSintegra60AsCompanion.insert({
    this.id = const Value.absent(),
    this.idEcfSintegra60M = const Value.absent(),
    this.situacaoTributaria = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<EcfSintegra60A> custom({
    Expression<int> id,
    Expression<int> idEcfSintegra60M,
    Expression<String> situacaoTributaria,
    Expression<double> valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEcfSintegra60M != null) 'ID_ECF_SINTEGRA_60M': idEcfSintegra60M,
      if (situacaoTributaria != null) 'SITUACAO_TRIBUTARIA': situacaoTributaria,
      if (valor != null) 'VALOR': valor,
    });
  }

  EcfSintegra60AsCompanion copyWith(
      {Value<int> id,
      Value<int> idEcfSintegra60M,
      Value<String> situacaoTributaria,
      Value<double> valor}) {
    return EcfSintegra60AsCompanion(
      id: id ?? this.id,
      idEcfSintegra60M: idEcfSintegra60M ?? this.idEcfSintegra60M,
      situacaoTributaria: situacaoTributaria ?? this.situacaoTributaria,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEcfSintegra60M.present) {
      map['ID_ECF_SINTEGRA_60M'] = Variable<int>(idEcfSintegra60M.value);
    }
    if (situacaoTributaria.present) {
      map['SITUACAO_TRIBUTARIA'] = Variable<String>(situacaoTributaria.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfSintegra60AsCompanion(')
          ..write('id: $id, ')
          ..write('idEcfSintegra60M: $idEcfSintegra60M, ')
          ..write('situacaoTributaria: $situacaoTributaria, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $EcfSintegra60AsTable extends EcfSintegra60As
    with TableInfo<$EcfSintegra60AsTable, EcfSintegra60A> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfSintegra60AsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idEcfSintegra60MMeta =
      const VerificationMeta('idEcfSintegra60M');
  GeneratedIntColumn _idEcfSintegra60M;
  @override
  GeneratedIntColumn get idEcfSintegra60M =>
      _idEcfSintegra60M ??= _constructIdEcfSintegra60M();
  GeneratedIntColumn _constructIdEcfSintegra60M() {
    return GeneratedIntColumn('ID_ECF_SINTEGRA_60M', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_SINTEGRA_60M(ID)');
  }

  final VerificationMeta _situacaoTributariaMeta =
      const VerificationMeta('situacaoTributaria');
  GeneratedTextColumn _situacaoTributaria;
  @override
  GeneratedTextColumn get situacaoTributaria =>
      _situacaoTributaria ??= _constructSituacaoTributaria();
  GeneratedTextColumn _constructSituacaoTributaria() {
    return GeneratedTextColumn('SITUACAO_TRIBUTARIA', $tableName, true,
        minTextLength: 1, maxTextLength: 4);
  }

  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  GeneratedRealColumn _valor;
  @override
  GeneratedRealColumn get valor => _valor ??= _constructValor();
  GeneratedRealColumn _constructValor() {
    return GeneratedRealColumn(
      'VALOR',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, idEcfSintegra60M, situacaoTributaria, valor];
  @override
  $EcfSintegra60AsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_SINTEGRA_60A';
  @override
  final String actualTableName = 'ECF_SINTEGRA_60A';
  @override
  VerificationContext validateIntegrity(Insertable<EcfSintegra60A> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_ECF_SINTEGRA_60M')) {
      context.handle(
          _idEcfSintegra60MMeta,
          idEcfSintegra60M.isAcceptableOrUnknown(
              data['ID_ECF_SINTEGRA_60M'], _idEcfSintegra60MMeta));
    }
    if (data.containsKey('SITUACAO_TRIBUTARIA')) {
      context.handle(
          _situacaoTributariaMeta,
          situacaoTributaria.isAcceptableOrUnknown(
              data['SITUACAO_TRIBUTARIA'], _situacaoTributariaMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR'], _valorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfSintegra60A map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfSintegra60A.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfSintegra60AsTable createAlias(String alias) {
    return $EcfSintegra60AsTable(_db, alias);
  }
}

class EcfSintegra60M extends DataClass implements Insertable<EcfSintegra60M> {
  final int id;
  final DateTime dataEmissao;
  final String numeroSerieEcf;
  final int numeroEquipamento;
  final String modeloDocumentoFiscal;
  final int cooInicial;
  final int cooFinal;
  final int crz;
  final int cro;
  final double valorVendaBruta;
  final double valorGrandeTotal;
  EcfSintegra60M(
      {@required this.id,
      this.dataEmissao,
      this.numeroSerieEcf,
      this.numeroEquipamento,
      this.modeloDocumentoFiscal,
      this.cooInicial,
      this.cooFinal,
      this.crz,
      this.cro,
      this.valorVendaBruta,
      this.valorGrandeTotal});
  factory EcfSintegra60M.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return EcfSintegra60M(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      dataEmissao: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO']),
      numeroSerieEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}NUMERO_SERIE_ECF']),
      numeroEquipamento: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}NUMERO_EQUIPAMENTO']),
      modeloDocumentoFiscal: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}MODELO_DOCUMENTO_FISCAL']),
      cooInicial: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}COO_INICIAL']),
      cooFinal:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}COO_FINAL']),
      crz: intType.mapFromDatabaseResponse(data['${effectivePrefix}CRZ']),
      cro: intType.mapFromDatabaseResponse(data['${effectivePrefix}CRO']),
      valorVendaBruta: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_VENDA_BRUTA']),
      valorGrandeTotal: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}VALOR_GRANDE_TOTAL']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || dataEmissao != null) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao);
    }
    if (!nullToAbsent || numeroSerieEcf != null) {
      map['NUMERO_SERIE_ECF'] = Variable<String>(numeroSerieEcf);
    }
    if (!nullToAbsent || numeroEquipamento != null) {
      map['NUMERO_EQUIPAMENTO'] = Variable<int>(numeroEquipamento);
    }
    if (!nullToAbsent || modeloDocumentoFiscal != null) {
      map['MODELO_DOCUMENTO_FISCAL'] = Variable<String>(modeloDocumentoFiscal);
    }
    if (!nullToAbsent || cooInicial != null) {
      map['COO_INICIAL'] = Variable<int>(cooInicial);
    }
    if (!nullToAbsent || cooFinal != null) {
      map['COO_FINAL'] = Variable<int>(cooFinal);
    }
    if (!nullToAbsent || crz != null) {
      map['CRZ'] = Variable<int>(crz);
    }
    if (!nullToAbsent || cro != null) {
      map['CRO'] = Variable<int>(cro);
    }
    if (!nullToAbsent || valorVendaBruta != null) {
      map['VALOR_VENDA_BRUTA'] = Variable<double>(valorVendaBruta);
    }
    if (!nullToAbsent || valorGrandeTotal != null) {
      map['VALOR_GRANDE_TOTAL'] = Variable<double>(valorGrandeTotal);
    }
    return map;
  }

  EcfSintegra60MsCompanion toCompanion(bool nullToAbsent) {
    return EcfSintegra60MsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      dataEmissao: dataEmissao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissao),
      numeroSerieEcf: numeroSerieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroSerieEcf),
      numeroEquipamento: numeroEquipamento == null && nullToAbsent
          ? const Value.absent()
          : Value(numeroEquipamento),
      modeloDocumentoFiscal: modeloDocumentoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(modeloDocumentoFiscal),
      cooInicial: cooInicial == null && nullToAbsent
          ? const Value.absent()
          : Value(cooInicial),
      cooFinal: cooFinal == null && nullToAbsent
          ? const Value.absent()
          : Value(cooFinal),
      crz: crz == null && nullToAbsent ? const Value.absent() : Value(crz),
      cro: cro == null && nullToAbsent ? const Value.absent() : Value(cro),
      valorVendaBruta: valorVendaBruta == null && nullToAbsent
          ? const Value.absent()
          : Value(valorVendaBruta),
      valorGrandeTotal: valorGrandeTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorGrandeTotal),
    );
  }

  factory EcfSintegra60M.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return EcfSintegra60M(
      id: serializer.fromJson<int>(json['id']),
      dataEmissao: serializer.fromJson<DateTime>(json['dataEmissao']),
      numeroSerieEcf: serializer.fromJson<String>(json['numeroSerieEcf']),
      numeroEquipamento: serializer.fromJson<int>(json['numeroEquipamento']),
      modeloDocumentoFiscal:
          serializer.fromJson<String>(json['modeloDocumentoFiscal']),
      cooInicial: serializer.fromJson<int>(json['cooInicial']),
      cooFinal: serializer.fromJson<int>(json['cooFinal']),
      crz: serializer.fromJson<int>(json['crz']),
      cro: serializer.fromJson<int>(json['cro']),
      valorVendaBruta: serializer.fromJson<double>(json['valorVendaBruta']),
      valorGrandeTotal: serializer.fromJson<double>(json['valorGrandeTotal']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'dataEmissao': serializer.toJson<DateTime>(dataEmissao),
      'numeroSerieEcf': serializer.toJson<String>(numeroSerieEcf),
      'numeroEquipamento': serializer.toJson<int>(numeroEquipamento),
      'modeloDocumentoFiscal': serializer.toJson<String>(modeloDocumentoFiscal),
      'cooInicial': serializer.toJson<int>(cooInicial),
      'cooFinal': serializer.toJson<int>(cooFinal),
      'crz': serializer.toJson<int>(crz),
      'cro': serializer.toJson<int>(cro),
      'valorVendaBruta': serializer.toJson<double>(valorVendaBruta),
      'valorGrandeTotal': serializer.toJson<double>(valorGrandeTotal),
    };
  }

  EcfSintegra60M copyWith(
          {int id,
          DateTime dataEmissao,
          String numeroSerieEcf,
          int numeroEquipamento,
          String modeloDocumentoFiscal,
          int cooInicial,
          int cooFinal,
          int crz,
          int cro,
          double valorVendaBruta,
          double valorGrandeTotal}) =>
      EcfSintegra60M(
        id: id ?? this.id,
        dataEmissao: dataEmissao ?? this.dataEmissao,
        numeroSerieEcf: numeroSerieEcf ?? this.numeroSerieEcf,
        numeroEquipamento: numeroEquipamento ?? this.numeroEquipamento,
        modeloDocumentoFiscal:
            modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
        cooInicial: cooInicial ?? this.cooInicial,
        cooFinal: cooFinal ?? this.cooFinal,
        crz: crz ?? this.crz,
        cro: cro ?? this.cro,
        valorVendaBruta: valorVendaBruta ?? this.valorVendaBruta,
        valorGrandeTotal: valorGrandeTotal ?? this.valorGrandeTotal,
      );
  @override
  String toString() {
    return (StringBuffer('EcfSintegra60M(')
          ..write('id: $id, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('numeroSerieEcf: $numeroSerieEcf, ')
          ..write('numeroEquipamento: $numeroEquipamento, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('cooInicial: $cooInicial, ')
          ..write('cooFinal: $cooFinal, ')
          ..write('crz: $crz, ')
          ..write('cro: $cro, ')
          ..write('valorVendaBruta: $valorVendaBruta, ')
          ..write('valorGrandeTotal: $valorGrandeTotal')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          dataEmissao.hashCode,
          $mrjc(
              numeroSerieEcf.hashCode,
              $mrjc(
                  numeroEquipamento.hashCode,
                  $mrjc(
                      modeloDocumentoFiscal.hashCode,
                      $mrjc(
                          cooInicial.hashCode,
                          $mrjc(
                              cooFinal.hashCode,
                              $mrjc(
                                  crz.hashCode,
                                  $mrjc(
                                      cro.hashCode,
                                      $mrjc(valorVendaBruta.hashCode,
                                          valorGrandeTotal.hashCode)))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is EcfSintegra60M &&
          other.id == this.id &&
          other.dataEmissao == this.dataEmissao &&
          other.numeroSerieEcf == this.numeroSerieEcf &&
          other.numeroEquipamento == this.numeroEquipamento &&
          other.modeloDocumentoFiscal == this.modeloDocumentoFiscal &&
          other.cooInicial == this.cooInicial &&
          other.cooFinal == this.cooFinal &&
          other.crz == this.crz &&
          other.cro == this.cro &&
          other.valorVendaBruta == this.valorVendaBruta &&
          other.valorGrandeTotal == this.valorGrandeTotal);
}

class EcfSintegra60MsCompanion extends UpdateCompanion<EcfSintegra60M> {
  final Value<int> id;
  final Value<DateTime> dataEmissao;
  final Value<String> numeroSerieEcf;
  final Value<int> numeroEquipamento;
  final Value<String> modeloDocumentoFiscal;
  final Value<int> cooInicial;
  final Value<int> cooFinal;
  final Value<int> crz;
  final Value<int> cro;
  final Value<double> valorVendaBruta;
  final Value<double> valorGrandeTotal;
  const EcfSintegra60MsCompanion({
    this.id = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.numeroSerieEcf = const Value.absent(),
    this.numeroEquipamento = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.cooInicial = const Value.absent(),
    this.cooFinal = const Value.absent(),
    this.crz = const Value.absent(),
    this.cro = const Value.absent(),
    this.valorVendaBruta = const Value.absent(),
    this.valorGrandeTotal = const Value.absent(),
  });
  EcfSintegra60MsCompanion.insert({
    this.id = const Value.absent(),
    this.dataEmissao = const Value.absent(),
    this.numeroSerieEcf = const Value.absent(),
    this.numeroEquipamento = const Value.absent(),
    this.modeloDocumentoFiscal = const Value.absent(),
    this.cooInicial = const Value.absent(),
    this.cooFinal = const Value.absent(),
    this.crz = const Value.absent(),
    this.cro = const Value.absent(),
    this.valorVendaBruta = const Value.absent(),
    this.valorGrandeTotal = const Value.absent(),
  });
  static Insertable<EcfSintegra60M> custom({
    Expression<int> id,
    Expression<DateTime> dataEmissao,
    Expression<String> numeroSerieEcf,
    Expression<int> numeroEquipamento,
    Expression<String> modeloDocumentoFiscal,
    Expression<int> cooInicial,
    Expression<int> cooFinal,
    Expression<int> crz,
    Expression<int> cro,
    Expression<double> valorVendaBruta,
    Expression<double> valorGrandeTotal,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (dataEmissao != null) 'DATA_EMISSAO': dataEmissao,
      if (numeroSerieEcf != null) 'NUMERO_SERIE_ECF': numeroSerieEcf,
      if (numeroEquipamento != null) 'NUMERO_EQUIPAMENTO': numeroEquipamento,
      if (modeloDocumentoFiscal != null)
        'MODELO_DOCUMENTO_FISCAL': modeloDocumentoFiscal,
      if (cooInicial != null) 'COO_INICIAL': cooInicial,
      if (cooFinal != null) 'COO_FINAL': cooFinal,
      if (crz != null) 'CRZ': crz,
      if (cro != null) 'CRO': cro,
      if (valorVendaBruta != null) 'VALOR_VENDA_BRUTA': valorVendaBruta,
      if (valorGrandeTotal != null) 'VALOR_GRANDE_TOTAL': valorGrandeTotal,
    });
  }

  EcfSintegra60MsCompanion copyWith(
      {Value<int> id,
      Value<DateTime> dataEmissao,
      Value<String> numeroSerieEcf,
      Value<int> numeroEquipamento,
      Value<String> modeloDocumentoFiscal,
      Value<int> cooInicial,
      Value<int> cooFinal,
      Value<int> crz,
      Value<int> cro,
      Value<double> valorVendaBruta,
      Value<double> valorGrandeTotal}) {
    return EcfSintegra60MsCompanion(
      id: id ?? this.id,
      dataEmissao: dataEmissao ?? this.dataEmissao,
      numeroSerieEcf: numeroSerieEcf ?? this.numeroSerieEcf,
      numeroEquipamento: numeroEquipamento ?? this.numeroEquipamento,
      modeloDocumentoFiscal:
          modeloDocumentoFiscal ?? this.modeloDocumentoFiscal,
      cooInicial: cooInicial ?? this.cooInicial,
      cooFinal: cooFinal ?? this.cooFinal,
      crz: crz ?? this.crz,
      cro: cro ?? this.cro,
      valorVendaBruta: valorVendaBruta ?? this.valorVendaBruta,
      valorGrandeTotal: valorGrandeTotal ?? this.valorGrandeTotal,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (dataEmissao.present) {
      map['DATA_EMISSAO'] = Variable<DateTime>(dataEmissao.value);
    }
    if (numeroSerieEcf.present) {
      map['NUMERO_SERIE_ECF'] = Variable<String>(numeroSerieEcf.value);
    }
    if (numeroEquipamento.present) {
      map['NUMERO_EQUIPAMENTO'] = Variable<int>(numeroEquipamento.value);
    }
    if (modeloDocumentoFiscal.present) {
      map['MODELO_DOCUMENTO_FISCAL'] =
          Variable<String>(modeloDocumentoFiscal.value);
    }
    if (cooInicial.present) {
      map['COO_INICIAL'] = Variable<int>(cooInicial.value);
    }
    if (cooFinal.present) {
      map['COO_FINAL'] = Variable<int>(cooFinal.value);
    }
    if (crz.present) {
      map['CRZ'] = Variable<int>(crz.value);
    }
    if (cro.present) {
      map['CRO'] = Variable<int>(cro.value);
    }
    if (valorVendaBruta.present) {
      map['VALOR_VENDA_BRUTA'] = Variable<double>(valorVendaBruta.value);
    }
    if (valorGrandeTotal.present) {
      map['VALOR_GRANDE_TOTAL'] = Variable<double>(valorGrandeTotal.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EcfSintegra60MsCompanion(')
          ..write('id: $id, ')
          ..write('dataEmissao: $dataEmissao, ')
          ..write('numeroSerieEcf: $numeroSerieEcf, ')
          ..write('numeroEquipamento: $numeroEquipamento, ')
          ..write('modeloDocumentoFiscal: $modeloDocumentoFiscal, ')
          ..write('cooInicial: $cooInicial, ')
          ..write('cooFinal: $cooFinal, ')
          ..write('crz: $crz, ')
          ..write('cro: $cro, ')
          ..write('valorVendaBruta: $valorVendaBruta, ')
          ..write('valorGrandeTotal: $valorGrandeTotal')
          ..write(')'))
        .toString();
  }
}

class $EcfSintegra60MsTable extends EcfSintegra60Ms
    with TableInfo<$EcfSintegra60MsTable, EcfSintegra60M> {
  final GeneratedDatabase _db;
  final String _alias;
  $EcfSintegra60MsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _dataEmissaoMeta =
      const VerificationMeta('dataEmissao');
  GeneratedDateTimeColumn _dataEmissao;
  @override
  GeneratedDateTimeColumn get dataEmissao =>
      _dataEmissao ??= _constructDataEmissao();
  GeneratedDateTimeColumn _constructDataEmissao() {
    return GeneratedDateTimeColumn(
      'DATA_EMISSAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _numeroSerieEcfMeta =
      const VerificationMeta('numeroSerieEcf');
  GeneratedTextColumn _numeroSerieEcf;
  @override
  GeneratedTextColumn get numeroSerieEcf =>
      _numeroSerieEcf ??= _constructNumeroSerieEcf();
  GeneratedTextColumn _constructNumeroSerieEcf() {
    return GeneratedTextColumn('NUMERO_SERIE_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _numeroEquipamentoMeta =
      const VerificationMeta('numeroEquipamento');
  GeneratedIntColumn _numeroEquipamento;
  @override
  GeneratedIntColumn get numeroEquipamento =>
      _numeroEquipamento ??= _constructNumeroEquipamento();
  GeneratedIntColumn _constructNumeroEquipamento() {
    return GeneratedIntColumn(
      'NUMERO_EQUIPAMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _modeloDocumentoFiscalMeta =
      const VerificationMeta('modeloDocumentoFiscal');
  GeneratedTextColumn _modeloDocumentoFiscal;
  @override
  GeneratedTextColumn get modeloDocumentoFiscal =>
      _modeloDocumentoFiscal ??= _constructModeloDocumentoFiscal();
  GeneratedTextColumn _constructModeloDocumentoFiscal() {
    return GeneratedTextColumn('MODELO_DOCUMENTO_FISCAL', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _cooInicialMeta = const VerificationMeta('cooInicial');
  GeneratedIntColumn _cooInicial;
  @override
  GeneratedIntColumn get cooInicial => _cooInicial ??= _constructCooInicial();
  GeneratedIntColumn _constructCooInicial() {
    return GeneratedIntColumn(
      'COO_INICIAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cooFinalMeta = const VerificationMeta('cooFinal');
  GeneratedIntColumn _cooFinal;
  @override
  GeneratedIntColumn get cooFinal => _cooFinal ??= _constructCooFinal();
  GeneratedIntColumn _constructCooFinal() {
    return GeneratedIntColumn(
      'COO_FINAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _crzMeta = const VerificationMeta('crz');
  GeneratedIntColumn _crz;
  @override
  GeneratedIntColumn get crz => _crz ??= _constructCrz();
  GeneratedIntColumn _constructCrz() {
    return GeneratedIntColumn(
      'CRZ',
      $tableName,
      true,
    );
  }

  final VerificationMeta _croMeta = const VerificationMeta('cro');
  GeneratedIntColumn _cro;
  @override
  GeneratedIntColumn get cro => _cro ??= _constructCro();
  GeneratedIntColumn _constructCro() {
    return GeneratedIntColumn(
      'CRO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorVendaBrutaMeta =
      const VerificationMeta('valorVendaBruta');
  GeneratedRealColumn _valorVendaBruta;
  @override
  GeneratedRealColumn get valorVendaBruta =>
      _valorVendaBruta ??= _constructValorVendaBruta();
  GeneratedRealColumn _constructValorVendaBruta() {
    return GeneratedRealColumn(
      'VALOR_VENDA_BRUTA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorGrandeTotalMeta =
      const VerificationMeta('valorGrandeTotal');
  GeneratedRealColumn _valorGrandeTotal;
  @override
  GeneratedRealColumn get valorGrandeTotal =>
      _valorGrandeTotal ??= _constructValorGrandeTotal();
  GeneratedRealColumn _constructValorGrandeTotal() {
    return GeneratedRealColumn(
      'VALOR_GRANDE_TOTAL',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        dataEmissao,
        numeroSerieEcf,
        numeroEquipamento,
        modeloDocumentoFiscal,
        cooInicial,
        cooFinal,
        crz,
        cro,
        valorVendaBruta,
        valorGrandeTotal
      ];
  @override
  $EcfSintegra60MsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'ECF_SINTEGRA_60M';
  @override
  final String actualTableName = 'ECF_SINTEGRA_60M';
  @override
  VerificationContext validateIntegrity(Insertable<EcfSintegra60M> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('DATA_EMISSAO')) {
      context.handle(
          _dataEmissaoMeta,
          dataEmissao.isAcceptableOrUnknown(
              data['DATA_EMISSAO'], _dataEmissaoMeta));
    }
    if (data.containsKey('NUMERO_SERIE_ECF')) {
      context.handle(
          _numeroSerieEcfMeta,
          numeroSerieEcf.isAcceptableOrUnknown(
              data['NUMERO_SERIE_ECF'], _numeroSerieEcfMeta));
    }
    if (data.containsKey('NUMERO_EQUIPAMENTO')) {
      context.handle(
          _numeroEquipamentoMeta,
          numeroEquipamento.isAcceptableOrUnknown(
              data['NUMERO_EQUIPAMENTO'], _numeroEquipamentoMeta));
    }
    if (data.containsKey('MODELO_DOCUMENTO_FISCAL')) {
      context.handle(
          _modeloDocumentoFiscalMeta,
          modeloDocumentoFiscal.isAcceptableOrUnknown(
              data['MODELO_DOCUMENTO_FISCAL'], _modeloDocumentoFiscalMeta));
    }
    if (data.containsKey('COO_INICIAL')) {
      context.handle(
          _cooInicialMeta,
          cooInicial.isAcceptableOrUnknown(
              data['COO_INICIAL'], _cooInicialMeta));
    }
    if (data.containsKey('COO_FINAL')) {
      context.handle(_cooFinalMeta,
          cooFinal.isAcceptableOrUnknown(data['COO_FINAL'], _cooFinalMeta));
    }
    if (data.containsKey('CRZ')) {
      context.handle(
          _crzMeta, crz.isAcceptableOrUnknown(data['CRZ'], _crzMeta));
    }
    if (data.containsKey('CRO')) {
      context.handle(
          _croMeta, cro.isAcceptableOrUnknown(data['CRO'], _croMeta));
    }
    if (data.containsKey('VALOR_VENDA_BRUTA')) {
      context.handle(
          _valorVendaBrutaMeta,
          valorVendaBruta.isAcceptableOrUnknown(
              data['VALOR_VENDA_BRUTA'], _valorVendaBrutaMeta));
    }
    if (data.containsKey('VALOR_GRANDE_TOTAL')) {
      context.handle(
          _valorGrandeTotalMeta,
          valorGrandeTotal.isAcceptableOrUnknown(
              data['VALOR_GRANDE_TOTAL'], _valorGrandeTotalMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  EcfSintegra60M map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return EcfSintegra60M.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EcfSintegra60MsTable createAlias(String alias) {
    return $EcfSintegra60MsTable(_db, alias);
  }
}

class Empresa extends DataClass implements Insertable<Empresa> {
  final int id;
  final String razaoSocial;
  final String nomeFantasia;
  final String cnpj;
  final String inscricaoEstadual;
  final String inscricaoMunicipal;
  final String tipoRegime;
  final String crt;
  final DateTime dataConstituicao;
  final String tipo;
  final String email;
  final double aliquotaPis;
  final double aliquotaCofins;
  final String logradouro;
  final String numero;
  final String complemento;
  final String cep;
  final String bairro;
  final String cidade;
  final String uf;
  final String fone;
  final String contato;
  final int codigoIbgeCidade;
  final int codigoIbgeUf;
  final Uint8List logotipo;
  final bool registrado;
  Empresa(
      {@required this.id,
      this.razaoSocial,
      this.nomeFantasia,
      this.cnpj,
      this.inscricaoEstadual,
      this.inscricaoMunicipal,
      this.tipoRegime,
      this.crt,
      this.dataConstituicao,
      this.tipo,
      this.email,
      this.aliquotaPis,
      this.aliquotaCofins,
      this.logradouro,
      this.numero,
      this.complemento,
      this.cep,
      this.bairro,
      this.cidade,
      this.uf,
      this.fone,
      this.contato,
      this.codigoIbgeCidade,
      this.codigoIbgeUf,
      this.logotipo,
      this.registrado});
  factory Empresa.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final doubleType = db.typeSystem.forDartType<double>();
    final uint8ListType = db.typeSystem.forDartType<Uint8List>();
    final boolType = db.typeSystem.forDartType<bool>();
    return Empresa(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      razaoSocial: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}RAZAO_SOCIAL']),
      nomeFantasia: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}NOME_FANTASIA']),
      cnpj: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CNPJ']),
      inscricaoEstadual: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
      inscricaoMunicipal: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
      tipoRegime: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_REGIME']),
      crt: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CRT']),
      dataConstituicao: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_CONSTITUICAO']),
      tipo: stringType.mapFromDatabaseResponse(data['${effectivePrefix}TIPO']),
      email:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
      aliquotaPis: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_PIS']),
      aliquotaCofins: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}ALIQUOTA_COFINS']),
      logradouro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
      numero:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
      complemento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
      cep: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
      bairro:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
      cidade:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CIDADE']),
      uf: stringType.mapFromDatabaseResponse(data['${effectivePrefix}UF']),
      fone: stringType.mapFromDatabaseResponse(data['${effectivePrefix}FONE']),
      contato:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CONTATO']),
      codigoIbgeCidade: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
      codigoIbgeUf: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_IBGE_UF']),
      logotipo: uint8ListType
          .mapFromDatabaseResponse(data['${effectivePrefix}LOGOTIPO']),
      registrado: boolType
          .mapFromDatabaseResponse(data['${effectivePrefix}REGISTRADO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || razaoSocial != null) {
      map['RAZAO_SOCIAL'] = Variable<String>(razaoSocial);
    }
    if (!nullToAbsent || nomeFantasia != null) {
      map['NOME_FANTASIA'] = Variable<String>(nomeFantasia);
    }
    if (!nullToAbsent || cnpj != null) {
      map['CNPJ'] = Variable<String>(cnpj);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || inscricaoMunicipal != null) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal);
    }
    if (!nullToAbsent || tipoRegime != null) {
      map['TIPO_REGIME'] = Variable<String>(tipoRegime);
    }
    if (!nullToAbsent || crt != null) {
      map['CRT'] = Variable<String>(crt);
    }
    if (!nullToAbsent || dataConstituicao != null) {
      map['DATA_CONSTITUICAO'] = Variable<DateTime>(dataConstituicao);
    }
    if (!nullToAbsent || tipo != null) {
      map['TIPO'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || aliquotaPis != null) {
      map['ALIQUOTA_PIS'] = Variable<double>(aliquotaPis);
    }
    if (!nullToAbsent || aliquotaCofins != null) {
      map['ALIQUOTA_COFINS'] = Variable<double>(aliquotaCofins);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['CIDADE'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || fone != null) {
      map['FONE'] = Variable<String>(fone);
    }
    if (!nullToAbsent || contato != null) {
      map['CONTATO'] = Variable<String>(contato);
    }
    if (!nullToAbsent || codigoIbgeCidade != null) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade);
    }
    if (!nullToAbsent || codigoIbgeUf != null) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf);
    }
    if (!nullToAbsent || logotipo != null) {
      map['LOGOTIPO'] = Variable<Uint8List>(logotipo);
    }
    if (!nullToAbsent || registrado != null) {
      map['REGISTRADO'] = Variable<bool>(registrado);
    }
    return map;
  }

  EmpresasCompanion toCompanion(bool nullToAbsent) {
    return EmpresasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      razaoSocial: razaoSocial == null && nullToAbsent
          ? const Value.absent()
          : Value(razaoSocial),
      nomeFantasia: nomeFantasia == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeFantasia),
      cnpj: cnpj == null && nullToAbsent ? const Value.absent() : Value(cnpj),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
      inscricaoMunicipal: inscricaoMunicipal == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoMunicipal),
      tipoRegime: tipoRegime == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoRegime),
      crt: crt == null && nullToAbsent ? const Value.absent() : Value(crt),
      dataConstituicao: dataConstituicao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataConstituicao),
      tipo: tipo == null && nullToAbsent ? const Value.absent() : Value(tipo),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      aliquotaPis: aliquotaPis == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaPis),
      aliquotaCofins: aliquotaCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(aliquotaCofins),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      cidade:
          cidade == null && nullToAbsent ? const Value.absent() : Value(cidade),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      fone: fone == null && nullToAbsent ? const Value.absent() : Value(fone),
      contato: contato == null && nullToAbsent
          ? const Value.absent()
          : Value(contato),
      codigoIbgeCidade: codigoIbgeCidade == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeCidade),
      codigoIbgeUf: codigoIbgeUf == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeUf),
      logotipo: logotipo == null && nullToAbsent
          ? const Value.absent()
          : Value(logotipo),
      registrado: registrado == null && nullToAbsent
          ? const Value.absent()
          : Value(registrado),
    );
  }

  factory Empresa.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Empresa(
      id: serializer.fromJson<int>(json['id']),
      razaoSocial: serializer.fromJson<String>(json['razaoSocial']),
      nomeFantasia: serializer.fromJson<String>(json['nomeFantasia']),
      cnpj: serializer.fromJson<String>(json['cnpj']),
      inscricaoEstadual: serializer.fromJson<String>(json['inscricaoEstadual']),
      inscricaoMunicipal:
          serializer.fromJson<String>(json['inscricaoMunicipal']),
      tipoRegime: serializer.fromJson<String>(json['tipoRegime']),
      crt: serializer.fromJson<String>(json['crt']),
      dataConstituicao: serializer.fromJson<DateTime>(json['dataConstituicao']),
      tipo: serializer.fromJson<String>(json['tipo']),
      email: serializer.fromJson<String>(json['email']),
      aliquotaPis: serializer.fromJson<double>(json['aliquotaPis']),
      aliquotaCofins: serializer.fromJson<double>(json['aliquotaCofins']),
      logradouro: serializer.fromJson<String>(json['logradouro']),
      numero: serializer.fromJson<String>(json['numero']),
      complemento: serializer.fromJson<String>(json['complemento']),
      cep: serializer.fromJson<String>(json['cep']),
      bairro: serializer.fromJson<String>(json['bairro']),
      cidade: serializer.fromJson<String>(json['cidade']),
      uf: serializer.fromJson<String>(json['uf']),
      fone: serializer.fromJson<String>(json['fone']),
      contato: serializer.fromJson<String>(json['contato']),
      codigoIbgeCidade: serializer.fromJson<int>(json['codigoIbgeCidade']),
      codigoIbgeUf: serializer.fromJson<int>(json['codigoIbgeUf']),
      logotipo: serializer.fromJson<Uint8List>(json['logotipo']),
      registrado: serializer.fromJson<bool>(json['registrado']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'razaoSocial': serializer.toJson<String>(razaoSocial),
      'nomeFantasia': serializer.toJson<String>(nomeFantasia),
      'cnpj': serializer.toJson<String>(cnpj),
      'inscricaoEstadual': serializer.toJson<String>(inscricaoEstadual),
      'inscricaoMunicipal': serializer.toJson<String>(inscricaoMunicipal),
      'tipoRegime': serializer.toJson<String>(tipoRegime),
      'crt': serializer.toJson<String>(crt),
      'dataConstituicao': serializer.toJson<DateTime>(dataConstituicao),
      'tipo': serializer.toJson<String>(tipo),
      'email': serializer.toJson<String>(email),
      'aliquotaPis': serializer.toJson<double>(aliquotaPis),
      'aliquotaCofins': serializer.toJson<double>(aliquotaCofins),
      'logradouro': serializer.toJson<String>(logradouro),
      'numero': serializer.toJson<String>(numero),
      'complemento': serializer.toJson<String>(complemento),
      'cep': serializer.toJson<String>(cep),
      'bairro': serializer.toJson<String>(bairro),
      'cidade': serializer.toJson<String>(cidade),
      'uf': serializer.toJson<String>(uf),
      'fone': serializer.toJson<String>(fone),
      'contato': serializer.toJson<String>(contato),
      'codigoIbgeCidade': serializer.toJson<int>(codigoIbgeCidade),
      'codigoIbgeUf': serializer.toJson<int>(codigoIbgeUf),
      'logotipo': serializer.toJson<Uint8List>(logotipo),
      'registrado': serializer.toJson<bool>(registrado),
    };
  }

  Empresa copyWith(
          {int id,
          String razaoSocial,
          String nomeFantasia,
          String cnpj,
          String inscricaoEstadual,
          String inscricaoMunicipal,
          String tipoRegime,
          String crt,
          DateTime dataConstituicao,
          String tipo,
          String email,
          double aliquotaPis,
          double aliquotaCofins,
          String logradouro,
          String numero,
          String complemento,
          String cep,
          String bairro,
          String cidade,
          String uf,
          String fone,
          String contato,
          int codigoIbgeCidade,
          int codigoIbgeUf,
          Uint8List logotipo,
          bool registrado}) =>
      Empresa(
        id: id ?? this.id,
        razaoSocial: razaoSocial ?? this.razaoSocial,
        nomeFantasia: nomeFantasia ?? this.nomeFantasia,
        cnpj: cnpj ?? this.cnpj,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
        inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
        tipoRegime: tipoRegime ?? this.tipoRegime,
        crt: crt ?? this.crt,
        dataConstituicao: dataConstituicao ?? this.dataConstituicao,
        tipo: tipo ?? this.tipo,
        email: email ?? this.email,
        aliquotaPis: aliquotaPis ?? this.aliquotaPis,
        aliquotaCofins: aliquotaCofins ?? this.aliquotaCofins,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        cep: cep ?? this.cep,
        bairro: bairro ?? this.bairro,
        cidade: cidade ?? this.cidade,
        uf: uf ?? this.uf,
        fone: fone ?? this.fone,
        contato: contato ?? this.contato,
        codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
        codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
        logotipo: logotipo ?? this.logotipo,
        registrado: registrado ?? this.registrado,
      );
  @override
  String toString() {
    return (StringBuffer('Empresa(')
          ..write('id: $id, ')
          ..write('razaoSocial: $razaoSocial, ')
          ..write('nomeFantasia: $nomeFantasia, ')
          ..write('cnpj: $cnpj, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoRegime: $tipoRegime, ')
          ..write('crt: $crt, ')
          ..write('dataConstituicao: $dataConstituicao, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('aliquotaPis: $aliquotaPis, ')
          ..write('aliquotaCofins: $aliquotaCofins, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('fone: $fone, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf, ')
          ..write('logotipo: $logotipo, ')
          ..write('registrado: $registrado')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          razaoSocial.hashCode,
          $mrjc(
              nomeFantasia.hashCode,
              $mrjc(
                  cnpj.hashCode,
                  $mrjc(
                      inscricaoEstadual.hashCode,
                      $mrjc(
                          inscricaoMunicipal.hashCode,
                          $mrjc(
                              tipoRegime.hashCode,
                              $mrjc(
                                  crt.hashCode,
                                  $mrjc(
                                      dataConstituicao.hashCode,
                                      $mrjc(
                                          tipo.hashCode,
                                          $mrjc(
                                              email.hashCode,
                                              $mrjc(
                                                  aliquotaPis.hashCode,
                                                  $mrjc(
                                                      aliquotaCofins.hashCode,
                                                      $mrjc(
                                                          logradouro.hashCode,
                                                          $mrjc(
                                                              numero.hashCode,
                                                              $mrjc(
                                                                  complemento
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      cep
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          bairro
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              cidade.hashCode,
                                                                              $mrjc(uf.hashCode, $mrjc(fone.hashCode, $mrjc(contato.hashCode, $mrjc(codigoIbgeCidade.hashCode, $mrjc(codigoIbgeUf.hashCode, $mrjc(logotipo.hashCode, registrado.hashCode))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is Empresa &&
          other.id == this.id &&
          other.razaoSocial == this.razaoSocial &&
          other.nomeFantasia == this.nomeFantasia &&
          other.cnpj == this.cnpj &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.inscricaoMunicipal == this.inscricaoMunicipal &&
          other.tipoRegime == this.tipoRegime &&
          other.crt == this.crt &&
          other.dataConstituicao == this.dataConstituicao &&
          other.tipo == this.tipo &&
          other.email == this.email &&
          other.aliquotaPis == this.aliquotaPis &&
          other.aliquotaCofins == this.aliquotaCofins &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.cep == this.cep &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.uf == this.uf &&
          other.fone == this.fone &&
          other.contato == this.contato &&
          other.codigoIbgeCidade == this.codigoIbgeCidade &&
          other.codigoIbgeUf == this.codigoIbgeUf &&
          other.logotipo == this.logotipo &&
          other.registrado == this.registrado);
}

class EmpresasCompanion extends UpdateCompanion<Empresa> {
  final Value<int> id;
  final Value<String> razaoSocial;
  final Value<String> nomeFantasia;
  final Value<String> cnpj;
  final Value<String> inscricaoEstadual;
  final Value<String> inscricaoMunicipal;
  final Value<String> tipoRegime;
  final Value<String> crt;
  final Value<DateTime> dataConstituicao;
  final Value<String> tipo;
  final Value<String> email;
  final Value<double> aliquotaPis;
  final Value<double> aliquotaCofins;
  final Value<String> logradouro;
  final Value<String> numero;
  final Value<String> complemento;
  final Value<String> cep;
  final Value<String> bairro;
  final Value<String> cidade;
  final Value<String> uf;
  final Value<String> fone;
  final Value<String> contato;
  final Value<int> codigoIbgeCidade;
  final Value<int> codigoIbgeUf;
  final Value<Uint8List> logotipo;
  final Value<bool> registrado;
  const EmpresasCompanion({
    this.id = const Value.absent(),
    this.razaoSocial = const Value.absent(),
    this.nomeFantasia = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoRegime = const Value.absent(),
    this.crt = const Value.absent(),
    this.dataConstituicao = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.aliquotaPis = const Value.absent(),
    this.aliquotaCofins = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.fone = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
    this.logotipo = const Value.absent(),
    this.registrado = const Value.absent(),
  });
  EmpresasCompanion.insert({
    this.id = const Value.absent(),
    this.razaoSocial = const Value.absent(),
    this.nomeFantasia = const Value.absent(),
    this.cnpj = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoRegime = const Value.absent(),
    this.crt = const Value.absent(),
    this.dataConstituicao = const Value.absent(),
    this.tipo = const Value.absent(),
    this.email = const Value.absent(),
    this.aliquotaPis = const Value.absent(),
    this.aliquotaCofins = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.fone = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
    this.logotipo = const Value.absent(),
    this.registrado = const Value.absent(),
  });
  static Insertable<Empresa> custom({
    Expression<int> id,
    Expression<String> razaoSocial,
    Expression<String> nomeFantasia,
    Expression<String> cnpj,
    Expression<String> inscricaoEstadual,
    Expression<String> inscricaoMunicipal,
    Expression<String> tipoRegime,
    Expression<String> crt,
    Expression<DateTime> dataConstituicao,
    Expression<String> tipo,
    Expression<String> email,
    Expression<double> aliquotaPis,
    Expression<double> aliquotaCofins,
    Expression<String> logradouro,
    Expression<String> numero,
    Expression<String> complemento,
    Expression<String> cep,
    Expression<String> bairro,
    Expression<String> cidade,
    Expression<String> uf,
    Expression<String> fone,
    Expression<String> contato,
    Expression<int> codigoIbgeCidade,
    Expression<int> codigoIbgeUf,
    Expression<Uint8List> logotipo,
    Expression<bool> registrado,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (razaoSocial != null) 'RAZAO_SOCIAL': razaoSocial,
      if (nomeFantasia != null) 'NOME_FANTASIA': nomeFantasia,
      if (cnpj != null) 'CNPJ': cnpj,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
      if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
      if (tipoRegime != null) 'TIPO_REGIME': tipoRegime,
      if (crt != null) 'CRT': crt,
      if (dataConstituicao != null) 'DATA_CONSTITUICAO': dataConstituicao,
      if (tipo != null) 'TIPO': tipo,
      if (email != null) 'EMAIL': email,
      if (aliquotaPis != null) 'ALIQUOTA_PIS': aliquotaPis,
      if (aliquotaCofins != null) 'ALIQUOTA_COFINS': aliquotaCofins,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (cep != null) 'CEP': cep,
      if (bairro != null) 'BAIRRO': bairro,
      if (cidade != null) 'CIDADE': cidade,
      if (uf != null) 'UF': uf,
      if (fone != null) 'FONE': fone,
      if (contato != null) 'CONTATO': contato,
      if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
      if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
      if (logotipo != null) 'LOGOTIPO': logotipo,
      if (registrado != null) 'REGISTRADO': registrado,
    });
  }

  EmpresasCompanion copyWith(
      {Value<int> id,
      Value<String> razaoSocial,
      Value<String> nomeFantasia,
      Value<String> cnpj,
      Value<String> inscricaoEstadual,
      Value<String> inscricaoMunicipal,
      Value<String> tipoRegime,
      Value<String> crt,
      Value<DateTime> dataConstituicao,
      Value<String> tipo,
      Value<String> email,
      Value<double> aliquotaPis,
      Value<double> aliquotaCofins,
      Value<String> logradouro,
      Value<String> numero,
      Value<String> complemento,
      Value<String> cep,
      Value<String> bairro,
      Value<String> cidade,
      Value<String> uf,
      Value<String> fone,
      Value<String> contato,
      Value<int> codigoIbgeCidade,
      Value<int> codigoIbgeUf,
      Value<Uint8List> logotipo,
      Value<bool> registrado}) {
    return EmpresasCompanion(
      id: id ?? this.id,
      razaoSocial: razaoSocial ?? this.razaoSocial,
      nomeFantasia: nomeFantasia ?? this.nomeFantasia,
      cnpj: cnpj ?? this.cnpj,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
      tipoRegime: tipoRegime ?? this.tipoRegime,
      crt: crt ?? this.crt,
      dataConstituicao: dataConstituicao ?? this.dataConstituicao,
      tipo: tipo ?? this.tipo,
      email: email ?? this.email,
      aliquotaPis: aliquotaPis ?? this.aliquotaPis,
      aliquotaCofins: aliquotaCofins ?? this.aliquotaCofins,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      cep: cep ?? this.cep,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      uf: uf ?? this.uf,
      fone: fone ?? this.fone,
      contato: contato ?? this.contato,
      codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
      codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
      logotipo: logotipo ?? this.logotipo,
      registrado: registrado ?? this.registrado,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (razaoSocial.present) {
      map['RAZAO_SOCIAL'] = Variable<String>(razaoSocial.value);
    }
    if (nomeFantasia.present) {
      map['NOME_FANTASIA'] = Variable<String>(nomeFantasia.value);
    }
    if (cnpj.present) {
      map['CNPJ'] = Variable<String>(cnpj.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    if (inscricaoMunicipal.present) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal.value);
    }
    if (tipoRegime.present) {
      map['TIPO_REGIME'] = Variable<String>(tipoRegime.value);
    }
    if (crt.present) {
      map['CRT'] = Variable<String>(crt.value);
    }
    if (dataConstituicao.present) {
      map['DATA_CONSTITUICAO'] = Variable<DateTime>(dataConstituicao.value);
    }
    if (tipo.present) {
      map['TIPO'] = Variable<String>(tipo.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (aliquotaPis.present) {
      map['ALIQUOTA_PIS'] = Variable<double>(aliquotaPis.value);
    }
    if (aliquotaCofins.present) {
      map['ALIQUOTA_COFINS'] = Variable<double>(aliquotaCofins.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['CIDADE'] = Variable<String>(cidade.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (fone.present) {
      map['FONE'] = Variable<String>(fone.value);
    }
    if (contato.present) {
      map['CONTATO'] = Variable<String>(contato.value);
    }
    if (codigoIbgeCidade.present) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade.value);
    }
    if (codigoIbgeUf.present) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf.value);
    }
    if (logotipo.present) {
      map['LOGOTIPO'] = Variable<Uint8List>(logotipo.value);
    }
    if (registrado.present) {
      map['REGISTRADO'] = Variable<bool>(registrado.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('EmpresasCompanion(')
          ..write('id: $id, ')
          ..write('razaoSocial: $razaoSocial, ')
          ..write('nomeFantasia: $nomeFantasia, ')
          ..write('cnpj: $cnpj, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoRegime: $tipoRegime, ')
          ..write('crt: $crt, ')
          ..write('dataConstituicao: $dataConstituicao, ')
          ..write('tipo: $tipo, ')
          ..write('email: $email, ')
          ..write('aliquotaPis: $aliquotaPis, ')
          ..write('aliquotaCofins: $aliquotaCofins, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('fone: $fone, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf, ')
          ..write('logotipo: $logotipo, ')
          ..write('registrado: $registrado')
          ..write(')'))
        .toString();
  }
}

class $EmpresasTable extends Empresas with TableInfo<$EmpresasTable, Empresa> {
  final GeneratedDatabase _db;
  final String _alias;
  $EmpresasTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _razaoSocialMeta =
      const VerificationMeta('razaoSocial');
  GeneratedTextColumn _razaoSocial;
  @override
  GeneratedTextColumn get razaoSocial =>
      _razaoSocial ??= _constructRazaoSocial();
  GeneratedTextColumn _constructRazaoSocial() {
    return GeneratedTextColumn('RAZAO_SOCIAL', $tableName, true,
        minTextLength: 1, maxTextLength: 150);
  }

  final VerificationMeta _nomeFantasiaMeta =
      const VerificationMeta('nomeFantasia');
  GeneratedTextColumn _nomeFantasia;
  @override
  GeneratedTextColumn get nomeFantasia =>
      _nomeFantasia ??= _constructNomeFantasia();
  GeneratedTextColumn _constructNomeFantasia() {
    return GeneratedTextColumn('NOME_FANTASIA', $tableName, true,
        minTextLength: 1, maxTextLength: 150);
  }

  final VerificationMeta _cnpjMeta = const VerificationMeta('cnpj');
  GeneratedTextColumn _cnpj;
  @override
  GeneratedTextColumn get cnpj => _cnpj ??= _constructCnpj();
  GeneratedTextColumn _constructCnpj() {
    return GeneratedTextColumn('CNPJ', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  GeneratedTextColumn _inscricaoEstadual;
  @override
  GeneratedTextColumn get inscricaoEstadual =>
      _inscricaoEstadual ??= _constructInscricaoEstadual();
  GeneratedTextColumn _constructInscricaoEstadual() {
    return GeneratedTextColumn('INSCRICAO_ESTADUAL', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _inscricaoMunicipalMeta =
      const VerificationMeta('inscricaoMunicipal');
  GeneratedTextColumn _inscricaoMunicipal;
  @override
  GeneratedTextColumn get inscricaoMunicipal =>
      _inscricaoMunicipal ??= _constructInscricaoMunicipal();
  GeneratedTextColumn _constructInscricaoMunicipal() {
    return GeneratedTextColumn('INSCRICAO_MUNICIPAL', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _tipoRegimeMeta = const VerificationMeta('tipoRegime');
  GeneratedTextColumn _tipoRegime;
  @override
  GeneratedTextColumn get tipoRegime => _tipoRegime ??= _constructTipoRegime();
  GeneratedTextColumn _constructTipoRegime() {
    return GeneratedTextColumn('TIPO_REGIME', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _crtMeta = const VerificationMeta('crt');
  GeneratedTextColumn _crt;
  @override
  GeneratedTextColumn get crt => _crt ??= _constructCrt();
  GeneratedTextColumn _constructCrt() {
    return GeneratedTextColumn('CRT', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _dataConstituicaoMeta =
      const VerificationMeta('dataConstituicao');
  GeneratedDateTimeColumn _dataConstituicao;
  @override
  GeneratedDateTimeColumn get dataConstituicao =>
      _dataConstituicao ??= _constructDataConstituicao();
  GeneratedDateTimeColumn _constructDataConstituicao() {
    return GeneratedDateTimeColumn(
      'DATA_CONSTITUICAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  GeneratedTextColumn _tipo;
  @override
  GeneratedTextColumn get tipo => _tipo ??= _constructTipo();
  GeneratedTextColumn _constructTipo() {
    return GeneratedTextColumn('TIPO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _emailMeta = const VerificationMeta('email');
  GeneratedTextColumn _email;
  @override
  GeneratedTextColumn get email => _email ??= _constructEmail();
  GeneratedTextColumn _constructEmail() {
    return GeneratedTextColumn('EMAIL', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _aliquotaPisMeta =
      const VerificationMeta('aliquotaPis');
  GeneratedRealColumn _aliquotaPis;
  @override
  GeneratedRealColumn get aliquotaPis =>
      _aliquotaPis ??= _constructAliquotaPis();
  GeneratedRealColumn _constructAliquotaPis() {
    return GeneratedRealColumn(
      'ALIQUOTA_PIS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _aliquotaCofinsMeta =
      const VerificationMeta('aliquotaCofins');
  GeneratedRealColumn _aliquotaCofins;
  @override
  GeneratedRealColumn get aliquotaCofins =>
      _aliquotaCofins ??= _constructAliquotaCofins();
  GeneratedRealColumn _constructAliquotaCofins() {
    return GeneratedRealColumn(
      'ALIQUOTA_COFINS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  GeneratedTextColumn _logradouro;
  @override
  GeneratedTextColumn get logradouro => _logradouro ??= _constructLogradouro();
  GeneratedTextColumn _constructLogradouro() {
    return GeneratedTextColumn('LOGRADOURO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  GeneratedTextColumn _numero;
  @override
  GeneratedTextColumn get numero => _numero ??= _constructNumero();
  GeneratedTextColumn _constructNumero() {
    return GeneratedTextColumn('NUMERO', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  GeneratedTextColumn _complemento;
  @override
  GeneratedTextColumn get complemento =>
      _complemento ??= _constructComplemento();
  GeneratedTextColumn _constructComplemento() {
    return GeneratedTextColumn('COMPLEMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  GeneratedTextColumn _cep;
  @override
  GeneratedTextColumn get cep => _cep ??= _constructCep();
  GeneratedTextColumn _constructCep() {
    return GeneratedTextColumn('CEP', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  GeneratedTextColumn _bairro;
  @override
  GeneratedTextColumn get bairro => _bairro ??= _constructBairro();
  GeneratedTextColumn _constructBairro() {
    return GeneratedTextColumn('BAIRRO', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  GeneratedTextColumn _cidade;
  @override
  GeneratedTextColumn get cidade => _cidade ??= _constructCidade();
  GeneratedTextColumn _constructCidade() {
    return GeneratedTextColumn('CIDADE', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  GeneratedTextColumn _uf;
  @override
  GeneratedTextColumn get uf => _uf ??= _constructUf();
  GeneratedTextColumn _constructUf() {
    return GeneratedTextColumn('UF', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _foneMeta = const VerificationMeta('fone');
  GeneratedTextColumn _fone;
  @override
  GeneratedTextColumn get fone => _fone ??= _constructFone();
  GeneratedTextColumn _constructFone() {
    return GeneratedTextColumn('FONE', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _contatoMeta = const VerificationMeta('contato');
  GeneratedTextColumn _contato;
  @override
  GeneratedTextColumn get contato => _contato ??= _constructContato();
  GeneratedTextColumn _constructContato() {
    return GeneratedTextColumn('CONTATO', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _codigoIbgeCidadeMeta =
      const VerificationMeta('codigoIbgeCidade');
  GeneratedIntColumn _codigoIbgeCidade;
  @override
  GeneratedIntColumn get codigoIbgeCidade =>
      _codigoIbgeCidade ??= _constructCodigoIbgeCidade();
  GeneratedIntColumn _constructCodigoIbgeCidade() {
    return GeneratedIntColumn(
      'CODIGO_IBGE_CIDADE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _codigoIbgeUfMeta =
      const VerificationMeta('codigoIbgeUf');
  GeneratedIntColumn _codigoIbgeUf;
  @override
  GeneratedIntColumn get codigoIbgeUf =>
      _codigoIbgeUf ??= _constructCodigoIbgeUf();
  GeneratedIntColumn _constructCodigoIbgeUf() {
    return GeneratedIntColumn(
      'CODIGO_IBGE_UF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _logotipoMeta = const VerificationMeta('logotipo');
  GeneratedBlobColumn _logotipo;
  @override
  GeneratedBlobColumn get logotipo => _logotipo ??= _constructLogotipo();
  GeneratedBlobColumn _constructLogotipo() {
    return GeneratedBlobColumn(
      'LOGOTIPO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _registradoMeta = const VerificationMeta('registrado');
  GeneratedBoolColumn _registrado;
  @override
  GeneratedBoolColumn get registrado => _registrado ??= _constructRegistrado();
  GeneratedBoolColumn _constructRegistrado() {
    return GeneratedBoolColumn(
      'REGISTRADO',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        razaoSocial,
        nomeFantasia,
        cnpj,
        inscricaoEstadual,
        inscricaoMunicipal,
        tipoRegime,
        crt,
        dataConstituicao,
        tipo,
        email,
        aliquotaPis,
        aliquotaCofins,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        fone,
        contato,
        codigoIbgeCidade,
        codigoIbgeUf,
        logotipo,
        registrado
      ];
  @override
  $EmpresasTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'EMPRESA';
  @override
  final String actualTableName = 'EMPRESA';
  @override
  VerificationContext validateIntegrity(Insertable<Empresa> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('RAZAO_SOCIAL')) {
      context.handle(
          _razaoSocialMeta,
          razaoSocial.isAcceptableOrUnknown(
              data['RAZAO_SOCIAL'], _razaoSocialMeta));
    }
    if (data.containsKey('NOME_FANTASIA')) {
      context.handle(
          _nomeFantasiaMeta,
          nomeFantasia.isAcceptableOrUnknown(
              data['NOME_FANTASIA'], _nomeFantasiaMeta));
    }
    if (data.containsKey('CNPJ')) {
      context.handle(
          _cnpjMeta, cnpj.isAcceptableOrUnknown(data['CNPJ'], _cnpjMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL'], _inscricaoEstadualMeta));
    }
    if (data.containsKey('INSCRICAO_MUNICIPAL')) {
      context.handle(
          _inscricaoMunicipalMeta,
          inscricaoMunicipal.isAcceptableOrUnknown(
              data['INSCRICAO_MUNICIPAL'], _inscricaoMunicipalMeta));
    }
    if (data.containsKey('TIPO_REGIME')) {
      context.handle(
          _tipoRegimeMeta,
          tipoRegime.isAcceptableOrUnknown(
              data['TIPO_REGIME'], _tipoRegimeMeta));
    }
    if (data.containsKey('CRT')) {
      context.handle(
          _crtMeta, crt.isAcceptableOrUnknown(data['CRT'], _crtMeta));
    }
    if (data.containsKey('DATA_CONSTITUICAO')) {
      context.handle(
          _dataConstituicaoMeta,
          dataConstituicao.isAcceptableOrUnknown(
              data['DATA_CONSTITUICAO'], _dataConstituicaoMeta));
    }
    if (data.containsKey('TIPO')) {
      context.handle(
          _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO'], _tipoMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL'], _emailMeta));
    }
    if (data.containsKey('ALIQUOTA_PIS')) {
      context.handle(
          _aliquotaPisMeta,
          aliquotaPis.isAcceptableOrUnknown(
              data['ALIQUOTA_PIS'], _aliquotaPisMeta));
    }
    if (data.containsKey('ALIQUOTA_COFINS')) {
      context.handle(
          _aliquotaCofinsMeta,
          aliquotaCofins.isAcceptableOrUnknown(
              data['ALIQUOTA_COFINS'], _aliquotaCofinsMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO'], _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO'], _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO'], _complementoMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP'], _cepMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO'], _bairroMeta));
    }
    if (data.containsKey('CIDADE')) {
      context.handle(_cidadeMeta,
          cidade.isAcceptableOrUnknown(data['CIDADE'], _cidadeMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF'], _ufMeta));
    }
    if (data.containsKey('FONE')) {
      context.handle(
          _foneMeta, fone.isAcceptableOrUnknown(data['FONE'], _foneMeta));
    }
    if (data.containsKey('CONTATO')) {
      context.handle(_contatoMeta,
          contato.isAcceptableOrUnknown(data['CONTATO'], _contatoMeta));
    }
    if (data.containsKey('CODIGO_IBGE_CIDADE')) {
      context.handle(
          _codigoIbgeCidadeMeta,
          codigoIbgeCidade.isAcceptableOrUnknown(
              data['CODIGO_IBGE_CIDADE'], _codigoIbgeCidadeMeta));
    }
    if (data.containsKey('CODIGO_IBGE_UF')) {
      context.handle(
          _codigoIbgeUfMeta,
          codigoIbgeUf.isAcceptableOrUnknown(
              data['CODIGO_IBGE_UF'], _codigoIbgeUfMeta));
    }
    if (data.containsKey('LOGOTIPO')) {
      context.handle(_logotipoMeta,
          logotipo.isAcceptableOrUnknown(data['LOGOTIPO'], _logotipoMeta));
    }
    if (data.containsKey('REGISTRADO')) {
      context.handle(
          _registradoMeta,
          registrado.isAcceptableOrUnknown(
              data['REGISTRADO'], _registradoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Empresa map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return Empresa.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $EmpresasTable createAlias(String alias) {
    return $EmpresasTable(_db, alias);
  }
}

class Fornecedor extends DataClass implements Insertable<Fornecedor> {
  final int id;
  final String nome;
  final String fantasia;
  final String email;
  final String url;
  final String cpfCnpj;
  final String rg;
  final String orgaoRg;
  final DateTime dataEmissaoRg;
  final String sexo;
  final String inscricaoEstadual;
  final String inscricaoMunicipal;
  final String tipoPessoa;
  final DateTime dataCadastro;
  final String logradouro;
  final String numero;
  final String complemento;
  final String cep;
  final String bairro;
  final String cidade;
  final String uf;
  final String telefone;
  final String celular;
  final String contato;
  final int codigoIbgeCidade;
  final int codigoIbgeUf;
  Fornecedor(
      {@required this.id,
      this.nome,
      this.fantasia,
      this.email,
      this.url,
      this.cpfCnpj,
      this.rg,
      this.orgaoRg,
      this.dataEmissaoRg,
      this.sexo,
      this.inscricaoEstadual,
      this.inscricaoMunicipal,
      this.tipoPessoa,
      this.dataCadastro,
      this.logradouro,
      this.numero,
      this.complemento,
      this.cep,
      this.bairro,
      this.cidade,
      this.uf,
      this.telefone,
      this.celular,
      this.contato,
      this.codigoIbgeCidade,
      this.codigoIbgeUf});
  factory Fornecedor.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    return Fornecedor(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      nome: stringType.mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
      fantasia: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}FANTASIA']),
      email:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}EMAIL']),
      url: stringType.mapFromDatabaseResponse(data['${effectivePrefix}URL']),
      cpfCnpj: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CPF_CNPJ']),
      rg: stringType.mapFromDatabaseResponse(data['${effectivePrefix}RG']),
      orgaoRg: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}ORGAO_RG']),
      dataEmissaoRg: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_EMISSAO_RG']),
      sexo: stringType.mapFromDatabaseResponse(data['${effectivePrefix}SEXO']),
      inscricaoEstadual: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}INSCRICAO_ESTADUAL']),
      inscricaoMunicipal: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}INSCRICAO_MUNICIPAL']),
      tipoPessoa: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_PESSOA']),
      dataCadastro: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_CADASTRO']),
      logradouro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}LOGRADOURO']),
      numero:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}NUMERO']),
      complemento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}COMPLEMENTO']),
      cep: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CEP']),
      bairro:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}BAIRRO']),
      cidade:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CIDADE']),
      uf: stringType.mapFromDatabaseResponse(data['${effectivePrefix}UF']),
      telefone: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TELEFONE']),
      celular:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CELULAR']),
      contato:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CONTATO']),
      codigoIbgeCidade: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}CODIGO_IBGE_CIDADE']),
      codigoIbgeUf: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_IBGE_UF']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || fantasia != null) {
      map['FANTASIA'] = Variable<String>(fantasia);
    }
    if (!nullToAbsent || email != null) {
      map['EMAIL'] = Variable<String>(email);
    }
    if (!nullToAbsent || url != null) {
      map['URL'] = Variable<String>(url);
    }
    if (!nullToAbsent || cpfCnpj != null) {
      map['CPF_CNPJ'] = Variable<String>(cpfCnpj);
    }
    if (!nullToAbsent || rg != null) {
      map['RG'] = Variable<String>(rg);
    }
    if (!nullToAbsent || orgaoRg != null) {
      map['ORGAO_RG'] = Variable<String>(orgaoRg);
    }
    if (!nullToAbsent || dataEmissaoRg != null) {
      map['DATA_EMISSAO_RG'] = Variable<DateTime>(dataEmissaoRg);
    }
    if (!nullToAbsent || sexo != null) {
      map['SEXO'] = Variable<String>(sexo);
    }
    if (!nullToAbsent || inscricaoEstadual != null) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual);
    }
    if (!nullToAbsent || inscricaoMunicipal != null) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal);
    }
    if (!nullToAbsent || tipoPessoa != null) {
      map['TIPO_PESSOA'] = Variable<String>(tipoPessoa);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro);
    }
    if (!nullToAbsent || logradouro != null) {
      map['LOGRADOURO'] = Variable<String>(logradouro);
    }
    if (!nullToAbsent || numero != null) {
      map['NUMERO'] = Variable<String>(numero);
    }
    if (!nullToAbsent || complemento != null) {
      map['COMPLEMENTO'] = Variable<String>(complemento);
    }
    if (!nullToAbsent || cep != null) {
      map['CEP'] = Variable<String>(cep);
    }
    if (!nullToAbsent || bairro != null) {
      map['BAIRRO'] = Variable<String>(bairro);
    }
    if (!nullToAbsent || cidade != null) {
      map['CIDADE'] = Variable<String>(cidade);
    }
    if (!nullToAbsent || uf != null) {
      map['UF'] = Variable<String>(uf);
    }
    if (!nullToAbsent || telefone != null) {
      map['TELEFONE'] = Variable<String>(telefone);
    }
    if (!nullToAbsent || celular != null) {
      map['CELULAR'] = Variable<String>(celular);
    }
    if (!nullToAbsent || contato != null) {
      map['CONTATO'] = Variable<String>(contato);
    }
    if (!nullToAbsent || codigoIbgeCidade != null) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade);
    }
    if (!nullToAbsent || codigoIbgeUf != null) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf);
    }
    return map;
  }

  FornecedorsCompanion toCompanion(bool nullToAbsent) {
    return FornecedorsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      fantasia: fantasia == null && nullToAbsent
          ? const Value.absent()
          : Value(fantasia),
      email:
          email == null && nullToAbsent ? const Value.absent() : Value(email),
      url: url == null && nullToAbsent ? const Value.absent() : Value(url),
      cpfCnpj: cpfCnpj == null && nullToAbsent
          ? const Value.absent()
          : Value(cpfCnpj),
      rg: rg == null && nullToAbsent ? const Value.absent() : Value(rg),
      orgaoRg: orgaoRg == null && nullToAbsent
          ? const Value.absent()
          : Value(orgaoRg),
      dataEmissaoRg: dataEmissaoRg == null && nullToAbsent
          ? const Value.absent()
          : Value(dataEmissaoRg),
      sexo: sexo == null && nullToAbsent ? const Value.absent() : Value(sexo),
      inscricaoEstadual: inscricaoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoEstadual),
      inscricaoMunicipal: inscricaoMunicipal == null && nullToAbsent
          ? const Value.absent()
          : Value(inscricaoMunicipal),
      tipoPessoa: tipoPessoa == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoPessoa),
      dataCadastro: dataCadastro == null && nullToAbsent
          ? const Value.absent()
          : Value(dataCadastro),
      logradouro: logradouro == null && nullToAbsent
          ? const Value.absent()
          : Value(logradouro),
      numero:
          numero == null && nullToAbsent ? const Value.absent() : Value(numero),
      complemento: complemento == null && nullToAbsent
          ? const Value.absent()
          : Value(complemento),
      cep: cep == null && nullToAbsent ? const Value.absent() : Value(cep),
      bairro:
          bairro == null && nullToAbsent ? const Value.absent() : Value(bairro),
      cidade:
          cidade == null && nullToAbsent ? const Value.absent() : Value(cidade),
      uf: uf == null && nullToAbsent ? const Value.absent() : Value(uf),
      telefone: telefone == null && nullToAbsent
          ? const Value.absent()
          : Value(telefone),
      celular: celular == null && nullToAbsent
          ? const Value.absent()
          : Value(celular),
      contato: contato == null && nullToAbsent
          ? const Value.absent()
          : Value(contato),
      codigoIbgeCidade: codigoIbgeCidade == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeCidade),
      codigoIbgeUf: codigoIbgeUf == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoIbgeUf),
    );
  }

  factory Fornecedor.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Fornecedor(
      id: serializer.fromJson<int>(json['id']),
      nome: serializer.fromJson<String>(json['nome']),
      fantasia: serializer.fromJson<String>(json['fantasia']),
      email: serializer.fromJson<String>(json['email']),
      url: serializer.fromJson<String>(json['url']),
      cpfCnpj: serializer.fromJson<String>(json['cpfCnpj']),
      rg: serializer.fromJson<String>(json['rg']),
      orgaoRg: serializer.fromJson<String>(json['orgaoRg']),
      dataEmissaoRg: serializer.fromJson<DateTime>(json['dataEmissaoRg']),
      sexo: serializer.fromJson<String>(json['sexo']),
      inscricaoEstadual: serializer.fromJson<String>(json['inscricaoEstadual']),
      inscricaoMunicipal:
          serializer.fromJson<String>(json['inscricaoMunicipal']),
      tipoPessoa: serializer.fromJson<String>(json['tipoPessoa']),
      dataCadastro: serializer.fromJson<DateTime>(json['dataCadastro']),
      logradouro: serializer.fromJson<String>(json['logradouro']),
      numero: serializer.fromJson<String>(json['numero']),
      complemento: serializer.fromJson<String>(json['complemento']),
      cep: serializer.fromJson<String>(json['cep']),
      bairro: serializer.fromJson<String>(json['bairro']),
      cidade: serializer.fromJson<String>(json['cidade']),
      uf: serializer.fromJson<String>(json['uf']),
      telefone: serializer.fromJson<String>(json['telefone']),
      celular: serializer.fromJson<String>(json['celular']),
      contato: serializer.fromJson<String>(json['contato']),
      codigoIbgeCidade: serializer.fromJson<int>(json['codigoIbgeCidade']),
      codigoIbgeUf: serializer.fromJson<int>(json['codigoIbgeUf']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'nome': serializer.toJson<String>(nome),
      'fantasia': serializer.toJson<String>(fantasia),
      'email': serializer.toJson<String>(email),
      'url': serializer.toJson<String>(url),
      'cpfCnpj': serializer.toJson<String>(cpfCnpj),
      'rg': serializer.toJson<String>(rg),
      'orgaoRg': serializer.toJson<String>(orgaoRg),
      'dataEmissaoRg': serializer.toJson<DateTime>(dataEmissaoRg),
      'sexo': serializer.toJson<String>(sexo),
      'inscricaoEstadual': serializer.toJson<String>(inscricaoEstadual),
      'inscricaoMunicipal': serializer.toJson<String>(inscricaoMunicipal),
      'tipoPessoa': serializer.toJson<String>(tipoPessoa),
      'dataCadastro': serializer.toJson<DateTime>(dataCadastro),
      'logradouro': serializer.toJson<String>(logradouro),
      'numero': serializer.toJson<String>(numero),
      'complemento': serializer.toJson<String>(complemento),
      'cep': serializer.toJson<String>(cep),
      'bairro': serializer.toJson<String>(bairro),
      'cidade': serializer.toJson<String>(cidade),
      'uf': serializer.toJson<String>(uf),
      'telefone': serializer.toJson<String>(telefone),
      'celular': serializer.toJson<String>(celular),
      'contato': serializer.toJson<String>(contato),
      'codigoIbgeCidade': serializer.toJson<int>(codigoIbgeCidade),
      'codigoIbgeUf': serializer.toJson<int>(codigoIbgeUf),
    };
  }

  Fornecedor copyWith(
          {int id,
          String nome,
          String fantasia,
          String email,
          String url,
          String cpfCnpj,
          String rg,
          String orgaoRg,
          DateTime dataEmissaoRg,
          String sexo,
          String inscricaoEstadual,
          String inscricaoMunicipal,
          String tipoPessoa,
          DateTime dataCadastro,
          String logradouro,
          String numero,
          String complemento,
          String cep,
          String bairro,
          String cidade,
          String uf,
          String telefone,
          String celular,
          String contato,
          int codigoIbgeCidade,
          int codigoIbgeUf}) =>
      Fornecedor(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        fantasia: fantasia ?? this.fantasia,
        email: email ?? this.email,
        url: url ?? this.url,
        cpfCnpj: cpfCnpj ?? this.cpfCnpj,
        rg: rg ?? this.rg,
        orgaoRg: orgaoRg ?? this.orgaoRg,
        dataEmissaoRg: dataEmissaoRg ?? this.dataEmissaoRg,
        sexo: sexo ?? this.sexo,
        inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
        inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
        tipoPessoa: tipoPessoa ?? this.tipoPessoa,
        dataCadastro: dataCadastro ?? this.dataCadastro,
        logradouro: logradouro ?? this.logradouro,
        numero: numero ?? this.numero,
        complemento: complemento ?? this.complemento,
        cep: cep ?? this.cep,
        bairro: bairro ?? this.bairro,
        cidade: cidade ?? this.cidade,
        uf: uf ?? this.uf,
        telefone: telefone ?? this.telefone,
        celular: celular ?? this.celular,
        contato: contato ?? this.contato,
        codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
        codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
      );
  @override
  String toString() {
    return (StringBuffer('Fornecedor(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('email: $email, ')
          ..write('url: $url, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rg: $rg, ')
          ..write('orgaoRg: $orgaoRg, ')
          ..write('dataEmissaoRg: $dataEmissaoRg, ')
          ..write('sexo: $sexo, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoPessoa: $tipoPessoa, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          nome.hashCode,
          $mrjc(
              fantasia.hashCode,
              $mrjc(
                  email.hashCode,
                  $mrjc(
                      url.hashCode,
                      $mrjc(
                          cpfCnpj.hashCode,
                          $mrjc(
                              rg.hashCode,
                              $mrjc(
                                  orgaoRg.hashCode,
                                  $mrjc(
                                      dataEmissaoRg.hashCode,
                                      $mrjc(
                                          sexo.hashCode,
                                          $mrjc(
                                              inscricaoEstadual.hashCode,
                                              $mrjc(
                                                  inscricaoMunicipal.hashCode,
                                                  $mrjc(
                                                      tipoPessoa.hashCode,
                                                      $mrjc(
                                                          dataCadastro.hashCode,
                                                          $mrjc(
                                                              logradouro
                                                                  .hashCode,
                                                              $mrjc(
                                                                  numero
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      complemento
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          cep
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              bairro.hashCode,
                                                                              $mrjc(cidade.hashCode, $mrjc(uf.hashCode, $mrjc(telefone.hashCode, $mrjc(celular.hashCode, $mrjc(contato.hashCode, $mrjc(codigoIbgeCidade.hashCode, codigoIbgeUf.hashCode))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is Fornecedor &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.fantasia == this.fantasia &&
          other.email == this.email &&
          other.url == this.url &&
          other.cpfCnpj == this.cpfCnpj &&
          other.rg == this.rg &&
          other.orgaoRg == this.orgaoRg &&
          other.dataEmissaoRg == this.dataEmissaoRg &&
          other.sexo == this.sexo &&
          other.inscricaoEstadual == this.inscricaoEstadual &&
          other.inscricaoMunicipal == this.inscricaoMunicipal &&
          other.tipoPessoa == this.tipoPessoa &&
          other.dataCadastro == this.dataCadastro &&
          other.logradouro == this.logradouro &&
          other.numero == this.numero &&
          other.complemento == this.complemento &&
          other.cep == this.cep &&
          other.bairro == this.bairro &&
          other.cidade == this.cidade &&
          other.uf == this.uf &&
          other.telefone == this.telefone &&
          other.celular == this.celular &&
          other.contato == this.contato &&
          other.codigoIbgeCidade == this.codigoIbgeCidade &&
          other.codigoIbgeUf == this.codigoIbgeUf);
}

class FornecedorsCompanion extends UpdateCompanion<Fornecedor> {
  final Value<int> id;
  final Value<String> nome;
  final Value<String> fantasia;
  final Value<String> email;
  final Value<String> url;
  final Value<String> cpfCnpj;
  final Value<String> rg;
  final Value<String> orgaoRg;
  final Value<DateTime> dataEmissaoRg;
  final Value<String> sexo;
  final Value<String> inscricaoEstadual;
  final Value<String> inscricaoMunicipal;
  final Value<String> tipoPessoa;
  final Value<DateTime> dataCadastro;
  final Value<String> logradouro;
  final Value<String> numero;
  final Value<String> complemento;
  final Value<String> cep;
  final Value<String> bairro;
  final Value<String> cidade;
  final Value<String> uf;
  final Value<String> telefone;
  final Value<String> celular;
  final Value<String> contato;
  final Value<int> codigoIbgeCidade;
  final Value<int> codigoIbgeUf;
  const FornecedorsCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.email = const Value.absent(),
    this.url = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rg = const Value.absent(),
    this.orgaoRg = const Value.absent(),
    this.dataEmissaoRg = const Value.absent(),
    this.sexo = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoPessoa = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
  });
  FornecedorsCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.fantasia = const Value.absent(),
    this.email = const Value.absent(),
    this.url = const Value.absent(),
    this.cpfCnpj = const Value.absent(),
    this.rg = const Value.absent(),
    this.orgaoRg = const Value.absent(),
    this.dataEmissaoRg = const Value.absent(),
    this.sexo = const Value.absent(),
    this.inscricaoEstadual = const Value.absent(),
    this.inscricaoMunicipal = const Value.absent(),
    this.tipoPessoa = const Value.absent(),
    this.dataCadastro = const Value.absent(),
    this.logradouro = const Value.absent(),
    this.numero = const Value.absent(),
    this.complemento = const Value.absent(),
    this.cep = const Value.absent(),
    this.bairro = const Value.absent(),
    this.cidade = const Value.absent(),
    this.uf = const Value.absent(),
    this.telefone = const Value.absent(),
    this.celular = const Value.absent(),
    this.contato = const Value.absent(),
    this.codigoIbgeCidade = const Value.absent(),
    this.codigoIbgeUf = const Value.absent(),
  });
  static Insertable<Fornecedor> custom({
    Expression<int> id,
    Expression<String> nome,
    Expression<String> fantasia,
    Expression<String> email,
    Expression<String> url,
    Expression<String> cpfCnpj,
    Expression<String> rg,
    Expression<String> orgaoRg,
    Expression<DateTime> dataEmissaoRg,
    Expression<String> sexo,
    Expression<String> inscricaoEstadual,
    Expression<String> inscricaoMunicipal,
    Expression<String> tipoPessoa,
    Expression<DateTime> dataCadastro,
    Expression<String> logradouro,
    Expression<String> numero,
    Expression<String> complemento,
    Expression<String> cep,
    Expression<String> bairro,
    Expression<String> cidade,
    Expression<String> uf,
    Expression<String> telefone,
    Expression<String> celular,
    Expression<String> contato,
    Expression<int> codigoIbgeCidade,
    Expression<int> codigoIbgeUf,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (fantasia != null) 'FANTASIA': fantasia,
      if (email != null) 'EMAIL': email,
      if (url != null) 'URL': url,
      if (cpfCnpj != null) 'CPF_CNPJ': cpfCnpj,
      if (rg != null) 'RG': rg,
      if (orgaoRg != null) 'ORGAO_RG': orgaoRg,
      if (dataEmissaoRg != null) 'DATA_EMISSAO_RG': dataEmissaoRg,
      if (sexo != null) 'SEXO': sexo,
      if (inscricaoEstadual != null) 'INSCRICAO_ESTADUAL': inscricaoEstadual,
      if (inscricaoMunicipal != null) 'INSCRICAO_MUNICIPAL': inscricaoMunicipal,
      if (tipoPessoa != null) 'TIPO_PESSOA': tipoPessoa,
      if (dataCadastro != null) 'DATA_CADASTRO': dataCadastro,
      if (logradouro != null) 'LOGRADOURO': logradouro,
      if (numero != null) 'NUMERO': numero,
      if (complemento != null) 'COMPLEMENTO': complemento,
      if (cep != null) 'CEP': cep,
      if (bairro != null) 'BAIRRO': bairro,
      if (cidade != null) 'CIDADE': cidade,
      if (uf != null) 'UF': uf,
      if (telefone != null) 'TELEFONE': telefone,
      if (celular != null) 'CELULAR': celular,
      if (contato != null) 'CONTATO': contato,
      if (codigoIbgeCidade != null) 'CODIGO_IBGE_CIDADE': codigoIbgeCidade,
      if (codigoIbgeUf != null) 'CODIGO_IBGE_UF': codigoIbgeUf,
    });
  }

  FornecedorsCompanion copyWith(
      {Value<int> id,
      Value<String> nome,
      Value<String> fantasia,
      Value<String> email,
      Value<String> url,
      Value<String> cpfCnpj,
      Value<String> rg,
      Value<String> orgaoRg,
      Value<DateTime> dataEmissaoRg,
      Value<String> sexo,
      Value<String> inscricaoEstadual,
      Value<String> inscricaoMunicipal,
      Value<String> tipoPessoa,
      Value<DateTime> dataCadastro,
      Value<String> logradouro,
      Value<String> numero,
      Value<String> complemento,
      Value<String> cep,
      Value<String> bairro,
      Value<String> cidade,
      Value<String> uf,
      Value<String> telefone,
      Value<String> celular,
      Value<String> contato,
      Value<int> codigoIbgeCidade,
      Value<int> codigoIbgeUf}) {
    return FornecedorsCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      fantasia: fantasia ?? this.fantasia,
      email: email ?? this.email,
      url: url ?? this.url,
      cpfCnpj: cpfCnpj ?? this.cpfCnpj,
      rg: rg ?? this.rg,
      orgaoRg: orgaoRg ?? this.orgaoRg,
      dataEmissaoRg: dataEmissaoRg ?? this.dataEmissaoRg,
      sexo: sexo ?? this.sexo,
      inscricaoEstadual: inscricaoEstadual ?? this.inscricaoEstadual,
      inscricaoMunicipal: inscricaoMunicipal ?? this.inscricaoMunicipal,
      tipoPessoa: tipoPessoa ?? this.tipoPessoa,
      dataCadastro: dataCadastro ?? this.dataCadastro,
      logradouro: logradouro ?? this.logradouro,
      numero: numero ?? this.numero,
      complemento: complemento ?? this.complemento,
      cep: cep ?? this.cep,
      bairro: bairro ?? this.bairro,
      cidade: cidade ?? this.cidade,
      uf: uf ?? this.uf,
      telefone: telefone ?? this.telefone,
      celular: celular ?? this.celular,
      contato: contato ?? this.contato,
      codigoIbgeCidade: codigoIbgeCidade ?? this.codigoIbgeCidade,
      codigoIbgeUf: codigoIbgeUf ?? this.codigoIbgeUf,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (fantasia.present) {
      map['FANTASIA'] = Variable<String>(fantasia.value);
    }
    if (email.present) {
      map['EMAIL'] = Variable<String>(email.value);
    }
    if (url.present) {
      map['URL'] = Variable<String>(url.value);
    }
    if (cpfCnpj.present) {
      map['CPF_CNPJ'] = Variable<String>(cpfCnpj.value);
    }
    if (rg.present) {
      map['RG'] = Variable<String>(rg.value);
    }
    if (orgaoRg.present) {
      map['ORGAO_RG'] = Variable<String>(orgaoRg.value);
    }
    if (dataEmissaoRg.present) {
      map['DATA_EMISSAO_RG'] = Variable<DateTime>(dataEmissaoRg.value);
    }
    if (sexo.present) {
      map['SEXO'] = Variable<String>(sexo.value);
    }
    if (inscricaoEstadual.present) {
      map['INSCRICAO_ESTADUAL'] = Variable<String>(inscricaoEstadual.value);
    }
    if (inscricaoMunicipal.present) {
      map['INSCRICAO_MUNICIPAL'] = Variable<String>(inscricaoMunicipal.value);
    }
    if (tipoPessoa.present) {
      map['TIPO_PESSOA'] = Variable<String>(tipoPessoa.value);
    }
    if (dataCadastro.present) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro.value);
    }
    if (logradouro.present) {
      map['LOGRADOURO'] = Variable<String>(logradouro.value);
    }
    if (numero.present) {
      map['NUMERO'] = Variable<String>(numero.value);
    }
    if (complemento.present) {
      map['COMPLEMENTO'] = Variable<String>(complemento.value);
    }
    if (cep.present) {
      map['CEP'] = Variable<String>(cep.value);
    }
    if (bairro.present) {
      map['BAIRRO'] = Variable<String>(bairro.value);
    }
    if (cidade.present) {
      map['CIDADE'] = Variable<String>(cidade.value);
    }
    if (uf.present) {
      map['UF'] = Variable<String>(uf.value);
    }
    if (telefone.present) {
      map['TELEFONE'] = Variable<String>(telefone.value);
    }
    if (celular.present) {
      map['CELULAR'] = Variable<String>(celular.value);
    }
    if (contato.present) {
      map['CONTATO'] = Variable<String>(contato.value);
    }
    if (codigoIbgeCidade.present) {
      map['CODIGO_IBGE_CIDADE'] = Variable<int>(codigoIbgeCidade.value);
    }
    if (codigoIbgeUf.present) {
      map['CODIGO_IBGE_UF'] = Variable<int>(codigoIbgeUf.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('FornecedorsCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('fantasia: $fantasia, ')
          ..write('email: $email, ')
          ..write('url: $url, ')
          ..write('cpfCnpj: $cpfCnpj, ')
          ..write('rg: $rg, ')
          ..write('orgaoRg: $orgaoRg, ')
          ..write('dataEmissaoRg: $dataEmissaoRg, ')
          ..write('sexo: $sexo, ')
          ..write('inscricaoEstadual: $inscricaoEstadual, ')
          ..write('inscricaoMunicipal: $inscricaoMunicipal, ')
          ..write('tipoPessoa: $tipoPessoa, ')
          ..write('dataCadastro: $dataCadastro, ')
          ..write('logradouro: $logradouro, ')
          ..write('numero: $numero, ')
          ..write('complemento: $complemento, ')
          ..write('cep: $cep, ')
          ..write('bairro: $bairro, ')
          ..write('cidade: $cidade, ')
          ..write('uf: $uf, ')
          ..write('telefone: $telefone, ')
          ..write('celular: $celular, ')
          ..write('contato: $contato, ')
          ..write('codigoIbgeCidade: $codigoIbgeCidade, ')
          ..write('codigoIbgeUf: $codigoIbgeUf')
          ..write(')'))
        .toString();
  }
}

class $FornecedorsTable extends Fornecedors
    with TableInfo<$FornecedorsTable, Fornecedor> {
  final GeneratedDatabase _db;
  final String _alias;
  $FornecedorsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  GeneratedTextColumn _nome;
  @override
  GeneratedTextColumn get nome => _nome ??= _constructNome();
  GeneratedTextColumn _constructNome() {
    return GeneratedTextColumn('NOME', $tableName, true,
        minTextLength: 1, maxTextLength: 150);
  }

  final VerificationMeta _fantasiaMeta = const VerificationMeta('fantasia');
  GeneratedTextColumn _fantasia;
  @override
  GeneratedTextColumn get fantasia => _fantasia ??= _constructFantasia();
  GeneratedTextColumn _constructFantasia() {
    return GeneratedTextColumn('FANTASIA', $tableName, true,
        minTextLength: 1, maxTextLength: 150);
  }

  final VerificationMeta _emailMeta = const VerificationMeta('email');
  GeneratedTextColumn _email;
  @override
  GeneratedTextColumn get email => _email ??= _constructEmail();
  GeneratedTextColumn _constructEmail() {
    return GeneratedTextColumn('EMAIL', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _urlMeta = const VerificationMeta('url');
  GeneratedTextColumn _url;
  @override
  GeneratedTextColumn get url => _url ??= _constructUrl();
  GeneratedTextColumn _constructUrl() {
    return GeneratedTextColumn('URL', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _cpfCnpjMeta = const VerificationMeta('cpfCnpj');
  GeneratedTextColumn _cpfCnpj;
  @override
  GeneratedTextColumn get cpfCnpj => _cpfCnpj ??= _constructCpfCnpj();
  GeneratedTextColumn _constructCpfCnpj() {
    return GeneratedTextColumn('CPF_CNPJ', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _rgMeta = const VerificationMeta('rg');
  GeneratedTextColumn _rg;
  @override
  GeneratedTextColumn get rg => _rg ??= _constructRg();
  GeneratedTextColumn _constructRg() {
    return GeneratedTextColumn('RG', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _orgaoRgMeta = const VerificationMeta('orgaoRg');
  GeneratedTextColumn _orgaoRg;
  @override
  GeneratedTextColumn get orgaoRg => _orgaoRg ??= _constructOrgaoRg();
  GeneratedTextColumn _constructOrgaoRg() {
    return GeneratedTextColumn('ORGAO_RG', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _dataEmissaoRgMeta =
      const VerificationMeta('dataEmissaoRg');
  GeneratedDateTimeColumn _dataEmissaoRg;
  @override
  GeneratedDateTimeColumn get dataEmissaoRg =>
      _dataEmissaoRg ??= _constructDataEmissaoRg();
  GeneratedDateTimeColumn _constructDataEmissaoRg() {
    return GeneratedDateTimeColumn(
      'DATA_EMISSAO_RG',
      $tableName,
      true,
    );
  }

  final VerificationMeta _sexoMeta = const VerificationMeta('sexo');
  GeneratedTextColumn _sexo;
  @override
  GeneratedTextColumn get sexo => _sexo ??= _constructSexo();
  GeneratedTextColumn _constructSexo() {
    return GeneratedTextColumn('SEXO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _inscricaoEstadualMeta =
      const VerificationMeta('inscricaoEstadual');
  GeneratedTextColumn _inscricaoEstadual;
  @override
  GeneratedTextColumn get inscricaoEstadual =>
      _inscricaoEstadual ??= _constructInscricaoEstadual();
  GeneratedTextColumn _constructInscricaoEstadual() {
    return GeneratedTextColumn('INSCRICAO_ESTADUAL', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _inscricaoMunicipalMeta =
      const VerificationMeta('inscricaoMunicipal');
  GeneratedTextColumn _inscricaoMunicipal;
  @override
  GeneratedTextColumn get inscricaoMunicipal =>
      _inscricaoMunicipal ??= _constructInscricaoMunicipal();
  GeneratedTextColumn _constructInscricaoMunicipal() {
    return GeneratedTextColumn('INSCRICAO_MUNICIPAL', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _tipoPessoaMeta = const VerificationMeta('tipoPessoa');
  GeneratedTextColumn _tipoPessoa;
  @override
  GeneratedTextColumn get tipoPessoa => _tipoPessoa ??= _constructTipoPessoa();
  GeneratedTextColumn _constructTipoPessoa() {
    return GeneratedTextColumn('TIPO_PESSOA', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _dataCadastroMeta =
      const VerificationMeta('dataCadastro');
  GeneratedDateTimeColumn _dataCadastro;
  @override
  GeneratedDateTimeColumn get dataCadastro =>
      _dataCadastro ??= _constructDataCadastro();
  GeneratedDateTimeColumn _constructDataCadastro() {
    return GeneratedDateTimeColumn(
      'DATA_CADASTRO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _logradouroMeta = const VerificationMeta('logradouro');
  GeneratedTextColumn _logradouro;
  @override
  GeneratedTextColumn get logradouro => _logradouro ??= _constructLogradouro();
  GeneratedTextColumn _constructLogradouro() {
    return GeneratedTextColumn('LOGRADOURO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _numeroMeta = const VerificationMeta('numero');
  GeneratedTextColumn _numero;
  @override
  GeneratedTextColumn get numero => _numero ??= _constructNumero();
  GeneratedTextColumn _constructNumero() {
    return GeneratedTextColumn('NUMERO', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _complementoMeta =
      const VerificationMeta('complemento');
  GeneratedTextColumn _complemento;
  @override
  GeneratedTextColumn get complemento =>
      _complemento ??= _constructComplemento();
  GeneratedTextColumn _constructComplemento() {
    return GeneratedTextColumn('COMPLEMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _cepMeta = const VerificationMeta('cep');
  GeneratedTextColumn _cep;
  @override
  GeneratedTextColumn get cep => _cep ??= _constructCep();
  GeneratedTextColumn _constructCep() {
    return GeneratedTextColumn('CEP', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _bairroMeta = const VerificationMeta('bairro');
  GeneratedTextColumn _bairro;
  @override
  GeneratedTextColumn get bairro => _bairro ??= _constructBairro();
  GeneratedTextColumn _constructBairro() {
    return GeneratedTextColumn('BAIRRO', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _cidadeMeta = const VerificationMeta('cidade');
  GeneratedTextColumn _cidade;
  @override
  GeneratedTextColumn get cidade => _cidade ??= _constructCidade();
  GeneratedTextColumn _constructCidade() {
    return GeneratedTextColumn('CIDADE', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _ufMeta = const VerificationMeta('uf');
  GeneratedTextColumn _uf;
  @override
  GeneratedTextColumn get uf => _uf ??= _constructUf();
  GeneratedTextColumn _constructUf() {
    return GeneratedTextColumn('UF', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _telefoneMeta = const VerificationMeta('telefone');
  GeneratedTextColumn _telefone;
  @override
  GeneratedTextColumn get telefone => _telefone ??= _constructTelefone();
  GeneratedTextColumn _constructTelefone() {
    return GeneratedTextColumn('TELEFONE', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _celularMeta = const VerificationMeta('celular');
  GeneratedTextColumn _celular;
  @override
  GeneratedTextColumn get celular => _celular ??= _constructCelular();
  GeneratedTextColumn _constructCelular() {
    return GeneratedTextColumn('CELULAR', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _contatoMeta = const VerificationMeta('contato');
  GeneratedTextColumn _contato;
  @override
  GeneratedTextColumn get contato => _contato ??= _constructContato();
  GeneratedTextColumn _constructContato() {
    return GeneratedTextColumn('CONTATO', $tableName, true,
        minTextLength: 1, maxTextLength: 50);
  }

  final VerificationMeta _codigoIbgeCidadeMeta =
      const VerificationMeta('codigoIbgeCidade');
  GeneratedIntColumn _codigoIbgeCidade;
  @override
  GeneratedIntColumn get codigoIbgeCidade =>
      _codigoIbgeCidade ??= _constructCodigoIbgeCidade();
  GeneratedIntColumn _constructCodigoIbgeCidade() {
    return GeneratedIntColumn(
      'CODIGO_IBGE_CIDADE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _codigoIbgeUfMeta =
      const VerificationMeta('codigoIbgeUf');
  GeneratedIntColumn _codigoIbgeUf;
  @override
  GeneratedIntColumn get codigoIbgeUf =>
      _codigoIbgeUf ??= _constructCodigoIbgeUf();
  GeneratedIntColumn _constructCodigoIbgeUf() {
    return GeneratedIntColumn(
      'CODIGO_IBGE_UF',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        nome,
        fantasia,
        email,
        url,
        cpfCnpj,
        rg,
        orgaoRg,
        dataEmissaoRg,
        sexo,
        inscricaoEstadual,
        inscricaoMunicipal,
        tipoPessoa,
        dataCadastro,
        logradouro,
        numero,
        complemento,
        cep,
        bairro,
        cidade,
        uf,
        telefone,
        celular,
        contato,
        codigoIbgeCidade,
        codigoIbgeUf
      ];
  @override
  $FornecedorsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'FORNECEDOR';
  @override
  final String actualTableName = 'FORNECEDOR';
  @override
  VerificationContext validateIntegrity(Insertable<Fornecedor> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME'], _nomeMeta));
    }
    if (data.containsKey('FANTASIA')) {
      context.handle(_fantasiaMeta,
          fantasia.isAcceptableOrUnknown(data['FANTASIA'], _fantasiaMeta));
    }
    if (data.containsKey('EMAIL')) {
      context.handle(
          _emailMeta, email.isAcceptableOrUnknown(data['EMAIL'], _emailMeta));
    }
    if (data.containsKey('URL')) {
      context.handle(
          _urlMeta, url.isAcceptableOrUnknown(data['URL'], _urlMeta));
    }
    if (data.containsKey('CPF_CNPJ')) {
      context.handle(_cpfCnpjMeta,
          cpfCnpj.isAcceptableOrUnknown(data['CPF_CNPJ'], _cpfCnpjMeta));
    }
    if (data.containsKey('RG')) {
      context.handle(_rgMeta, rg.isAcceptableOrUnknown(data['RG'], _rgMeta));
    }
    if (data.containsKey('ORGAO_RG')) {
      context.handle(_orgaoRgMeta,
          orgaoRg.isAcceptableOrUnknown(data['ORGAO_RG'], _orgaoRgMeta));
    }
    if (data.containsKey('DATA_EMISSAO_RG')) {
      context.handle(
          _dataEmissaoRgMeta,
          dataEmissaoRg.isAcceptableOrUnknown(
              data['DATA_EMISSAO_RG'], _dataEmissaoRgMeta));
    }
    if (data.containsKey('SEXO')) {
      context.handle(
          _sexoMeta, sexo.isAcceptableOrUnknown(data['SEXO'], _sexoMeta));
    }
    if (data.containsKey('INSCRICAO_ESTADUAL')) {
      context.handle(
          _inscricaoEstadualMeta,
          inscricaoEstadual.isAcceptableOrUnknown(
              data['INSCRICAO_ESTADUAL'], _inscricaoEstadualMeta));
    }
    if (data.containsKey('INSCRICAO_MUNICIPAL')) {
      context.handle(
          _inscricaoMunicipalMeta,
          inscricaoMunicipal.isAcceptableOrUnknown(
              data['INSCRICAO_MUNICIPAL'], _inscricaoMunicipalMeta));
    }
    if (data.containsKey('TIPO_PESSOA')) {
      context.handle(
          _tipoPessoaMeta,
          tipoPessoa.isAcceptableOrUnknown(
              data['TIPO_PESSOA'], _tipoPessoaMeta));
    }
    if (data.containsKey('DATA_CADASTRO')) {
      context.handle(
          _dataCadastroMeta,
          dataCadastro.isAcceptableOrUnknown(
              data['DATA_CADASTRO'], _dataCadastroMeta));
    }
    if (data.containsKey('LOGRADOURO')) {
      context.handle(
          _logradouroMeta,
          logradouro.isAcceptableOrUnknown(
              data['LOGRADOURO'], _logradouroMeta));
    }
    if (data.containsKey('NUMERO')) {
      context.handle(_numeroMeta,
          numero.isAcceptableOrUnknown(data['NUMERO'], _numeroMeta));
    }
    if (data.containsKey('COMPLEMENTO')) {
      context.handle(
          _complementoMeta,
          complemento.isAcceptableOrUnknown(
              data['COMPLEMENTO'], _complementoMeta));
    }
    if (data.containsKey('CEP')) {
      context.handle(
          _cepMeta, cep.isAcceptableOrUnknown(data['CEP'], _cepMeta));
    }
    if (data.containsKey('BAIRRO')) {
      context.handle(_bairroMeta,
          bairro.isAcceptableOrUnknown(data['BAIRRO'], _bairroMeta));
    }
    if (data.containsKey('CIDADE')) {
      context.handle(_cidadeMeta,
          cidade.isAcceptableOrUnknown(data['CIDADE'], _cidadeMeta));
    }
    if (data.containsKey('UF')) {
      context.handle(_ufMeta, uf.isAcceptableOrUnknown(data['UF'], _ufMeta));
    }
    if (data.containsKey('TELEFONE')) {
      context.handle(_telefoneMeta,
          telefone.isAcceptableOrUnknown(data['TELEFONE'], _telefoneMeta));
    }
    if (data.containsKey('CELULAR')) {
      context.handle(_celularMeta,
          celular.isAcceptableOrUnknown(data['CELULAR'], _celularMeta));
    }
    if (data.containsKey('CONTATO')) {
      context.handle(_contatoMeta,
          contato.isAcceptableOrUnknown(data['CONTATO'], _contatoMeta));
    }
    if (data.containsKey('CODIGO_IBGE_CIDADE')) {
      context.handle(
          _codigoIbgeCidadeMeta,
          codigoIbgeCidade.isAcceptableOrUnknown(
              data['CODIGO_IBGE_CIDADE'], _codigoIbgeCidadeMeta));
    }
    if (data.containsKey('CODIGO_IBGE_UF')) {
      context.handle(
          _codigoIbgeUfMeta,
          codigoIbgeUf.isAcceptableOrUnknown(
              data['CODIGO_IBGE_UF'], _codigoIbgeUfMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Fornecedor map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return Fornecedor.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $FornecedorsTable createAlias(String alias) {
    return $FornecedorsTable(_db, alias);
  }
}

class Ibpt extends DataClass implements Insertable<Ibpt> {
  final int id;
  final String ncm;
  final String ex;
  final String tipo;
  final String descricao;
  final double nacionalFederal;
  final double importadosFederal;
  final double estadual;
  final double municipal;
  final DateTime vigenciaInicio;
  final DateTime vigenciaFim;
  final String chave;
  final String versao;
  final String fonte;
  Ibpt(
      {@required this.id,
      this.ncm,
      this.ex,
      this.tipo,
      this.descricao,
      this.nacionalFederal,
      this.importadosFederal,
      this.estadual,
      this.municipal,
      this.vigenciaInicio,
      this.vigenciaFim,
      this.chave,
      this.versao,
      this.fonte});
  factory Ibpt.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    return Ibpt(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      ncm: stringType.mapFromDatabaseResponse(data['${effectivePrefix}NCM']),
      ex: stringType.mapFromDatabaseResponse(data['${effectivePrefix}EX']),
      tipo: stringType.mapFromDatabaseResponse(data['${effectivePrefix}TIPO']),
      descricao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
      nacionalFederal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}NACIONAL_FEDERAL']),
      importadosFederal: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}IMPORTADOS_FEDERAL']),
      estadual: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}ESTADUAL']),
      municipal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}MUNICIPAL']),
      vigenciaInicio: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}VIGENCIA_INICIO']),
      vigenciaFim: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}VIGENCIA_FIM']),
      chave:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CHAVE']),
      versao:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}VERSAO']),
      fonte:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}FONTE']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || ncm != null) {
      map['NCM'] = Variable<String>(ncm);
    }
    if (!nullToAbsent || ex != null) {
      map['EX'] = Variable<String>(ex);
    }
    if (!nullToAbsent || tipo != null) {
      map['TIPO'] = Variable<String>(tipo);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || nacionalFederal != null) {
      map['NACIONAL_FEDERAL'] = Variable<double>(nacionalFederal);
    }
    if (!nullToAbsent || importadosFederal != null) {
      map['IMPORTADOS_FEDERAL'] = Variable<double>(importadosFederal);
    }
    if (!nullToAbsent || estadual != null) {
      map['ESTADUAL'] = Variable<double>(estadual);
    }
    if (!nullToAbsent || municipal != null) {
      map['MUNICIPAL'] = Variable<double>(municipal);
    }
    if (!nullToAbsent || vigenciaInicio != null) {
      map['VIGENCIA_INICIO'] = Variable<DateTime>(vigenciaInicio);
    }
    if (!nullToAbsent || vigenciaFim != null) {
      map['VIGENCIA_FIM'] = Variable<DateTime>(vigenciaFim);
    }
    if (!nullToAbsent || chave != null) {
      map['CHAVE'] = Variable<String>(chave);
    }
    if (!nullToAbsent || versao != null) {
      map['VERSAO'] = Variable<String>(versao);
    }
    if (!nullToAbsent || fonte != null) {
      map['FONTE'] = Variable<String>(fonte);
    }
    return map;
  }

  IbptsCompanion toCompanion(bool nullToAbsent) {
    return IbptsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      ncm: ncm == null && nullToAbsent ? const Value.absent() : Value(ncm),
      ex: ex == null && nullToAbsent ? const Value.absent() : Value(ex),
      tipo: tipo == null && nullToAbsent ? const Value.absent() : Value(tipo),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      nacionalFederal: nacionalFederal == null && nullToAbsent
          ? const Value.absent()
          : Value(nacionalFederal),
      importadosFederal: importadosFederal == null && nullToAbsent
          ? const Value.absent()
          : Value(importadosFederal),
      estadual: estadual == null && nullToAbsent
          ? const Value.absent()
          : Value(estadual),
      municipal: municipal == null && nullToAbsent
          ? const Value.absent()
          : Value(municipal),
      vigenciaInicio: vigenciaInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(vigenciaInicio),
      vigenciaFim: vigenciaFim == null && nullToAbsent
          ? const Value.absent()
          : Value(vigenciaFim),
      chave:
          chave == null && nullToAbsent ? const Value.absent() : Value(chave),
      versao:
          versao == null && nullToAbsent ? const Value.absent() : Value(versao),
      fonte:
          fonte == null && nullToAbsent ? const Value.absent() : Value(fonte),
    );
  }

  factory Ibpt.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Ibpt(
      id: serializer.fromJson<int>(json['id']),
      ncm: serializer.fromJson<String>(json['ncm']),
      ex: serializer.fromJson<String>(json['ex']),
      tipo: serializer.fromJson<String>(json['tipo']),
      descricao: serializer.fromJson<String>(json['descricao']),
      nacionalFederal: serializer.fromJson<double>(json['nacionalFederal']),
      importadosFederal: serializer.fromJson<double>(json['importadosFederal']),
      estadual: serializer.fromJson<double>(json['estadual']),
      municipal: serializer.fromJson<double>(json['municipal']),
      vigenciaInicio: serializer.fromJson<DateTime>(json['vigenciaInicio']),
      vigenciaFim: serializer.fromJson<DateTime>(json['vigenciaFim']),
      chave: serializer.fromJson<String>(json['chave']),
      versao: serializer.fromJson<String>(json['versao']),
      fonte: serializer.fromJson<String>(json['fonte']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'ncm': serializer.toJson<String>(ncm),
      'ex': serializer.toJson<String>(ex),
      'tipo': serializer.toJson<String>(tipo),
      'descricao': serializer.toJson<String>(descricao),
      'nacionalFederal': serializer.toJson<double>(nacionalFederal),
      'importadosFederal': serializer.toJson<double>(importadosFederal),
      'estadual': serializer.toJson<double>(estadual),
      'municipal': serializer.toJson<double>(municipal),
      'vigenciaInicio': serializer.toJson<DateTime>(vigenciaInicio),
      'vigenciaFim': serializer.toJson<DateTime>(vigenciaFim),
      'chave': serializer.toJson<String>(chave),
      'versao': serializer.toJson<String>(versao),
      'fonte': serializer.toJson<String>(fonte),
    };
  }

  Ibpt copyWith(
          {int id,
          String ncm,
          String ex,
          String tipo,
          String descricao,
          double nacionalFederal,
          double importadosFederal,
          double estadual,
          double municipal,
          DateTime vigenciaInicio,
          DateTime vigenciaFim,
          String chave,
          String versao,
          String fonte}) =>
      Ibpt(
        id: id ?? this.id,
        ncm: ncm ?? this.ncm,
        ex: ex ?? this.ex,
        tipo: tipo ?? this.tipo,
        descricao: descricao ?? this.descricao,
        nacionalFederal: nacionalFederal ?? this.nacionalFederal,
        importadosFederal: importadosFederal ?? this.importadosFederal,
        estadual: estadual ?? this.estadual,
        municipal: municipal ?? this.municipal,
        vigenciaInicio: vigenciaInicio ?? this.vigenciaInicio,
        vigenciaFim: vigenciaFim ?? this.vigenciaFim,
        chave: chave ?? this.chave,
        versao: versao ?? this.versao,
        fonte: fonte ?? this.fonte,
      );
  @override
  String toString() {
    return (StringBuffer('Ibpt(')
          ..write('id: $id, ')
          ..write('ncm: $ncm, ')
          ..write('ex: $ex, ')
          ..write('tipo: $tipo, ')
          ..write('descricao: $descricao, ')
          ..write('nacionalFederal: $nacionalFederal, ')
          ..write('importadosFederal: $importadosFederal, ')
          ..write('estadual: $estadual, ')
          ..write('municipal: $municipal, ')
          ..write('vigenciaInicio: $vigenciaInicio, ')
          ..write('vigenciaFim: $vigenciaFim, ')
          ..write('chave: $chave, ')
          ..write('versao: $versao, ')
          ..write('fonte: $fonte')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          ncm.hashCode,
          $mrjc(
              ex.hashCode,
              $mrjc(
                  tipo.hashCode,
                  $mrjc(
                      descricao.hashCode,
                      $mrjc(
                          nacionalFederal.hashCode,
                          $mrjc(
                              importadosFederal.hashCode,
                              $mrjc(
                                  estadual.hashCode,
                                  $mrjc(
                                      municipal.hashCode,
                                      $mrjc(
                                          vigenciaInicio.hashCode,
                                          $mrjc(
                                              vigenciaFim.hashCode,
                                              $mrjc(
                                                  chave.hashCode,
                                                  $mrjc(
                                                      versao.hashCode,
                                                      fonte
                                                          .hashCode))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is Ibpt &&
          other.id == this.id &&
          other.ncm == this.ncm &&
          other.ex == this.ex &&
          other.tipo == this.tipo &&
          other.descricao == this.descricao &&
          other.nacionalFederal == this.nacionalFederal &&
          other.importadosFederal == this.importadosFederal &&
          other.estadual == this.estadual &&
          other.municipal == this.municipal &&
          other.vigenciaInicio == this.vigenciaInicio &&
          other.vigenciaFim == this.vigenciaFim &&
          other.chave == this.chave &&
          other.versao == this.versao &&
          other.fonte == this.fonte);
}

class IbptsCompanion extends UpdateCompanion<Ibpt> {
  final Value<int> id;
  final Value<String> ncm;
  final Value<String> ex;
  final Value<String> tipo;
  final Value<String> descricao;
  final Value<double> nacionalFederal;
  final Value<double> importadosFederal;
  final Value<double> estadual;
  final Value<double> municipal;
  final Value<DateTime> vigenciaInicio;
  final Value<DateTime> vigenciaFim;
  final Value<String> chave;
  final Value<String> versao;
  final Value<String> fonte;
  const IbptsCompanion({
    this.id = const Value.absent(),
    this.ncm = const Value.absent(),
    this.ex = const Value.absent(),
    this.tipo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.nacionalFederal = const Value.absent(),
    this.importadosFederal = const Value.absent(),
    this.estadual = const Value.absent(),
    this.municipal = const Value.absent(),
    this.vigenciaInicio = const Value.absent(),
    this.vigenciaFim = const Value.absent(),
    this.chave = const Value.absent(),
    this.versao = const Value.absent(),
    this.fonte = const Value.absent(),
  });
  IbptsCompanion.insert({
    this.id = const Value.absent(),
    this.ncm = const Value.absent(),
    this.ex = const Value.absent(),
    this.tipo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.nacionalFederal = const Value.absent(),
    this.importadosFederal = const Value.absent(),
    this.estadual = const Value.absent(),
    this.municipal = const Value.absent(),
    this.vigenciaInicio = const Value.absent(),
    this.vigenciaFim = const Value.absent(),
    this.chave = const Value.absent(),
    this.versao = const Value.absent(),
    this.fonte = const Value.absent(),
  });
  static Insertable<Ibpt> custom({
    Expression<int> id,
    Expression<String> ncm,
    Expression<String> ex,
    Expression<String> tipo,
    Expression<String> descricao,
    Expression<double> nacionalFederal,
    Expression<double> importadosFederal,
    Expression<double> estadual,
    Expression<double> municipal,
    Expression<DateTime> vigenciaInicio,
    Expression<DateTime> vigenciaFim,
    Expression<String> chave,
    Expression<String> versao,
    Expression<String> fonte,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (ncm != null) 'NCM': ncm,
      if (ex != null) 'EX': ex,
      if (tipo != null) 'TIPO': tipo,
      if (descricao != null) 'DESCRICAO': descricao,
      if (nacionalFederal != null) 'NACIONAL_FEDERAL': nacionalFederal,
      if (importadosFederal != null) 'IMPORTADOS_FEDERAL': importadosFederal,
      if (estadual != null) 'ESTADUAL': estadual,
      if (municipal != null) 'MUNICIPAL': municipal,
      if (vigenciaInicio != null) 'VIGENCIA_INICIO': vigenciaInicio,
      if (vigenciaFim != null) 'VIGENCIA_FIM': vigenciaFim,
      if (chave != null) 'CHAVE': chave,
      if (versao != null) 'VERSAO': versao,
      if (fonte != null) 'FONTE': fonte,
    });
  }

  IbptsCompanion copyWith(
      {Value<int> id,
      Value<String> ncm,
      Value<String> ex,
      Value<String> tipo,
      Value<String> descricao,
      Value<double> nacionalFederal,
      Value<double> importadosFederal,
      Value<double> estadual,
      Value<double> municipal,
      Value<DateTime> vigenciaInicio,
      Value<DateTime> vigenciaFim,
      Value<String> chave,
      Value<String> versao,
      Value<String> fonte}) {
    return IbptsCompanion(
      id: id ?? this.id,
      ncm: ncm ?? this.ncm,
      ex: ex ?? this.ex,
      tipo: tipo ?? this.tipo,
      descricao: descricao ?? this.descricao,
      nacionalFederal: nacionalFederal ?? this.nacionalFederal,
      importadosFederal: importadosFederal ?? this.importadosFederal,
      estadual: estadual ?? this.estadual,
      municipal: municipal ?? this.municipal,
      vigenciaInicio: vigenciaInicio ?? this.vigenciaInicio,
      vigenciaFim: vigenciaFim ?? this.vigenciaFim,
      chave: chave ?? this.chave,
      versao: versao ?? this.versao,
      fonte: fonte ?? this.fonte,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (ncm.present) {
      map['NCM'] = Variable<String>(ncm.value);
    }
    if (ex.present) {
      map['EX'] = Variable<String>(ex.value);
    }
    if (tipo.present) {
      map['TIPO'] = Variable<String>(tipo.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (nacionalFederal.present) {
      map['NACIONAL_FEDERAL'] = Variable<double>(nacionalFederal.value);
    }
    if (importadosFederal.present) {
      map['IMPORTADOS_FEDERAL'] = Variable<double>(importadosFederal.value);
    }
    if (estadual.present) {
      map['ESTADUAL'] = Variable<double>(estadual.value);
    }
    if (municipal.present) {
      map['MUNICIPAL'] = Variable<double>(municipal.value);
    }
    if (vigenciaInicio.present) {
      map['VIGENCIA_INICIO'] = Variable<DateTime>(vigenciaInicio.value);
    }
    if (vigenciaFim.present) {
      map['VIGENCIA_FIM'] = Variable<DateTime>(vigenciaFim.value);
    }
    if (chave.present) {
      map['CHAVE'] = Variable<String>(chave.value);
    }
    if (versao.present) {
      map['VERSAO'] = Variable<String>(versao.value);
    }
    if (fonte.present) {
      map['FONTE'] = Variable<String>(fonte.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('IbptsCompanion(')
          ..write('id: $id, ')
          ..write('ncm: $ncm, ')
          ..write('ex: $ex, ')
          ..write('tipo: $tipo, ')
          ..write('descricao: $descricao, ')
          ..write('nacionalFederal: $nacionalFederal, ')
          ..write('importadosFederal: $importadosFederal, ')
          ..write('estadual: $estadual, ')
          ..write('municipal: $municipal, ')
          ..write('vigenciaInicio: $vigenciaInicio, ')
          ..write('vigenciaFim: $vigenciaFim, ')
          ..write('chave: $chave, ')
          ..write('versao: $versao, ')
          ..write('fonte: $fonte')
          ..write(')'))
        .toString();
  }
}

class $IbptsTable extends Ibpts with TableInfo<$IbptsTable, Ibpt> {
  final GeneratedDatabase _db;
  final String _alias;
  $IbptsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _ncmMeta = const VerificationMeta('ncm');
  GeneratedTextColumn _ncm;
  @override
  GeneratedTextColumn get ncm => _ncm ??= _constructNcm();
  GeneratedTextColumn _constructNcm() {
    return GeneratedTextColumn('NCM', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _exMeta = const VerificationMeta('ex');
  GeneratedTextColumn _ex;
  @override
  GeneratedTextColumn get ex => _ex ??= _constructEx();
  GeneratedTextColumn _constructEx() {
    return GeneratedTextColumn('EX', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _tipoMeta = const VerificationMeta('tipo');
  GeneratedTextColumn _tipo;
  @override
  GeneratedTextColumn get tipo => _tipo ??= _constructTipo();
  GeneratedTextColumn _constructTipo() {
    return GeneratedTextColumn('TIPO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  GeneratedTextColumn _descricao;
  @override
  GeneratedTextColumn get descricao => _descricao ??= _constructDescricao();
  GeneratedTextColumn _constructDescricao() {
    return GeneratedTextColumn('DESCRICAO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _nacionalFederalMeta =
      const VerificationMeta('nacionalFederal');
  GeneratedRealColumn _nacionalFederal;
  @override
  GeneratedRealColumn get nacionalFederal =>
      _nacionalFederal ??= _constructNacionalFederal();
  GeneratedRealColumn _constructNacionalFederal() {
    return GeneratedRealColumn(
      'NACIONAL_FEDERAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _importadosFederalMeta =
      const VerificationMeta('importadosFederal');
  GeneratedRealColumn _importadosFederal;
  @override
  GeneratedRealColumn get importadosFederal =>
      _importadosFederal ??= _constructImportadosFederal();
  GeneratedRealColumn _constructImportadosFederal() {
    return GeneratedRealColumn(
      'IMPORTADOS_FEDERAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _estadualMeta = const VerificationMeta('estadual');
  GeneratedRealColumn _estadual;
  @override
  GeneratedRealColumn get estadual => _estadual ??= _constructEstadual();
  GeneratedRealColumn _constructEstadual() {
    return GeneratedRealColumn(
      'ESTADUAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _municipalMeta = const VerificationMeta('municipal');
  GeneratedRealColumn _municipal;
  @override
  GeneratedRealColumn get municipal => _municipal ??= _constructMunicipal();
  GeneratedRealColumn _constructMunicipal() {
    return GeneratedRealColumn(
      'MUNICIPAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _vigenciaInicioMeta =
      const VerificationMeta('vigenciaInicio');
  GeneratedDateTimeColumn _vigenciaInicio;
  @override
  GeneratedDateTimeColumn get vigenciaInicio =>
      _vigenciaInicio ??= _constructVigenciaInicio();
  GeneratedDateTimeColumn _constructVigenciaInicio() {
    return GeneratedDateTimeColumn(
      'VIGENCIA_INICIO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _vigenciaFimMeta =
      const VerificationMeta('vigenciaFim');
  GeneratedDateTimeColumn _vigenciaFim;
  @override
  GeneratedDateTimeColumn get vigenciaFim =>
      _vigenciaFim ??= _constructVigenciaFim();
  GeneratedDateTimeColumn _constructVigenciaFim() {
    return GeneratedDateTimeColumn(
      'VIGENCIA_FIM',
      $tableName,
      true,
    );
  }

  final VerificationMeta _chaveMeta = const VerificationMeta('chave');
  GeneratedTextColumn _chave;
  @override
  GeneratedTextColumn get chave => _chave ??= _constructChave();
  GeneratedTextColumn _constructChave() {
    return GeneratedTextColumn('CHAVE', $tableName, true,
        minTextLength: 1, maxTextLength: 6);
  }

  final VerificationMeta _versaoMeta = const VerificationMeta('versao');
  GeneratedTextColumn _versao;
  @override
  GeneratedTextColumn get versao => _versao ??= _constructVersao();
  GeneratedTextColumn _constructVersao() {
    return GeneratedTextColumn('VERSAO', $tableName, true,
        minTextLength: 1, maxTextLength: 6);
  }

  final VerificationMeta _fonteMeta = const VerificationMeta('fonte');
  GeneratedTextColumn _fonte;
  @override
  GeneratedTextColumn get fonte => _fonte ??= _constructFonte();
  GeneratedTextColumn _constructFonte() {
    return GeneratedTextColumn('FONTE', $tableName, true,
        minTextLength: 1, maxTextLength: 34);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        ncm,
        ex,
        tipo,
        descricao,
        nacionalFederal,
        importadosFederal,
        estadual,
        municipal,
        vigenciaInicio,
        vigenciaFim,
        chave,
        versao,
        fonte
      ];
  @override
  $IbptsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'IBPT';
  @override
  final String actualTableName = 'IBPT';
  @override
  VerificationContext validateIntegrity(Insertable<Ibpt> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('NCM')) {
      context.handle(
          _ncmMeta, ncm.isAcceptableOrUnknown(data['NCM'], _ncmMeta));
    }
    if (data.containsKey('EX')) {
      context.handle(_exMeta, ex.isAcceptableOrUnknown(data['EX'], _exMeta));
    }
    if (data.containsKey('TIPO')) {
      context.handle(
          _tipoMeta, tipo.isAcceptableOrUnknown(data['TIPO'], _tipoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO'], _descricaoMeta));
    }
    if (data.containsKey('NACIONAL_FEDERAL')) {
      context.handle(
          _nacionalFederalMeta,
          nacionalFederal.isAcceptableOrUnknown(
              data['NACIONAL_FEDERAL'], _nacionalFederalMeta));
    }
    if (data.containsKey('IMPORTADOS_FEDERAL')) {
      context.handle(
          _importadosFederalMeta,
          importadosFederal.isAcceptableOrUnknown(
              data['IMPORTADOS_FEDERAL'], _importadosFederalMeta));
    }
    if (data.containsKey('ESTADUAL')) {
      context.handle(_estadualMeta,
          estadual.isAcceptableOrUnknown(data['ESTADUAL'], _estadualMeta));
    }
    if (data.containsKey('MUNICIPAL')) {
      context.handle(_municipalMeta,
          municipal.isAcceptableOrUnknown(data['MUNICIPAL'], _municipalMeta));
    }
    if (data.containsKey('VIGENCIA_INICIO')) {
      context.handle(
          _vigenciaInicioMeta,
          vigenciaInicio.isAcceptableOrUnknown(
              data['VIGENCIA_INICIO'], _vigenciaInicioMeta));
    }
    if (data.containsKey('VIGENCIA_FIM')) {
      context.handle(
          _vigenciaFimMeta,
          vigenciaFim.isAcceptableOrUnknown(
              data['VIGENCIA_FIM'], _vigenciaFimMeta));
    }
    if (data.containsKey('CHAVE')) {
      context.handle(
          _chaveMeta, chave.isAcceptableOrUnknown(data['CHAVE'], _chaveMeta));
    }
    if (data.containsKey('VERSAO')) {
      context.handle(_versaoMeta,
          versao.isAcceptableOrUnknown(data['VERSAO'], _versaoMeta));
    }
    if (data.containsKey('FONTE')) {
      context.handle(
          _fonteMeta, fonte.isAcceptableOrUnknown(data['FONTE'], _fonteMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Ibpt map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return Ibpt.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $IbptsTable createAlias(String alias) {
    return $IbptsTable(_db, alias);
  }
}

class LogImportacao extends DataClass implements Insertable<LogImportacao> {
  final int id;
  final DateTime dataImportacao;
  final String horaImportacao;
  final String erro;
  final String registro;
  LogImportacao(
      {@required this.id,
      this.dataImportacao,
      this.horaImportacao,
      this.erro,
      this.registro});
  factory LogImportacao.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final stringType = db.typeSystem.forDartType<String>();
    return LogImportacao(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      dataImportacao: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_IMPORTACAO']),
      horaImportacao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_IMPORTACAO']),
      erro: stringType.mapFromDatabaseResponse(data['${effectivePrefix}ERRO']),
      registro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || dataImportacao != null) {
      map['DATA_IMPORTACAO'] = Variable<DateTime>(dataImportacao);
    }
    if (!nullToAbsent || horaImportacao != null) {
      map['HORA_IMPORTACAO'] = Variable<String>(horaImportacao);
    }
    if (!nullToAbsent || erro != null) {
      map['ERRO'] = Variable<String>(erro);
    }
    if (!nullToAbsent || registro != null) {
      map['REGISTRO'] = Variable<String>(registro);
    }
    return map;
  }

  LogImportacaosCompanion toCompanion(bool nullToAbsent) {
    return LogImportacaosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      dataImportacao: dataImportacao == null && nullToAbsent
          ? const Value.absent()
          : Value(dataImportacao),
      horaImportacao: horaImportacao == null && nullToAbsent
          ? const Value.absent()
          : Value(horaImportacao),
      erro: erro == null && nullToAbsent ? const Value.absent() : Value(erro),
      registro: registro == null && nullToAbsent
          ? const Value.absent()
          : Value(registro),
    );
  }

  factory LogImportacao.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return LogImportacao(
      id: serializer.fromJson<int>(json['id']),
      dataImportacao: serializer.fromJson<DateTime>(json['dataImportacao']),
      horaImportacao: serializer.fromJson<String>(json['horaImportacao']),
      erro: serializer.fromJson<String>(json['erro']),
      registro: serializer.fromJson<String>(json['registro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'dataImportacao': serializer.toJson<DateTime>(dataImportacao),
      'horaImportacao': serializer.toJson<String>(horaImportacao),
      'erro': serializer.toJson<String>(erro),
      'registro': serializer.toJson<String>(registro),
    };
  }

  LogImportacao copyWith(
          {int id,
          DateTime dataImportacao,
          String horaImportacao,
          String erro,
          String registro}) =>
      LogImportacao(
        id: id ?? this.id,
        dataImportacao: dataImportacao ?? this.dataImportacao,
        horaImportacao: horaImportacao ?? this.horaImportacao,
        erro: erro ?? this.erro,
        registro: registro ?? this.registro,
      );
  @override
  String toString() {
    return (StringBuffer('LogImportacao(')
          ..write('id: $id, ')
          ..write('dataImportacao: $dataImportacao, ')
          ..write('horaImportacao: $horaImportacao, ')
          ..write('erro: $erro, ')
          ..write('registro: $registro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          dataImportacao.hashCode,
          $mrjc(horaImportacao.hashCode,
              $mrjc(erro.hashCode, registro.hashCode)))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is LogImportacao &&
          other.id == this.id &&
          other.dataImportacao == this.dataImportacao &&
          other.horaImportacao == this.horaImportacao &&
          other.erro == this.erro &&
          other.registro == this.registro);
}

class LogImportacaosCompanion extends UpdateCompanion<LogImportacao> {
  final Value<int> id;
  final Value<DateTime> dataImportacao;
  final Value<String> horaImportacao;
  final Value<String> erro;
  final Value<String> registro;
  const LogImportacaosCompanion({
    this.id = const Value.absent(),
    this.dataImportacao = const Value.absent(),
    this.horaImportacao = const Value.absent(),
    this.erro = const Value.absent(),
    this.registro = const Value.absent(),
  });
  LogImportacaosCompanion.insert({
    this.id = const Value.absent(),
    this.dataImportacao = const Value.absent(),
    this.horaImportacao = const Value.absent(),
    this.erro = const Value.absent(),
    this.registro = const Value.absent(),
  });
  static Insertable<LogImportacao> custom({
    Expression<int> id,
    Expression<DateTime> dataImportacao,
    Expression<String> horaImportacao,
    Expression<String> erro,
    Expression<String> registro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (dataImportacao != null) 'DATA_IMPORTACAO': dataImportacao,
      if (horaImportacao != null) 'HORA_IMPORTACAO': horaImportacao,
      if (erro != null) 'ERRO': erro,
      if (registro != null) 'REGISTRO': registro,
    });
  }

  LogImportacaosCompanion copyWith(
      {Value<int> id,
      Value<DateTime> dataImportacao,
      Value<String> horaImportacao,
      Value<String> erro,
      Value<String> registro}) {
    return LogImportacaosCompanion(
      id: id ?? this.id,
      dataImportacao: dataImportacao ?? this.dataImportacao,
      horaImportacao: horaImportacao ?? this.horaImportacao,
      erro: erro ?? this.erro,
      registro: registro ?? this.registro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (dataImportacao.present) {
      map['DATA_IMPORTACAO'] = Variable<DateTime>(dataImportacao.value);
    }
    if (horaImportacao.present) {
      map['HORA_IMPORTACAO'] = Variable<String>(horaImportacao.value);
    }
    if (erro.present) {
      map['ERRO'] = Variable<String>(erro.value);
    }
    if (registro.present) {
      map['REGISTRO'] = Variable<String>(registro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('LogImportacaosCompanion(')
          ..write('id: $id, ')
          ..write('dataImportacao: $dataImportacao, ')
          ..write('horaImportacao: $horaImportacao, ')
          ..write('erro: $erro, ')
          ..write('registro: $registro')
          ..write(')'))
        .toString();
  }
}

class $LogImportacaosTable extends LogImportacaos
    with TableInfo<$LogImportacaosTable, LogImportacao> {
  final GeneratedDatabase _db;
  final String _alias;
  $LogImportacaosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _dataImportacaoMeta =
      const VerificationMeta('dataImportacao');
  GeneratedDateTimeColumn _dataImportacao;
  @override
  GeneratedDateTimeColumn get dataImportacao =>
      _dataImportacao ??= _constructDataImportacao();
  GeneratedDateTimeColumn _constructDataImportacao() {
    return GeneratedDateTimeColumn(
      'DATA_IMPORTACAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaImportacaoMeta =
      const VerificationMeta('horaImportacao');
  GeneratedTextColumn _horaImportacao;
  @override
  GeneratedTextColumn get horaImportacao =>
      _horaImportacao ??= _constructHoraImportacao();
  GeneratedTextColumn _constructHoraImportacao() {
    return GeneratedTextColumn('HORA_IMPORTACAO', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _erroMeta = const VerificationMeta('erro');
  GeneratedTextColumn _erro;
  @override
  GeneratedTextColumn get erro => _erro ??= _constructErro();
  GeneratedTextColumn _constructErro() {
    return GeneratedTextColumn('ERRO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _registroMeta = const VerificationMeta('registro');
  GeneratedTextColumn _registro;
  @override
  GeneratedTextColumn get registro => _registro ??= _constructRegistro();
  GeneratedTextColumn _constructRegistro() {
    return GeneratedTextColumn('REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, dataImportacao, horaImportacao, erro, registro];
  @override
  $LogImportacaosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'LOG_IMPORTACAO';
  @override
  final String actualTableName = 'LOG_IMPORTACAO';
  @override
  VerificationContext validateIntegrity(Insertable<LogImportacao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('DATA_IMPORTACAO')) {
      context.handle(
          _dataImportacaoMeta,
          dataImportacao.isAcceptableOrUnknown(
              data['DATA_IMPORTACAO'], _dataImportacaoMeta));
    }
    if (data.containsKey('HORA_IMPORTACAO')) {
      context.handle(
          _horaImportacaoMeta,
          horaImportacao.isAcceptableOrUnknown(
              data['HORA_IMPORTACAO'], _horaImportacaoMeta));
    }
    if (data.containsKey('ERRO')) {
      context.handle(
          _erroMeta, erro.isAcceptableOrUnknown(data['ERRO'], _erroMeta));
    }
    if (data.containsKey('REGISTRO')) {
      context.handle(_registroMeta,
          registro.isAcceptableOrUnknown(data['REGISTRO'], _registroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  LogImportacao map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return LogImportacao.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $LogImportacaosTable createAlias(String alias) {
    return $LogImportacaosTable(_db, alias);
  }
}

class PdvCaixa extends DataClass implements Insertable<PdvCaixa> {
  final int id;
  final String nome;
  final DateTime dataCadastro;
  PdvCaixa({@required this.id, this.nome, this.dataCadastro});
  factory PdvCaixa.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    return PdvCaixa(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      nome: stringType.mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
      dataCadastro: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_CADASTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || dataCadastro != null) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro);
    }
    return map;
  }

  PdvCaixasCompanion toCompanion(bool nullToAbsent) {
    return PdvCaixasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      dataCadastro: dataCadastro == null && nullToAbsent
          ? const Value.absent()
          : Value(dataCadastro),
    );
  }

  factory PdvCaixa.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvCaixa(
      id: serializer.fromJson<int>(json['id']),
      nome: serializer.fromJson<String>(json['nome']),
      dataCadastro: serializer.fromJson<DateTime>(json['dataCadastro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'nome': serializer.toJson<String>(nome),
      'dataCadastro': serializer.toJson<DateTime>(dataCadastro),
    };
  }

  PdvCaixa copyWith({int id, String nome, DateTime dataCadastro}) => PdvCaixa(
        id: id ?? this.id,
        nome: nome ?? this.nome,
        dataCadastro: dataCadastro ?? this.dataCadastro,
      );
  @override
  String toString() {
    return (StringBuffer('PdvCaixa(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('dataCadastro: $dataCadastro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode =>
      $mrjf($mrjc(id.hashCode, $mrjc(nome.hashCode, dataCadastro.hashCode)));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvCaixa &&
          other.id == this.id &&
          other.nome == this.nome &&
          other.dataCadastro == this.dataCadastro);
}

class PdvCaixasCompanion extends UpdateCompanion<PdvCaixa> {
  final Value<int> id;
  final Value<String> nome;
  final Value<DateTime> dataCadastro;
  const PdvCaixasCompanion({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.dataCadastro = const Value.absent(),
  });
  PdvCaixasCompanion.insert({
    this.id = const Value.absent(),
    this.nome = const Value.absent(),
    this.dataCadastro = const Value.absent(),
  });
  static Insertable<PdvCaixa> custom({
    Expression<int> id,
    Expression<String> nome,
    Expression<DateTime> dataCadastro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (nome != null) 'NOME': nome,
      if (dataCadastro != null) 'DATA_CADASTRO': dataCadastro,
    });
  }

  PdvCaixasCompanion copyWith(
      {Value<int> id, Value<String> nome, Value<DateTime> dataCadastro}) {
    return PdvCaixasCompanion(
      id: id ?? this.id,
      nome: nome ?? this.nome,
      dataCadastro: dataCadastro ?? this.dataCadastro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (dataCadastro.present) {
      map['DATA_CADASTRO'] = Variable<DateTime>(dataCadastro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvCaixasCompanion(')
          ..write('id: $id, ')
          ..write('nome: $nome, ')
          ..write('dataCadastro: $dataCadastro')
          ..write(')'))
        .toString();
  }
}

class $PdvCaixasTable extends PdvCaixas
    with TableInfo<$PdvCaixasTable, PdvCaixa> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvCaixasTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  GeneratedTextColumn _nome;
  @override
  GeneratedTextColumn get nome => _nome ??= _constructNome();
  GeneratedTextColumn _constructNome() {
    return GeneratedTextColumn('NOME', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _dataCadastroMeta =
      const VerificationMeta('dataCadastro');
  GeneratedDateTimeColumn _dataCadastro;
  @override
  GeneratedDateTimeColumn get dataCadastro =>
      _dataCadastro ??= _constructDataCadastro();
  GeneratedDateTimeColumn _constructDataCadastro() {
    return GeneratedDateTimeColumn(
      'DATA_CADASTRO',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [id, nome, dataCadastro];
  @override
  $PdvCaixasTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_CAIXA';
  @override
  final String actualTableName = 'PDV_CAIXA';
  @override
  VerificationContext validateIntegrity(Insertable<PdvCaixa> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME'], _nomeMeta));
    }
    if (data.containsKey('DATA_CADASTRO')) {
      context.handle(
          _dataCadastroMeta,
          dataCadastro.isAcceptableOrUnknown(
              data['DATA_CADASTRO'], _dataCadastroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvCaixa map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvCaixa.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvCaixasTable createAlias(String alias) {
    return $PdvCaixasTable(_db, alias);
  }
}

class PdvConfiguracao extends DataClass implements Insertable<PdvConfiguracao> {
  final int id;
  final int idEcfImpressora;
  final int idPdvCaixa;
  final String mensagemCupom;
  final String portaEcf;
  final String ipServidor;
  final String ipSitef;
  final String tipoTef;
  final String tituloTelaCaixa;
  final String caminhoImagensProdutos;
  final String caminhoImagensMarketing;
  final String corJanelasInternas;
  final String marketingAtivo;
  final int cfopEcf;
  final int timeoutEcf;
  final int intervaloEcf;
  final String descricaoSuprimento;
  final String descricaoSangria;
  final int tefTipoGp;
  final int tefTempoEspera;
  final int tefEsperaSts;
  final int tefNumeroVias;
  final int decimaisQuantidade;
  final int decimaisValor;
  final int bitsPorSegundo;
  final int quantidadeMaximaCartoes;
  final String pesquisaParte;
  final String laudo;
  final DateTime dataAtualizacaoEstoque;
  final String pedeCpfCupom;
  final int tipoIntegracao;
  final int timerIntegracao;
  final String gavetaSinalInvertido;
  final int gavetaUtilizacao;
  final String usaTecladoReduzido;
  PdvConfiguracao(
      {@required this.id,
      this.idEcfImpressora,
      this.idPdvCaixa,
      this.mensagemCupom,
      this.portaEcf,
      this.ipServidor,
      this.ipSitef,
      this.tipoTef,
      this.tituloTelaCaixa,
      this.caminhoImagensProdutos,
      this.caminhoImagensMarketing,
      this.corJanelasInternas,
      this.marketingAtivo,
      this.cfopEcf,
      this.timeoutEcf,
      this.intervaloEcf,
      this.descricaoSuprimento,
      this.descricaoSangria,
      this.tefTipoGp,
      this.tefTempoEspera,
      this.tefEsperaSts,
      this.tefNumeroVias,
      this.decimaisQuantidade,
      this.decimaisValor,
      this.bitsPorSegundo,
      this.quantidadeMaximaCartoes,
      this.pesquisaParte,
      this.laudo,
      this.dataAtualizacaoEstoque,
      this.pedeCpfCupom,
      this.tipoIntegracao,
      this.timerIntegracao,
      this.gavetaSinalInvertido,
      this.gavetaUtilizacao,
      this.usaTecladoReduzido});
  factory PdvConfiguracao.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    return PdvConfiguracao(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idEcfImpressora: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
      idPdvCaixa: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_CAIXA']),
      mensagemCupom: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}MENSAGEM_CUPOM']),
      portaEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}PORTA_ECF']),
      ipServidor: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}IP_SERVIDOR']),
      ipSitef: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}IP_SITEF']),
      tipoTef: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_TEF']),
      tituloTelaCaixa: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TITULO_TELA_CAIXA']),
      caminhoImagensProdutos: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}CAMINHO_IMAGENS_PRODUTOS']),
      caminhoImagensMarketing: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}CAMINHO_IMAGENS_MARKETING']),
      corJanelasInternas: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}COR_JANELAS_INTERNAS']),
      marketingAtivo: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}MARKETING_ATIVO']),
      cfopEcf:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}CFOP_ECF']),
      timeoutEcf: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIMEOUT_ECF']),
      intervaloEcf: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}INTERVALO_ECF']),
      descricaoSuprimento: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}DESCRICAO_SUPRIMENTO']),
      descricaoSangria: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO_SANGRIA']),
      tefTipoGp: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}TEF_TIPO_GP']),
      tefTempoEspera: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}TEF_TEMPO_ESPERA']),
      tefEsperaSts: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}TEF_ESPERA_STS']),
      tefNumeroVias: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}TEF_NUMERO_VIAS']),
      decimaisQuantidade: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}DECIMAIS_QUANTIDADE']),
      decimaisValor: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}DECIMAIS_VALOR']),
      bitsPorSegundo: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}BITS_POR_SEGUNDO']),
      quantidadeMaximaCartoes: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}QUANTIDADE_MAXIMA_CARTOES']),
      pesquisaParte: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}PESQUISA_PARTE']),
      laudo:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}LAUDO']),
      dataAtualizacaoEstoque: dateTimeType.mapFromDatabaseResponse(
          data['${effectivePrefix}DATA_ATUALIZACAO_ESTOQUE']),
      pedeCpfCupom: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}PEDE_CPF_CUPOM']),
      tipoIntegracao: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_INTEGRACAO']),
      timerIntegracao: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIMER_INTEGRACAO']),
      gavetaSinalInvertido: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}GAVETA_SINAL_INVERTIDO']),
      gavetaUtilizacao: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}GAVETA_UTILIZACAO']),
      usaTecladoReduzido: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}USA_TECLADO_REDUZIDO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEcfImpressora != null) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora);
    }
    if (!nullToAbsent || idPdvCaixa != null) {
      map['ID_PDV_CAIXA'] = Variable<int>(idPdvCaixa);
    }
    if (!nullToAbsent || mensagemCupom != null) {
      map['MENSAGEM_CUPOM'] = Variable<String>(mensagemCupom);
    }
    if (!nullToAbsent || portaEcf != null) {
      map['PORTA_ECF'] = Variable<String>(portaEcf);
    }
    if (!nullToAbsent || ipServidor != null) {
      map['IP_SERVIDOR'] = Variable<String>(ipServidor);
    }
    if (!nullToAbsent || ipSitef != null) {
      map['IP_SITEF'] = Variable<String>(ipSitef);
    }
    if (!nullToAbsent || tipoTef != null) {
      map['TIPO_TEF'] = Variable<String>(tipoTef);
    }
    if (!nullToAbsent || tituloTelaCaixa != null) {
      map['TITULO_TELA_CAIXA'] = Variable<String>(tituloTelaCaixa);
    }
    if (!nullToAbsent || caminhoImagensProdutos != null) {
      map['CAMINHO_IMAGENS_PRODUTOS'] =
          Variable<String>(caminhoImagensProdutos);
    }
    if (!nullToAbsent || caminhoImagensMarketing != null) {
      map['CAMINHO_IMAGENS_MARKETING'] =
          Variable<String>(caminhoImagensMarketing);
    }
    if (!nullToAbsent || corJanelasInternas != null) {
      map['COR_JANELAS_INTERNAS'] = Variable<String>(corJanelasInternas);
    }
    if (!nullToAbsent || marketingAtivo != null) {
      map['MARKETING_ATIVO'] = Variable<String>(marketingAtivo);
    }
    if (!nullToAbsent || cfopEcf != null) {
      map['CFOP_ECF'] = Variable<int>(cfopEcf);
    }
    if (!nullToAbsent || timeoutEcf != null) {
      map['TIMEOUT_ECF'] = Variable<int>(timeoutEcf);
    }
    if (!nullToAbsent || intervaloEcf != null) {
      map['INTERVALO_ECF'] = Variable<int>(intervaloEcf);
    }
    if (!nullToAbsent || descricaoSuprimento != null) {
      map['DESCRICAO_SUPRIMENTO'] = Variable<String>(descricaoSuprimento);
    }
    if (!nullToAbsent || descricaoSangria != null) {
      map['DESCRICAO_SANGRIA'] = Variable<String>(descricaoSangria);
    }
    if (!nullToAbsent || tefTipoGp != null) {
      map['TEF_TIPO_GP'] = Variable<int>(tefTipoGp);
    }
    if (!nullToAbsent || tefTempoEspera != null) {
      map['TEF_TEMPO_ESPERA'] = Variable<int>(tefTempoEspera);
    }
    if (!nullToAbsent || tefEsperaSts != null) {
      map['TEF_ESPERA_STS'] = Variable<int>(tefEsperaSts);
    }
    if (!nullToAbsent || tefNumeroVias != null) {
      map['TEF_NUMERO_VIAS'] = Variable<int>(tefNumeroVias);
    }
    if (!nullToAbsent || decimaisQuantidade != null) {
      map['DECIMAIS_QUANTIDADE'] = Variable<int>(decimaisQuantidade);
    }
    if (!nullToAbsent || decimaisValor != null) {
      map['DECIMAIS_VALOR'] = Variable<int>(decimaisValor);
    }
    if (!nullToAbsent || bitsPorSegundo != null) {
      map['BITS_POR_SEGUNDO'] = Variable<int>(bitsPorSegundo);
    }
    if (!nullToAbsent || quantidadeMaximaCartoes != null) {
      map['QUANTIDADE_MAXIMA_CARTOES'] = Variable<int>(quantidadeMaximaCartoes);
    }
    if (!nullToAbsent || pesquisaParte != null) {
      map['PESQUISA_PARTE'] = Variable<String>(pesquisaParte);
    }
    if (!nullToAbsent || laudo != null) {
      map['LAUDO'] = Variable<String>(laudo);
    }
    if (!nullToAbsent || dataAtualizacaoEstoque != null) {
      map['DATA_ATUALIZACAO_ESTOQUE'] =
          Variable<DateTime>(dataAtualizacaoEstoque);
    }
    if (!nullToAbsent || pedeCpfCupom != null) {
      map['PEDE_CPF_CUPOM'] = Variable<String>(pedeCpfCupom);
    }
    if (!nullToAbsent || tipoIntegracao != null) {
      map['TIPO_INTEGRACAO'] = Variable<int>(tipoIntegracao);
    }
    if (!nullToAbsent || timerIntegracao != null) {
      map['TIMER_INTEGRACAO'] = Variable<int>(timerIntegracao);
    }
    if (!nullToAbsent || gavetaSinalInvertido != null) {
      map['GAVETA_SINAL_INVERTIDO'] = Variable<String>(gavetaSinalInvertido);
    }
    if (!nullToAbsent || gavetaUtilizacao != null) {
      map['GAVETA_UTILIZACAO'] = Variable<int>(gavetaUtilizacao);
    }
    if (!nullToAbsent || usaTecladoReduzido != null) {
      map['USA_TECLADO_REDUZIDO'] = Variable<String>(usaTecladoReduzido);
    }
    return map;
  }

  PdvConfiguracaosCompanion toCompanion(bool nullToAbsent) {
    return PdvConfiguracaosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEcfImpressora: idEcfImpressora == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfImpressora),
      idPdvCaixa: idPdvCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvCaixa),
      mensagemCupom: mensagemCupom == null && nullToAbsent
          ? const Value.absent()
          : Value(mensagemCupom),
      portaEcf: portaEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(portaEcf),
      ipServidor: ipServidor == null && nullToAbsent
          ? const Value.absent()
          : Value(ipServidor),
      ipSitef: ipSitef == null && nullToAbsent
          ? const Value.absent()
          : Value(ipSitef),
      tipoTef: tipoTef == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoTef),
      tituloTelaCaixa: tituloTelaCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(tituloTelaCaixa),
      caminhoImagensProdutos: caminhoImagensProdutos == null && nullToAbsent
          ? const Value.absent()
          : Value(caminhoImagensProdutos),
      caminhoImagensMarketing: caminhoImagensMarketing == null && nullToAbsent
          ? const Value.absent()
          : Value(caminhoImagensMarketing),
      corJanelasInternas: corJanelasInternas == null && nullToAbsent
          ? const Value.absent()
          : Value(corJanelasInternas),
      marketingAtivo: marketingAtivo == null && nullToAbsent
          ? const Value.absent()
          : Value(marketingAtivo),
      cfopEcf: cfopEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(cfopEcf),
      timeoutEcf: timeoutEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(timeoutEcf),
      intervaloEcf: intervaloEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(intervaloEcf),
      descricaoSuprimento: descricaoSuprimento == null && nullToAbsent
          ? const Value.absent()
          : Value(descricaoSuprimento),
      descricaoSangria: descricaoSangria == null && nullToAbsent
          ? const Value.absent()
          : Value(descricaoSangria),
      tefTipoGp: tefTipoGp == null && nullToAbsent
          ? const Value.absent()
          : Value(tefTipoGp),
      tefTempoEspera: tefTempoEspera == null && nullToAbsent
          ? const Value.absent()
          : Value(tefTempoEspera),
      tefEsperaSts: tefEsperaSts == null && nullToAbsent
          ? const Value.absent()
          : Value(tefEsperaSts),
      tefNumeroVias: tefNumeroVias == null && nullToAbsent
          ? const Value.absent()
          : Value(tefNumeroVias),
      decimaisQuantidade: decimaisQuantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(decimaisQuantidade),
      decimaisValor: decimaisValor == null && nullToAbsent
          ? const Value.absent()
          : Value(decimaisValor),
      bitsPorSegundo: bitsPorSegundo == null && nullToAbsent
          ? const Value.absent()
          : Value(bitsPorSegundo),
      quantidadeMaximaCartoes: quantidadeMaximaCartoes == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeMaximaCartoes),
      pesquisaParte: pesquisaParte == null && nullToAbsent
          ? const Value.absent()
          : Value(pesquisaParte),
      laudo:
          laudo == null && nullToAbsent ? const Value.absent() : Value(laudo),
      dataAtualizacaoEstoque: dataAtualizacaoEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(dataAtualizacaoEstoque),
      pedeCpfCupom: pedeCpfCupom == null && nullToAbsent
          ? const Value.absent()
          : Value(pedeCpfCupom),
      tipoIntegracao: tipoIntegracao == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoIntegracao),
      timerIntegracao: timerIntegracao == null && nullToAbsent
          ? const Value.absent()
          : Value(timerIntegracao),
      gavetaSinalInvertido: gavetaSinalInvertido == null && nullToAbsent
          ? const Value.absent()
          : Value(gavetaSinalInvertido),
      gavetaUtilizacao: gavetaUtilizacao == null && nullToAbsent
          ? const Value.absent()
          : Value(gavetaUtilizacao),
      usaTecladoReduzido: usaTecladoReduzido == null && nullToAbsent
          ? const Value.absent()
          : Value(usaTecladoReduzido),
    );
  }

  factory PdvConfiguracao.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvConfiguracao(
      id: serializer.fromJson<int>(json['id']),
      idEcfImpressora: serializer.fromJson<int>(json['idEcfImpressora']),
      idPdvCaixa: serializer.fromJson<int>(json['idPdvCaixa']),
      mensagemCupom: serializer.fromJson<String>(json['mensagemCupom']),
      portaEcf: serializer.fromJson<String>(json['portaEcf']),
      ipServidor: serializer.fromJson<String>(json['ipServidor']),
      ipSitef: serializer.fromJson<String>(json['ipSitef']),
      tipoTef: serializer.fromJson<String>(json['tipoTef']),
      tituloTelaCaixa: serializer.fromJson<String>(json['tituloTelaCaixa']),
      caminhoImagensProdutos:
          serializer.fromJson<String>(json['caminhoImagensProdutos']),
      caminhoImagensMarketing:
          serializer.fromJson<String>(json['caminhoImagensMarketing']),
      corJanelasInternas:
          serializer.fromJson<String>(json['corJanelasInternas']),
      marketingAtivo: serializer.fromJson<String>(json['marketingAtivo']),
      cfopEcf: serializer.fromJson<int>(json['cfopEcf']),
      timeoutEcf: serializer.fromJson<int>(json['timeoutEcf']),
      intervaloEcf: serializer.fromJson<int>(json['intervaloEcf']),
      descricaoSuprimento:
          serializer.fromJson<String>(json['descricaoSuprimento']),
      descricaoSangria: serializer.fromJson<String>(json['descricaoSangria']),
      tefTipoGp: serializer.fromJson<int>(json['tefTipoGp']),
      tefTempoEspera: serializer.fromJson<int>(json['tefTempoEspera']),
      tefEsperaSts: serializer.fromJson<int>(json['tefEsperaSts']),
      tefNumeroVias: serializer.fromJson<int>(json['tefNumeroVias']),
      decimaisQuantidade: serializer.fromJson<int>(json['decimaisQuantidade']),
      decimaisValor: serializer.fromJson<int>(json['decimaisValor']),
      bitsPorSegundo: serializer.fromJson<int>(json['bitsPorSegundo']),
      quantidadeMaximaCartoes:
          serializer.fromJson<int>(json['quantidadeMaximaCartoes']),
      pesquisaParte: serializer.fromJson<String>(json['pesquisaParte']),
      laudo: serializer.fromJson<String>(json['laudo']),
      dataAtualizacaoEstoque:
          serializer.fromJson<DateTime>(json['dataAtualizacaoEstoque']),
      pedeCpfCupom: serializer.fromJson<String>(json['pedeCpfCupom']),
      tipoIntegracao: serializer.fromJson<int>(json['tipoIntegracao']),
      timerIntegracao: serializer.fromJson<int>(json['timerIntegracao']),
      gavetaSinalInvertido:
          serializer.fromJson<String>(json['gavetaSinalInvertido']),
      gavetaUtilizacao: serializer.fromJson<int>(json['gavetaUtilizacao']),
      usaTecladoReduzido:
          serializer.fromJson<String>(json['usaTecladoReduzido']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idEcfImpressora': serializer.toJson<int>(idEcfImpressora),
      'idPdvCaixa': serializer.toJson<int>(idPdvCaixa),
      'mensagemCupom': serializer.toJson<String>(mensagemCupom),
      'portaEcf': serializer.toJson<String>(portaEcf),
      'ipServidor': serializer.toJson<String>(ipServidor),
      'ipSitef': serializer.toJson<String>(ipSitef),
      'tipoTef': serializer.toJson<String>(tipoTef),
      'tituloTelaCaixa': serializer.toJson<String>(tituloTelaCaixa),
      'caminhoImagensProdutos':
          serializer.toJson<String>(caminhoImagensProdutos),
      'caminhoImagensMarketing':
          serializer.toJson<String>(caminhoImagensMarketing),
      'corJanelasInternas': serializer.toJson<String>(corJanelasInternas),
      'marketingAtivo': serializer.toJson<String>(marketingAtivo),
      'cfopEcf': serializer.toJson<int>(cfopEcf),
      'timeoutEcf': serializer.toJson<int>(timeoutEcf),
      'intervaloEcf': serializer.toJson<int>(intervaloEcf),
      'descricaoSuprimento': serializer.toJson<String>(descricaoSuprimento),
      'descricaoSangria': serializer.toJson<String>(descricaoSangria),
      'tefTipoGp': serializer.toJson<int>(tefTipoGp),
      'tefTempoEspera': serializer.toJson<int>(tefTempoEspera),
      'tefEsperaSts': serializer.toJson<int>(tefEsperaSts),
      'tefNumeroVias': serializer.toJson<int>(tefNumeroVias),
      'decimaisQuantidade': serializer.toJson<int>(decimaisQuantidade),
      'decimaisValor': serializer.toJson<int>(decimaisValor),
      'bitsPorSegundo': serializer.toJson<int>(bitsPorSegundo),
      'quantidadeMaximaCartoes':
          serializer.toJson<int>(quantidadeMaximaCartoes),
      'pesquisaParte': serializer.toJson<String>(pesquisaParte),
      'laudo': serializer.toJson<String>(laudo),
      'dataAtualizacaoEstoque':
          serializer.toJson<DateTime>(dataAtualizacaoEstoque),
      'pedeCpfCupom': serializer.toJson<String>(pedeCpfCupom),
      'tipoIntegracao': serializer.toJson<int>(tipoIntegracao),
      'timerIntegracao': serializer.toJson<int>(timerIntegracao),
      'gavetaSinalInvertido': serializer.toJson<String>(gavetaSinalInvertido),
      'gavetaUtilizacao': serializer.toJson<int>(gavetaUtilizacao),
      'usaTecladoReduzido': serializer.toJson<String>(usaTecladoReduzido),
    };
  }

  PdvConfiguracao copyWith(
          {int id,
          int idEcfImpressora,
          int idPdvCaixa,
          String mensagemCupom,
          String portaEcf,
          String ipServidor,
          String ipSitef,
          String tipoTef,
          String tituloTelaCaixa,
          String caminhoImagensProdutos,
          String caminhoImagensMarketing,
          String corJanelasInternas,
          String marketingAtivo,
          int cfopEcf,
          int timeoutEcf,
          int intervaloEcf,
          String descricaoSuprimento,
          String descricaoSangria,
          int tefTipoGp,
          int tefTempoEspera,
          int tefEsperaSts,
          int tefNumeroVias,
          int decimaisQuantidade,
          int decimaisValor,
          int bitsPorSegundo,
          int quantidadeMaximaCartoes,
          String pesquisaParte,
          String laudo,
          DateTime dataAtualizacaoEstoque,
          String pedeCpfCupom,
          int tipoIntegracao,
          int timerIntegracao,
          String gavetaSinalInvertido,
          int gavetaUtilizacao,
          String usaTecladoReduzido}) =>
      PdvConfiguracao(
        id: id ?? this.id,
        idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
        idPdvCaixa: idPdvCaixa ?? this.idPdvCaixa,
        mensagemCupom: mensagemCupom ?? this.mensagemCupom,
        portaEcf: portaEcf ?? this.portaEcf,
        ipServidor: ipServidor ?? this.ipServidor,
        ipSitef: ipSitef ?? this.ipSitef,
        tipoTef: tipoTef ?? this.tipoTef,
        tituloTelaCaixa: tituloTelaCaixa ?? this.tituloTelaCaixa,
        caminhoImagensProdutos:
            caminhoImagensProdutos ?? this.caminhoImagensProdutos,
        caminhoImagensMarketing:
            caminhoImagensMarketing ?? this.caminhoImagensMarketing,
        corJanelasInternas: corJanelasInternas ?? this.corJanelasInternas,
        marketingAtivo: marketingAtivo ?? this.marketingAtivo,
        cfopEcf: cfopEcf ?? this.cfopEcf,
        timeoutEcf: timeoutEcf ?? this.timeoutEcf,
        intervaloEcf: intervaloEcf ?? this.intervaloEcf,
        descricaoSuprimento: descricaoSuprimento ?? this.descricaoSuprimento,
        descricaoSangria: descricaoSangria ?? this.descricaoSangria,
        tefTipoGp: tefTipoGp ?? this.tefTipoGp,
        tefTempoEspera: tefTempoEspera ?? this.tefTempoEspera,
        tefEsperaSts: tefEsperaSts ?? this.tefEsperaSts,
        tefNumeroVias: tefNumeroVias ?? this.tefNumeroVias,
        decimaisQuantidade: decimaisQuantidade ?? this.decimaisQuantidade,
        decimaisValor: decimaisValor ?? this.decimaisValor,
        bitsPorSegundo: bitsPorSegundo ?? this.bitsPorSegundo,
        quantidadeMaximaCartoes:
            quantidadeMaximaCartoes ?? this.quantidadeMaximaCartoes,
        pesquisaParte: pesquisaParte ?? this.pesquisaParte,
        laudo: laudo ?? this.laudo,
        dataAtualizacaoEstoque:
            dataAtualizacaoEstoque ?? this.dataAtualizacaoEstoque,
        pedeCpfCupom: pedeCpfCupom ?? this.pedeCpfCupom,
        tipoIntegracao: tipoIntegracao ?? this.tipoIntegracao,
        timerIntegracao: timerIntegracao ?? this.timerIntegracao,
        gavetaSinalInvertido: gavetaSinalInvertido ?? this.gavetaSinalInvertido,
        gavetaUtilizacao: gavetaUtilizacao ?? this.gavetaUtilizacao,
        usaTecladoReduzido: usaTecladoReduzido ?? this.usaTecladoReduzido,
      );
  @override
  String toString() {
    return (StringBuffer('PdvConfiguracao(')
          ..write('id: $id, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idPdvCaixa: $idPdvCaixa, ')
          ..write('mensagemCupom: $mensagemCupom, ')
          ..write('portaEcf: $portaEcf, ')
          ..write('ipServidor: $ipServidor, ')
          ..write('ipSitef: $ipSitef, ')
          ..write('tipoTef: $tipoTef, ')
          ..write('tituloTelaCaixa: $tituloTelaCaixa, ')
          ..write('caminhoImagensProdutos: $caminhoImagensProdutos, ')
          ..write('caminhoImagensMarketing: $caminhoImagensMarketing, ')
          ..write('corJanelasInternas: $corJanelasInternas, ')
          ..write('marketingAtivo: $marketingAtivo, ')
          ..write('cfopEcf: $cfopEcf, ')
          ..write('timeoutEcf: $timeoutEcf, ')
          ..write('intervaloEcf: $intervaloEcf, ')
          ..write('descricaoSuprimento: $descricaoSuprimento, ')
          ..write('descricaoSangria: $descricaoSangria, ')
          ..write('tefTipoGp: $tefTipoGp, ')
          ..write('tefTempoEspera: $tefTempoEspera, ')
          ..write('tefEsperaSts: $tefEsperaSts, ')
          ..write('tefNumeroVias: $tefNumeroVias, ')
          ..write('decimaisQuantidade: $decimaisQuantidade, ')
          ..write('decimaisValor: $decimaisValor, ')
          ..write('bitsPorSegundo: $bitsPorSegundo, ')
          ..write('quantidadeMaximaCartoes: $quantidadeMaximaCartoes, ')
          ..write('pesquisaParte: $pesquisaParte, ')
          ..write('laudo: $laudo, ')
          ..write('dataAtualizacaoEstoque: $dataAtualizacaoEstoque, ')
          ..write('pedeCpfCupom: $pedeCpfCupom, ')
          ..write('tipoIntegracao: $tipoIntegracao, ')
          ..write('timerIntegracao: $timerIntegracao, ')
          ..write('gavetaSinalInvertido: $gavetaSinalInvertido, ')
          ..write('gavetaUtilizacao: $gavetaUtilizacao, ')
          ..write('usaTecladoReduzido: $usaTecladoReduzido')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idEcfImpressora.hashCode,
          $mrjc(
              idPdvCaixa.hashCode,
              $mrjc(
                  mensagemCupom.hashCode,
                  $mrjc(
                      portaEcf.hashCode,
                      $mrjc(
                          ipServidor.hashCode,
                          $mrjc(
                              ipSitef.hashCode,
                              $mrjc(
                                  tipoTef.hashCode,
                                  $mrjc(
                                      tituloTelaCaixa.hashCode,
                                      $mrjc(
                                          caminhoImagensProdutos.hashCode,
                                          $mrjc(
                                              caminhoImagensMarketing.hashCode,
                                              $mrjc(
                                                  corJanelasInternas.hashCode,
                                                  $mrjc(
                                                      marketingAtivo.hashCode,
                                                      $mrjc(
                                                          cfopEcf.hashCode,
                                                          $mrjc(
                                                              timeoutEcf
                                                                  .hashCode,
                                                              $mrjc(
                                                                  intervaloEcf
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      descricaoSuprimento
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          descricaoSangria
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              tefTipoGp.hashCode,
                                                                              $mrjc(tefTempoEspera.hashCode, $mrjc(tefEsperaSts.hashCode, $mrjc(tefNumeroVias.hashCode, $mrjc(decimaisQuantidade.hashCode, $mrjc(decimaisValor.hashCode, $mrjc(bitsPorSegundo.hashCode, $mrjc(quantidadeMaximaCartoes.hashCode, $mrjc(pesquisaParte.hashCode, $mrjc(laudo.hashCode, $mrjc(dataAtualizacaoEstoque.hashCode, $mrjc(pedeCpfCupom.hashCode, $mrjc(tipoIntegracao.hashCode, $mrjc(timerIntegracao.hashCode, $mrjc(gavetaSinalInvertido.hashCode, $mrjc(gavetaUtilizacao.hashCode, usaTecladoReduzido.hashCode)))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvConfiguracao &&
          other.id == this.id &&
          other.idEcfImpressora == this.idEcfImpressora &&
          other.idPdvCaixa == this.idPdvCaixa &&
          other.mensagemCupom == this.mensagemCupom &&
          other.portaEcf == this.portaEcf &&
          other.ipServidor == this.ipServidor &&
          other.ipSitef == this.ipSitef &&
          other.tipoTef == this.tipoTef &&
          other.tituloTelaCaixa == this.tituloTelaCaixa &&
          other.caminhoImagensProdutos == this.caminhoImagensProdutos &&
          other.caminhoImagensMarketing == this.caminhoImagensMarketing &&
          other.corJanelasInternas == this.corJanelasInternas &&
          other.marketingAtivo == this.marketingAtivo &&
          other.cfopEcf == this.cfopEcf &&
          other.timeoutEcf == this.timeoutEcf &&
          other.intervaloEcf == this.intervaloEcf &&
          other.descricaoSuprimento == this.descricaoSuprimento &&
          other.descricaoSangria == this.descricaoSangria &&
          other.tefTipoGp == this.tefTipoGp &&
          other.tefTempoEspera == this.tefTempoEspera &&
          other.tefEsperaSts == this.tefEsperaSts &&
          other.tefNumeroVias == this.tefNumeroVias &&
          other.decimaisQuantidade == this.decimaisQuantidade &&
          other.decimaisValor == this.decimaisValor &&
          other.bitsPorSegundo == this.bitsPorSegundo &&
          other.quantidadeMaximaCartoes == this.quantidadeMaximaCartoes &&
          other.pesquisaParte == this.pesquisaParte &&
          other.laudo == this.laudo &&
          other.dataAtualizacaoEstoque == this.dataAtualizacaoEstoque &&
          other.pedeCpfCupom == this.pedeCpfCupom &&
          other.tipoIntegracao == this.tipoIntegracao &&
          other.timerIntegracao == this.timerIntegracao &&
          other.gavetaSinalInvertido == this.gavetaSinalInvertido &&
          other.gavetaUtilizacao == this.gavetaUtilizacao &&
          other.usaTecladoReduzido == this.usaTecladoReduzido);
}

class PdvConfiguracaosCompanion extends UpdateCompanion<PdvConfiguracao> {
  final Value<int> id;
  final Value<int> idEcfImpressora;
  final Value<int> idPdvCaixa;
  final Value<String> mensagemCupom;
  final Value<String> portaEcf;
  final Value<String> ipServidor;
  final Value<String> ipSitef;
  final Value<String> tipoTef;
  final Value<String> tituloTelaCaixa;
  final Value<String> caminhoImagensProdutos;
  final Value<String> caminhoImagensMarketing;
  final Value<String> corJanelasInternas;
  final Value<String> marketingAtivo;
  final Value<int> cfopEcf;
  final Value<int> timeoutEcf;
  final Value<int> intervaloEcf;
  final Value<String> descricaoSuprimento;
  final Value<String> descricaoSangria;
  final Value<int> tefTipoGp;
  final Value<int> tefTempoEspera;
  final Value<int> tefEsperaSts;
  final Value<int> tefNumeroVias;
  final Value<int> decimaisQuantidade;
  final Value<int> decimaisValor;
  final Value<int> bitsPorSegundo;
  final Value<int> quantidadeMaximaCartoes;
  final Value<String> pesquisaParte;
  final Value<String> laudo;
  final Value<DateTime> dataAtualizacaoEstoque;
  final Value<String> pedeCpfCupom;
  final Value<int> tipoIntegracao;
  final Value<int> timerIntegracao;
  final Value<String> gavetaSinalInvertido;
  final Value<int> gavetaUtilizacao;
  final Value<String> usaTecladoReduzido;
  const PdvConfiguracaosCompanion({
    this.id = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idPdvCaixa = const Value.absent(),
    this.mensagemCupom = const Value.absent(),
    this.portaEcf = const Value.absent(),
    this.ipServidor = const Value.absent(),
    this.ipSitef = const Value.absent(),
    this.tipoTef = const Value.absent(),
    this.tituloTelaCaixa = const Value.absent(),
    this.caminhoImagensProdutos = const Value.absent(),
    this.caminhoImagensMarketing = const Value.absent(),
    this.corJanelasInternas = const Value.absent(),
    this.marketingAtivo = const Value.absent(),
    this.cfopEcf = const Value.absent(),
    this.timeoutEcf = const Value.absent(),
    this.intervaloEcf = const Value.absent(),
    this.descricaoSuprimento = const Value.absent(),
    this.descricaoSangria = const Value.absent(),
    this.tefTipoGp = const Value.absent(),
    this.tefTempoEspera = const Value.absent(),
    this.tefEsperaSts = const Value.absent(),
    this.tefNumeroVias = const Value.absent(),
    this.decimaisQuantidade = const Value.absent(),
    this.decimaisValor = const Value.absent(),
    this.bitsPorSegundo = const Value.absent(),
    this.quantidadeMaximaCartoes = const Value.absent(),
    this.pesquisaParte = const Value.absent(),
    this.laudo = const Value.absent(),
    this.dataAtualizacaoEstoque = const Value.absent(),
    this.pedeCpfCupom = const Value.absent(),
    this.tipoIntegracao = const Value.absent(),
    this.timerIntegracao = const Value.absent(),
    this.gavetaSinalInvertido = const Value.absent(),
    this.gavetaUtilizacao = const Value.absent(),
    this.usaTecladoReduzido = const Value.absent(),
  });
  PdvConfiguracaosCompanion.insert({
    this.id = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idPdvCaixa = const Value.absent(),
    this.mensagemCupom = const Value.absent(),
    this.portaEcf = const Value.absent(),
    this.ipServidor = const Value.absent(),
    this.ipSitef = const Value.absent(),
    this.tipoTef = const Value.absent(),
    this.tituloTelaCaixa = const Value.absent(),
    this.caminhoImagensProdutos = const Value.absent(),
    this.caminhoImagensMarketing = const Value.absent(),
    this.corJanelasInternas = const Value.absent(),
    this.marketingAtivo = const Value.absent(),
    this.cfopEcf = const Value.absent(),
    this.timeoutEcf = const Value.absent(),
    this.intervaloEcf = const Value.absent(),
    this.descricaoSuprimento = const Value.absent(),
    this.descricaoSangria = const Value.absent(),
    this.tefTipoGp = const Value.absent(),
    this.tefTempoEspera = const Value.absent(),
    this.tefEsperaSts = const Value.absent(),
    this.tefNumeroVias = const Value.absent(),
    this.decimaisQuantidade = const Value.absent(),
    this.decimaisValor = const Value.absent(),
    this.bitsPorSegundo = const Value.absent(),
    this.quantidadeMaximaCartoes = const Value.absent(),
    this.pesquisaParte = const Value.absent(),
    this.laudo = const Value.absent(),
    this.dataAtualizacaoEstoque = const Value.absent(),
    this.pedeCpfCupom = const Value.absent(),
    this.tipoIntegracao = const Value.absent(),
    this.timerIntegracao = const Value.absent(),
    this.gavetaSinalInvertido = const Value.absent(),
    this.gavetaUtilizacao = const Value.absent(),
    this.usaTecladoReduzido = const Value.absent(),
  });
  static Insertable<PdvConfiguracao> custom({
    Expression<int> id,
    Expression<int> idEcfImpressora,
    Expression<int> idPdvCaixa,
    Expression<String> mensagemCupom,
    Expression<String> portaEcf,
    Expression<String> ipServidor,
    Expression<String> ipSitef,
    Expression<String> tipoTef,
    Expression<String> tituloTelaCaixa,
    Expression<String> caminhoImagensProdutos,
    Expression<String> caminhoImagensMarketing,
    Expression<String> corJanelasInternas,
    Expression<String> marketingAtivo,
    Expression<int> cfopEcf,
    Expression<int> timeoutEcf,
    Expression<int> intervaloEcf,
    Expression<String> descricaoSuprimento,
    Expression<String> descricaoSangria,
    Expression<int> tefTipoGp,
    Expression<int> tefTempoEspera,
    Expression<int> tefEsperaSts,
    Expression<int> tefNumeroVias,
    Expression<int> decimaisQuantidade,
    Expression<int> decimaisValor,
    Expression<int> bitsPorSegundo,
    Expression<int> quantidadeMaximaCartoes,
    Expression<String> pesquisaParte,
    Expression<String> laudo,
    Expression<DateTime> dataAtualizacaoEstoque,
    Expression<String> pedeCpfCupom,
    Expression<int> tipoIntegracao,
    Expression<int> timerIntegracao,
    Expression<String> gavetaSinalInvertido,
    Expression<int> gavetaUtilizacao,
    Expression<String> usaTecladoReduzido,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
      if (idPdvCaixa != null) 'ID_PDV_CAIXA': idPdvCaixa,
      if (mensagemCupom != null) 'MENSAGEM_CUPOM': mensagemCupom,
      if (portaEcf != null) 'PORTA_ECF': portaEcf,
      if (ipServidor != null) 'IP_SERVIDOR': ipServidor,
      if (ipSitef != null) 'IP_SITEF': ipSitef,
      if (tipoTef != null) 'TIPO_TEF': tipoTef,
      if (tituloTelaCaixa != null) 'TITULO_TELA_CAIXA': tituloTelaCaixa,
      if (caminhoImagensProdutos != null)
        'CAMINHO_IMAGENS_PRODUTOS': caminhoImagensProdutos,
      if (caminhoImagensMarketing != null)
        'CAMINHO_IMAGENS_MARKETING': caminhoImagensMarketing,
      if (corJanelasInternas != null)
        'COR_JANELAS_INTERNAS': corJanelasInternas,
      if (marketingAtivo != null) 'MARKETING_ATIVO': marketingAtivo,
      if (cfopEcf != null) 'CFOP_ECF': cfopEcf,
      if (timeoutEcf != null) 'TIMEOUT_ECF': timeoutEcf,
      if (intervaloEcf != null) 'INTERVALO_ECF': intervaloEcf,
      if (descricaoSuprimento != null)
        'DESCRICAO_SUPRIMENTO': descricaoSuprimento,
      if (descricaoSangria != null) 'DESCRICAO_SANGRIA': descricaoSangria,
      if (tefTipoGp != null) 'TEF_TIPO_GP': tefTipoGp,
      if (tefTempoEspera != null) 'TEF_TEMPO_ESPERA': tefTempoEspera,
      if (tefEsperaSts != null) 'TEF_ESPERA_STS': tefEsperaSts,
      if (tefNumeroVias != null) 'TEF_NUMERO_VIAS': tefNumeroVias,
      if (decimaisQuantidade != null) 'DECIMAIS_QUANTIDADE': decimaisQuantidade,
      if (decimaisValor != null) 'DECIMAIS_VALOR': decimaisValor,
      if (bitsPorSegundo != null) 'BITS_POR_SEGUNDO': bitsPorSegundo,
      if (quantidadeMaximaCartoes != null)
        'QUANTIDADE_MAXIMA_CARTOES': quantidadeMaximaCartoes,
      if (pesquisaParte != null) 'PESQUISA_PARTE': pesquisaParte,
      if (laudo != null) 'LAUDO': laudo,
      if (dataAtualizacaoEstoque != null)
        'DATA_ATUALIZACAO_ESTOQUE': dataAtualizacaoEstoque,
      if (pedeCpfCupom != null) 'PEDE_CPF_CUPOM': pedeCpfCupom,
      if (tipoIntegracao != null) 'TIPO_INTEGRACAO': tipoIntegracao,
      if (timerIntegracao != null) 'TIMER_INTEGRACAO': timerIntegracao,
      if (gavetaSinalInvertido != null)
        'GAVETA_SINAL_INVERTIDO': gavetaSinalInvertido,
      if (gavetaUtilizacao != null) 'GAVETA_UTILIZACAO': gavetaUtilizacao,
      if (usaTecladoReduzido != null)
        'USA_TECLADO_REDUZIDO': usaTecladoReduzido,
    });
  }

  PdvConfiguracaosCompanion copyWith(
      {Value<int> id,
      Value<int> idEcfImpressora,
      Value<int> idPdvCaixa,
      Value<String> mensagemCupom,
      Value<String> portaEcf,
      Value<String> ipServidor,
      Value<String> ipSitef,
      Value<String> tipoTef,
      Value<String> tituloTelaCaixa,
      Value<String> caminhoImagensProdutos,
      Value<String> caminhoImagensMarketing,
      Value<String> corJanelasInternas,
      Value<String> marketingAtivo,
      Value<int> cfopEcf,
      Value<int> timeoutEcf,
      Value<int> intervaloEcf,
      Value<String> descricaoSuprimento,
      Value<String> descricaoSangria,
      Value<int> tefTipoGp,
      Value<int> tefTempoEspera,
      Value<int> tefEsperaSts,
      Value<int> tefNumeroVias,
      Value<int> decimaisQuantidade,
      Value<int> decimaisValor,
      Value<int> bitsPorSegundo,
      Value<int> quantidadeMaximaCartoes,
      Value<String> pesquisaParte,
      Value<String> laudo,
      Value<DateTime> dataAtualizacaoEstoque,
      Value<String> pedeCpfCupom,
      Value<int> tipoIntegracao,
      Value<int> timerIntegracao,
      Value<String> gavetaSinalInvertido,
      Value<int> gavetaUtilizacao,
      Value<String> usaTecladoReduzido}) {
    return PdvConfiguracaosCompanion(
      id: id ?? this.id,
      idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
      idPdvCaixa: idPdvCaixa ?? this.idPdvCaixa,
      mensagemCupom: mensagemCupom ?? this.mensagemCupom,
      portaEcf: portaEcf ?? this.portaEcf,
      ipServidor: ipServidor ?? this.ipServidor,
      ipSitef: ipSitef ?? this.ipSitef,
      tipoTef: tipoTef ?? this.tipoTef,
      tituloTelaCaixa: tituloTelaCaixa ?? this.tituloTelaCaixa,
      caminhoImagensProdutos:
          caminhoImagensProdutos ?? this.caminhoImagensProdutos,
      caminhoImagensMarketing:
          caminhoImagensMarketing ?? this.caminhoImagensMarketing,
      corJanelasInternas: corJanelasInternas ?? this.corJanelasInternas,
      marketingAtivo: marketingAtivo ?? this.marketingAtivo,
      cfopEcf: cfopEcf ?? this.cfopEcf,
      timeoutEcf: timeoutEcf ?? this.timeoutEcf,
      intervaloEcf: intervaloEcf ?? this.intervaloEcf,
      descricaoSuprimento: descricaoSuprimento ?? this.descricaoSuprimento,
      descricaoSangria: descricaoSangria ?? this.descricaoSangria,
      tefTipoGp: tefTipoGp ?? this.tefTipoGp,
      tefTempoEspera: tefTempoEspera ?? this.tefTempoEspera,
      tefEsperaSts: tefEsperaSts ?? this.tefEsperaSts,
      tefNumeroVias: tefNumeroVias ?? this.tefNumeroVias,
      decimaisQuantidade: decimaisQuantidade ?? this.decimaisQuantidade,
      decimaisValor: decimaisValor ?? this.decimaisValor,
      bitsPorSegundo: bitsPorSegundo ?? this.bitsPorSegundo,
      quantidadeMaximaCartoes:
          quantidadeMaximaCartoes ?? this.quantidadeMaximaCartoes,
      pesquisaParte: pesquisaParte ?? this.pesquisaParte,
      laudo: laudo ?? this.laudo,
      dataAtualizacaoEstoque:
          dataAtualizacaoEstoque ?? this.dataAtualizacaoEstoque,
      pedeCpfCupom: pedeCpfCupom ?? this.pedeCpfCupom,
      tipoIntegracao: tipoIntegracao ?? this.tipoIntegracao,
      timerIntegracao: timerIntegracao ?? this.timerIntegracao,
      gavetaSinalInvertido: gavetaSinalInvertido ?? this.gavetaSinalInvertido,
      gavetaUtilizacao: gavetaUtilizacao ?? this.gavetaUtilizacao,
      usaTecladoReduzido: usaTecladoReduzido ?? this.usaTecladoReduzido,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEcfImpressora.present) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora.value);
    }
    if (idPdvCaixa.present) {
      map['ID_PDV_CAIXA'] = Variable<int>(idPdvCaixa.value);
    }
    if (mensagemCupom.present) {
      map['MENSAGEM_CUPOM'] = Variable<String>(mensagemCupom.value);
    }
    if (portaEcf.present) {
      map['PORTA_ECF'] = Variable<String>(portaEcf.value);
    }
    if (ipServidor.present) {
      map['IP_SERVIDOR'] = Variable<String>(ipServidor.value);
    }
    if (ipSitef.present) {
      map['IP_SITEF'] = Variable<String>(ipSitef.value);
    }
    if (tipoTef.present) {
      map['TIPO_TEF'] = Variable<String>(tipoTef.value);
    }
    if (tituloTelaCaixa.present) {
      map['TITULO_TELA_CAIXA'] = Variable<String>(tituloTelaCaixa.value);
    }
    if (caminhoImagensProdutos.present) {
      map['CAMINHO_IMAGENS_PRODUTOS'] =
          Variable<String>(caminhoImagensProdutos.value);
    }
    if (caminhoImagensMarketing.present) {
      map['CAMINHO_IMAGENS_MARKETING'] =
          Variable<String>(caminhoImagensMarketing.value);
    }
    if (corJanelasInternas.present) {
      map['COR_JANELAS_INTERNAS'] = Variable<String>(corJanelasInternas.value);
    }
    if (marketingAtivo.present) {
      map['MARKETING_ATIVO'] = Variable<String>(marketingAtivo.value);
    }
    if (cfopEcf.present) {
      map['CFOP_ECF'] = Variable<int>(cfopEcf.value);
    }
    if (timeoutEcf.present) {
      map['TIMEOUT_ECF'] = Variable<int>(timeoutEcf.value);
    }
    if (intervaloEcf.present) {
      map['INTERVALO_ECF'] = Variable<int>(intervaloEcf.value);
    }
    if (descricaoSuprimento.present) {
      map['DESCRICAO_SUPRIMENTO'] = Variable<String>(descricaoSuprimento.value);
    }
    if (descricaoSangria.present) {
      map['DESCRICAO_SANGRIA'] = Variable<String>(descricaoSangria.value);
    }
    if (tefTipoGp.present) {
      map['TEF_TIPO_GP'] = Variable<int>(tefTipoGp.value);
    }
    if (tefTempoEspera.present) {
      map['TEF_TEMPO_ESPERA'] = Variable<int>(tefTempoEspera.value);
    }
    if (tefEsperaSts.present) {
      map['TEF_ESPERA_STS'] = Variable<int>(tefEsperaSts.value);
    }
    if (tefNumeroVias.present) {
      map['TEF_NUMERO_VIAS'] = Variable<int>(tefNumeroVias.value);
    }
    if (decimaisQuantidade.present) {
      map['DECIMAIS_QUANTIDADE'] = Variable<int>(decimaisQuantidade.value);
    }
    if (decimaisValor.present) {
      map['DECIMAIS_VALOR'] = Variable<int>(decimaisValor.value);
    }
    if (bitsPorSegundo.present) {
      map['BITS_POR_SEGUNDO'] = Variable<int>(bitsPorSegundo.value);
    }
    if (quantidadeMaximaCartoes.present) {
      map['QUANTIDADE_MAXIMA_CARTOES'] =
          Variable<int>(quantidadeMaximaCartoes.value);
    }
    if (pesquisaParte.present) {
      map['PESQUISA_PARTE'] = Variable<String>(pesquisaParte.value);
    }
    if (laudo.present) {
      map['LAUDO'] = Variable<String>(laudo.value);
    }
    if (dataAtualizacaoEstoque.present) {
      map['DATA_ATUALIZACAO_ESTOQUE'] =
          Variable<DateTime>(dataAtualizacaoEstoque.value);
    }
    if (pedeCpfCupom.present) {
      map['PEDE_CPF_CUPOM'] = Variable<String>(pedeCpfCupom.value);
    }
    if (tipoIntegracao.present) {
      map['TIPO_INTEGRACAO'] = Variable<int>(tipoIntegracao.value);
    }
    if (timerIntegracao.present) {
      map['TIMER_INTEGRACAO'] = Variable<int>(timerIntegracao.value);
    }
    if (gavetaSinalInvertido.present) {
      map['GAVETA_SINAL_INVERTIDO'] =
          Variable<String>(gavetaSinalInvertido.value);
    }
    if (gavetaUtilizacao.present) {
      map['GAVETA_UTILIZACAO'] = Variable<int>(gavetaUtilizacao.value);
    }
    if (usaTecladoReduzido.present) {
      map['USA_TECLADO_REDUZIDO'] = Variable<String>(usaTecladoReduzido.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvConfiguracaosCompanion(')
          ..write('id: $id, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idPdvCaixa: $idPdvCaixa, ')
          ..write('mensagemCupom: $mensagemCupom, ')
          ..write('portaEcf: $portaEcf, ')
          ..write('ipServidor: $ipServidor, ')
          ..write('ipSitef: $ipSitef, ')
          ..write('tipoTef: $tipoTef, ')
          ..write('tituloTelaCaixa: $tituloTelaCaixa, ')
          ..write('caminhoImagensProdutos: $caminhoImagensProdutos, ')
          ..write('caminhoImagensMarketing: $caminhoImagensMarketing, ')
          ..write('corJanelasInternas: $corJanelasInternas, ')
          ..write('marketingAtivo: $marketingAtivo, ')
          ..write('cfopEcf: $cfopEcf, ')
          ..write('timeoutEcf: $timeoutEcf, ')
          ..write('intervaloEcf: $intervaloEcf, ')
          ..write('descricaoSuprimento: $descricaoSuprimento, ')
          ..write('descricaoSangria: $descricaoSangria, ')
          ..write('tefTipoGp: $tefTipoGp, ')
          ..write('tefTempoEspera: $tefTempoEspera, ')
          ..write('tefEsperaSts: $tefEsperaSts, ')
          ..write('tefNumeroVias: $tefNumeroVias, ')
          ..write('decimaisQuantidade: $decimaisQuantidade, ')
          ..write('decimaisValor: $decimaisValor, ')
          ..write('bitsPorSegundo: $bitsPorSegundo, ')
          ..write('quantidadeMaximaCartoes: $quantidadeMaximaCartoes, ')
          ..write('pesquisaParte: $pesquisaParte, ')
          ..write('laudo: $laudo, ')
          ..write('dataAtualizacaoEstoque: $dataAtualizacaoEstoque, ')
          ..write('pedeCpfCupom: $pedeCpfCupom, ')
          ..write('tipoIntegracao: $tipoIntegracao, ')
          ..write('timerIntegracao: $timerIntegracao, ')
          ..write('gavetaSinalInvertido: $gavetaSinalInvertido, ')
          ..write('gavetaUtilizacao: $gavetaUtilizacao, ')
          ..write('usaTecladoReduzido: $usaTecladoReduzido')
          ..write(')'))
        .toString();
  }
}

class $PdvConfiguracaosTable extends PdvConfiguracaos
    with TableInfo<$PdvConfiguracaosTable, PdvConfiguracao> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvConfiguracaosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idEcfImpressoraMeta =
      const VerificationMeta('idEcfImpressora');
  GeneratedIntColumn _idEcfImpressora;
  @override
  GeneratedIntColumn get idEcfImpressora =>
      _idEcfImpressora ??= _constructIdEcfImpressora();
  GeneratedIntColumn _constructIdEcfImpressora() {
    return GeneratedIntColumn('ID_ECF_IMPRESSORA', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
  }

  final VerificationMeta _idPdvCaixaMeta = const VerificationMeta('idPdvCaixa');
  GeneratedIntColumn _idPdvCaixa;
  @override
  GeneratedIntColumn get idPdvCaixa => _idPdvCaixa ??= _constructIdPdvCaixa();
  GeneratedIntColumn _constructIdPdvCaixa() {
    return GeneratedIntColumn('ID_PDV_CAIXA', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_CAIXA(ID)');
  }

  final VerificationMeta _mensagemCupomMeta =
      const VerificationMeta('mensagemCupom');
  GeneratedTextColumn _mensagemCupom;
  @override
  GeneratedTextColumn get mensagemCupom =>
      _mensagemCupom ??= _constructMensagemCupom();
  GeneratedTextColumn _constructMensagemCupom() {
    return GeneratedTextColumn('MENSAGEM_CUPOM', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _portaEcfMeta = const VerificationMeta('portaEcf');
  GeneratedTextColumn _portaEcf;
  @override
  GeneratedTextColumn get portaEcf => _portaEcf ??= _constructPortaEcf();
  GeneratedTextColumn _constructPortaEcf() {
    return GeneratedTextColumn('PORTA_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _ipServidorMeta = const VerificationMeta('ipServidor');
  GeneratedTextColumn _ipServidor;
  @override
  GeneratedTextColumn get ipServidor => _ipServidor ??= _constructIpServidor();
  GeneratedTextColumn _constructIpServidor() {
    return GeneratedTextColumn('IP_SERVIDOR', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _ipSitefMeta = const VerificationMeta('ipSitef');
  GeneratedTextColumn _ipSitef;
  @override
  GeneratedTextColumn get ipSitef => _ipSitef ??= _constructIpSitef();
  GeneratedTextColumn _constructIpSitef() {
    return GeneratedTextColumn('IP_SITEF', $tableName, true,
        minTextLength: 1, maxTextLength: 15);
  }

  final VerificationMeta _tipoTefMeta = const VerificationMeta('tipoTef');
  GeneratedTextColumn _tipoTef;
  @override
  GeneratedTextColumn get tipoTef => _tipoTef ??= _constructTipoTef();
  GeneratedTextColumn _constructTipoTef() {
    return GeneratedTextColumn('TIPO_TEF', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _tituloTelaCaixaMeta =
      const VerificationMeta('tituloTelaCaixa');
  GeneratedTextColumn _tituloTelaCaixa;
  @override
  GeneratedTextColumn get tituloTelaCaixa =>
      _tituloTelaCaixa ??= _constructTituloTelaCaixa();
  GeneratedTextColumn _constructTituloTelaCaixa() {
    return GeneratedTextColumn('TITULO_TELA_CAIXA', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _caminhoImagensProdutosMeta =
      const VerificationMeta('caminhoImagensProdutos');
  GeneratedTextColumn _caminhoImagensProdutos;
  @override
  GeneratedTextColumn get caminhoImagensProdutos =>
      _caminhoImagensProdutos ??= _constructCaminhoImagensProdutos();
  GeneratedTextColumn _constructCaminhoImagensProdutos() {
    return GeneratedTextColumn('CAMINHO_IMAGENS_PRODUTOS', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _caminhoImagensMarketingMeta =
      const VerificationMeta('caminhoImagensMarketing');
  GeneratedTextColumn _caminhoImagensMarketing;
  @override
  GeneratedTextColumn get caminhoImagensMarketing =>
      _caminhoImagensMarketing ??= _constructCaminhoImagensMarketing();
  GeneratedTextColumn _constructCaminhoImagensMarketing() {
    return GeneratedTextColumn('CAMINHO_IMAGENS_MARKETING', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _corJanelasInternasMeta =
      const VerificationMeta('corJanelasInternas');
  GeneratedTextColumn _corJanelasInternas;
  @override
  GeneratedTextColumn get corJanelasInternas =>
      _corJanelasInternas ??= _constructCorJanelasInternas();
  GeneratedTextColumn _constructCorJanelasInternas() {
    return GeneratedTextColumn('COR_JANELAS_INTERNAS', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _marketingAtivoMeta =
      const VerificationMeta('marketingAtivo');
  GeneratedTextColumn _marketingAtivo;
  @override
  GeneratedTextColumn get marketingAtivo =>
      _marketingAtivo ??= _constructMarketingAtivo();
  GeneratedTextColumn _constructMarketingAtivo() {
    return GeneratedTextColumn('MARKETING_ATIVO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _cfopEcfMeta = const VerificationMeta('cfopEcf');
  GeneratedIntColumn _cfopEcf;
  @override
  GeneratedIntColumn get cfopEcf => _cfopEcf ??= _constructCfopEcf();
  GeneratedIntColumn _constructCfopEcf() {
    return GeneratedIntColumn(
      'CFOP_ECF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _timeoutEcfMeta = const VerificationMeta('timeoutEcf');
  GeneratedIntColumn _timeoutEcf;
  @override
  GeneratedIntColumn get timeoutEcf => _timeoutEcf ??= _constructTimeoutEcf();
  GeneratedIntColumn _constructTimeoutEcf() {
    return GeneratedIntColumn(
      'TIMEOUT_ECF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _intervaloEcfMeta =
      const VerificationMeta('intervaloEcf');
  GeneratedIntColumn _intervaloEcf;
  @override
  GeneratedIntColumn get intervaloEcf =>
      _intervaloEcf ??= _constructIntervaloEcf();
  GeneratedIntColumn _constructIntervaloEcf() {
    return GeneratedIntColumn(
      'INTERVALO_ECF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _descricaoSuprimentoMeta =
      const VerificationMeta('descricaoSuprimento');
  GeneratedTextColumn _descricaoSuprimento;
  @override
  GeneratedTextColumn get descricaoSuprimento =>
      _descricaoSuprimento ??= _constructDescricaoSuprimento();
  GeneratedTextColumn _constructDescricaoSuprimento() {
    return GeneratedTextColumn('DESCRICAO_SUPRIMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _descricaoSangriaMeta =
      const VerificationMeta('descricaoSangria');
  GeneratedTextColumn _descricaoSangria;
  @override
  GeneratedTextColumn get descricaoSangria =>
      _descricaoSangria ??= _constructDescricaoSangria();
  GeneratedTextColumn _constructDescricaoSangria() {
    return GeneratedTextColumn('DESCRICAO_SANGRIA', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _tefTipoGpMeta = const VerificationMeta('tefTipoGp');
  GeneratedIntColumn _tefTipoGp;
  @override
  GeneratedIntColumn get tefTipoGp => _tefTipoGp ??= _constructTefTipoGp();
  GeneratedIntColumn _constructTefTipoGp() {
    return GeneratedIntColumn(
      'TEF_TIPO_GP',
      $tableName,
      true,
    );
  }

  final VerificationMeta _tefTempoEsperaMeta =
      const VerificationMeta('tefTempoEspera');
  GeneratedIntColumn _tefTempoEspera;
  @override
  GeneratedIntColumn get tefTempoEspera =>
      _tefTempoEspera ??= _constructTefTempoEspera();
  GeneratedIntColumn _constructTefTempoEspera() {
    return GeneratedIntColumn(
      'TEF_TEMPO_ESPERA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _tefEsperaStsMeta =
      const VerificationMeta('tefEsperaSts');
  GeneratedIntColumn _tefEsperaSts;
  @override
  GeneratedIntColumn get tefEsperaSts =>
      _tefEsperaSts ??= _constructTefEsperaSts();
  GeneratedIntColumn _constructTefEsperaSts() {
    return GeneratedIntColumn(
      'TEF_ESPERA_STS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _tefNumeroViasMeta =
      const VerificationMeta('tefNumeroVias');
  GeneratedIntColumn _tefNumeroVias;
  @override
  GeneratedIntColumn get tefNumeroVias =>
      _tefNumeroVias ??= _constructTefNumeroVias();
  GeneratedIntColumn _constructTefNumeroVias() {
    return GeneratedIntColumn(
      'TEF_NUMERO_VIAS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _decimaisQuantidadeMeta =
      const VerificationMeta('decimaisQuantidade');
  GeneratedIntColumn _decimaisQuantidade;
  @override
  GeneratedIntColumn get decimaisQuantidade =>
      _decimaisQuantidade ??= _constructDecimaisQuantidade();
  GeneratedIntColumn _constructDecimaisQuantidade() {
    return GeneratedIntColumn(
      'DECIMAIS_QUANTIDADE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _decimaisValorMeta =
      const VerificationMeta('decimaisValor');
  GeneratedIntColumn _decimaisValor;
  @override
  GeneratedIntColumn get decimaisValor =>
      _decimaisValor ??= _constructDecimaisValor();
  GeneratedIntColumn _constructDecimaisValor() {
    return GeneratedIntColumn(
      'DECIMAIS_VALOR',
      $tableName,
      true,
    );
  }

  final VerificationMeta _bitsPorSegundoMeta =
      const VerificationMeta('bitsPorSegundo');
  GeneratedIntColumn _bitsPorSegundo;
  @override
  GeneratedIntColumn get bitsPorSegundo =>
      _bitsPorSegundo ??= _constructBitsPorSegundo();
  GeneratedIntColumn _constructBitsPorSegundo() {
    return GeneratedIntColumn(
      'BITS_POR_SEGUNDO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _quantidadeMaximaCartoesMeta =
      const VerificationMeta('quantidadeMaximaCartoes');
  GeneratedIntColumn _quantidadeMaximaCartoes;
  @override
  GeneratedIntColumn get quantidadeMaximaCartoes =>
      _quantidadeMaximaCartoes ??= _constructQuantidadeMaximaCartoes();
  GeneratedIntColumn _constructQuantidadeMaximaCartoes() {
    return GeneratedIntColumn(
      'QUANTIDADE_MAXIMA_CARTOES',
      $tableName,
      true,
    );
  }

  final VerificationMeta _pesquisaParteMeta =
      const VerificationMeta('pesquisaParte');
  GeneratedTextColumn _pesquisaParte;
  @override
  GeneratedTextColumn get pesquisaParte =>
      _pesquisaParte ??= _constructPesquisaParte();
  GeneratedTextColumn _constructPesquisaParte() {
    return GeneratedTextColumn('PESQUISA_PARTE', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _laudoMeta = const VerificationMeta('laudo');
  GeneratedTextColumn _laudo;
  @override
  GeneratedTextColumn get laudo => _laudo ??= _constructLaudo();
  GeneratedTextColumn _constructLaudo() {
    return GeneratedTextColumn('LAUDO', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _dataAtualizacaoEstoqueMeta =
      const VerificationMeta('dataAtualizacaoEstoque');
  GeneratedDateTimeColumn _dataAtualizacaoEstoque;
  @override
  GeneratedDateTimeColumn get dataAtualizacaoEstoque =>
      _dataAtualizacaoEstoque ??= _constructDataAtualizacaoEstoque();
  GeneratedDateTimeColumn _constructDataAtualizacaoEstoque() {
    return GeneratedDateTimeColumn(
      'DATA_ATUALIZACAO_ESTOQUE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _pedeCpfCupomMeta =
      const VerificationMeta('pedeCpfCupom');
  GeneratedTextColumn _pedeCpfCupom;
  @override
  GeneratedTextColumn get pedeCpfCupom =>
      _pedeCpfCupom ??= _constructPedeCpfCupom();
  GeneratedTextColumn _constructPedeCpfCupom() {
    return GeneratedTextColumn('PEDE_CPF_CUPOM', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _tipoIntegracaoMeta =
      const VerificationMeta('tipoIntegracao');
  GeneratedIntColumn _tipoIntegracao;
  @override
  GeneratedIntColumn get tipoIntegracao =>
      _tipoIntegracao ??= _constructTipoIntegracao();
  GeneratedIntColumn _constructTipoIntegracao() {
    return GeneratedIntColumn(
      'TIPO_INTEGRACAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _timerIntegracaoMeta =
      const VerificationMeta('timerIntegracao');
  GeneratedIntColumn _timerIntegracao;
  @override
  GeneratedIntColumn get timerIntegracao =>
      _timerIntegracao ??= _constructTimerIntegracao();
  GeneratedIntColumn _constructTimerIntegracao() {
    return GeneratedIntColumn(
      'TIMER_INTEGRACAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _gavetaSinalInvertidoMeta =
      const VerificationMeta('gavetaSinalInvertido');
  GeneratedTextColumn _gavetaSinalInvertido;
  @override
  GeneratedTextColumn get gavetaSinalInvertido =>
      _gavetaSinalInvertido ??= _constructGavetaSinalInvertido();
  GeneratedTextColumn _constructGavetaSinalInvertido() {
    return GeneratedTextColumn('GAVETA_SINAL_INVERTIDO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _gavetaUtilizacaoMeta =
      const VerificationMeta('gavetaUtilizacao');
  GeneratedIntColumn _gavetaUtilizacao;
  @override
  GeneratedIntColumn get gavetaUtilizacao =>
      _gavetaUtilizacao ??= _constructGavetaUtilizacao();
  GeneratedIntColumn _constructGavetaUtilizacao() {
    return GeneratedIntColumn(
      'GAVETA_UTILIZACAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _usaTecladoReduzidoMeta =
      const VerificationMeta('usaTecladoReduzido');
  GeneratedTextColumn _usaTecladoReduzido;
  @override
  GeneratedTextColumn get usaTecladoReduzido =>
      _usaTecladoReduzido ??= _constructUsaTecladoReduzido();
  GeneratedTextColumn _constructUsaTecladoReduzido() {
    return GeneratedTextColumn('USA_TECLADO_REDUZIDO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idEcfImpressora,
        idPdvCaixa,
        mensagemCupom,
        portaEcf,
        ipServidor,
        ipSitef,
        tipoTef,
        tituloTelaCaixa,
        caminhoImagensProdutos,
        caminhoImagensMarketing,
        corJanelasInternas,
        marketingAtivo,
        cfopEcf,
        timeoutEcf,
        intervaloEcf,
        descricaoSuprimento,
        descricaoSangria,
        tefTipoGp,
        tefTempoEspera,
        tefEsperaSts,
        tefNumeroVias,
        decimaisQuantidade,
        decimaisValor,
        bitsPorSegundo,
        quantidadeMaximaCartoes,
        pesquisaParte,
        laudo,
        dataAtualizacaoEstoque,
        pedeCpfCupom,
        tipoIntegracao,
        timerIntegracao,
        gavetaSinalInvertido,
        gavetaUtilizacao,
        usaTecladoReduzido
      ];
  @override
  $PdvConfiguracaosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_CONFIGURACAO';
  @override
  final String actualTableName = 'PDV_CONFIGURACAO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvConfiguracao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_ECF_IMPRESSORA')) {
      context.handle(
          _idEcfImpressoraMeta,
          idEcfImpressora.isAcceptableOrUnknown(
              data['ID_ECF_IMPRESSORA'], _idEcfImpressoraMeta));
    }
    if (data.containsKey('ID_PDV_CAIXA')) {
      context.handle(
          _idPdvCaixaMeta,
          idPdvCaixa.isAcceptableOrUnknown(
              data['ID_PDV_CAIXA'], _idPdvCaixaMeta));
    }
    if (data.containsKey('MENSAGEM_CUPOM')) {
      context.handle(
          _mensagemCupomMeta,
          mensagemCupom.isAcceptableOrUnknown(
              data['MENSAGEM_CUPOM'], _mensagemCupomMeta));
    }
    if (data.containsKey('PORTA_ECF')) {
      context.handle(_portaEcfMeta,
          portaEcf.isAcceptableOrUnknown(data['PORTA_ECF'], _portaEcfMeta));
    }
    if (data.containsKey('IP_SERVIDOR')) {
      context.handle(
          _ipServidorMeta,
          ipServidor.isAcceptableOrUnknown(
              data['IP_SERVIDOR'], _ipServidorMeta));
    }
    if (data.containsKey('IP_SITEF')) {
      context.handle(_ipSitefMeta,
          ipSitef.isAcceptableOrUnknown(data['IP_SITEF'], _ipSitefMeta));
    }
    if (data.containsKey('TIPO_TEF')) {
      context.handle(_tipoTefMeta,
          tipoTef.isAcceptableOrUnknown(data['TIPO_TEF'], _tipoTefMeta));
    }
    if (data.containsKey('TITULO_TELA_CAIXA')) {
      context.handle(
          _tituloTelaCaixaMeta,
          tituloTelaCaixa.isAcceptableOrUnknown(
              data['TITULO_TELA_CAIXA'], _tituloTelaCaixaMeta));
    }
    if (data.containsKey('CAMINHO_IMAGENS_PRODUTOS')) {
      context.handle(
          _caminhoImagensProdutosMeta,
          caminhoImagensProdutos.isAcceptableOrUnknown(
              data['CAMINHO_IMAGENS_PRODUTOS'], _caminhoImagensProdutosMeta));
    }
    if (data.containsKey('CAMINHO_IMAGENS_MARKETING')) {
      context.handle(
          _caminhoImagensMarketingMeta,
          caminhoImagensMarketing.isAcceptableOrUnknown(
              data['CAMINHO_IMAGENS_MARKETING'], _caminhoImagensMarketingMeta));
    }
    if (data.containsKey('COR_JANELAS_INTERNAS')) {
      context.handle(
          _corJanelasInternasMeta,
          corJanelasInternas.isAcceptableOrUnknown(
              data['COR_JANELAS_INTERNAS'], _corJanelasInternasMeta));
    }
    if (data.containsKey('MARKETING_ATIVO')) {
      context.handle(
          _marketingAtivoMeta,
          marketingAtivo.isAcceptableOrUnknown(
              data['MARKETING_ATIVO'], _marketingAtivoMeta));
    }
    if (data.containsKey('CFOP_ECF')) {
      context.handle(_cfopEcfMeta,
          cfopEcf.isAcceptableOrUnknown(data['CFOP_ECF'], _cfopEcfMeta));
    }
    if (data.containsKey('TIMEOUT_ECF')) {
      context.handle(
          _timeoutEcfMeta,
          timeoutEcf.isAcceptableOrUnknown(
              data['TIMEOUT_ECF'], _timeoutEcfMeta));
    }
    if (data.containsKey('INTERVALO_ECF')) {
      context.handle(
          _intervaloEcfMeta,
          intervaloEcf.isAcceptableOrUnknown(
              data['INTERVALO_ECF'], _intervaloEcfMeta));
    }
    if (data.containsKey('DESCRICAO_SUPRIMENTO')) {
      context.handle(
          _descricaoSuprimentoMeta,
          descricaoSuprimento.isAcceptableOrUnknown(
              data['DESCRICAO_SUPRIMENTO'], _descricaoSuprimentoMeta));
    }
    if (data.containsKey('DESCRICAO_SANGRIA')) {
      context.handle(
          _descricaoSangriaMeta,
          descricaoSangria.isAcceptableOrUnknown(
              data['DESCRICAO_SANGRIA'], _descricaoSangriaMeta));
    }
    if (data.containsKey('TEF_TIPO_GP')) {
      context.handle(_tefTipoGpMeta,
          tefTipoGp.isAcceptableOrUnknown(data['TEF_TIPO_GP'], _tefTipoGpMeta));
    }
    if (data.containsKey('TEF_TEMPO_ESPERA')) {
      context.handle(
          _tefTempoEsperaMeta,
          tefTempoEspera.isAcceptableOrUnknown(
              data['TEF_TEMPO_ESPERA'], _tefTempoEsperaMeta));
    }
    if (data.containsKey('TEF_ESPERA_STS')) {
      context.handle(
          _tefEsperaStsMeta,
          tefEsperaSts.isAcceptableOrUnknown(
              data['TEF_ESPERA_STS'], _tefEsperaStsMeta));
    }
    if (data.containsKey('TEF_NUMERO_VIAS')) {
      context.handle(
          _tefNumeroViasMeta,
          tefNumeroVias.isAcceptableOrUnknown(
              data['TEF_NUMERO_VIAS'], _tefNumeroViasMeta));
    }
    if (data.containsKey('DECIMAIS_QUANTIDADE')) {
      context.handle(
          _decimaisQuantidadeMeta,
          decimaisQuantidade.isAcceptableOrUnknown(
              data['DECIMAIS_QUANTIDADE'], _decimaisQuantidadeMeta));
    }
    if (data.containsKey('DECIMAIS_VALOR')) {
      context.handle(
          _decimaisValorMeta,
          decimaisValor.isAcceptableOrUnknown(
              data['DECIMAIS_VALOR'], _decimaisValorMeta));
    }
    if (data.containsKey('BITS_POR_SEGUNDO')) {
      context.handle(
          _bitsPorSegundoMeta,
          bitsPorSegundo.isAcceptableOrUnknown(
              data['BITS_POR_SEGUNDO'], _bitsPorSegundoMeta));
    }
    if (data.containsKey('QUANTIDADE_MAXIMA_CARTOES')) {
      context.handle(
          _quantidadeMaximaCartoesMeta,
          quantidadeMaximaCartoes.isAcceptableOrUnknown(
              data['QUANTIDADE_MAXIMA_CARTOES'], _quantidadeMaximaCartoesMeta));
    }
    if (data.containsKey('PESQUISA_PARTE')) {
      context.handle(
          _pesquisaParteMeta,
          pesquisaParte.isAcceptableOrUnknown(
              data['PESQUISA_PARTE'], _pesquisaParteMeta));
    }
    if (data.containsKey('LAUDO')) {
      context.handle(
          _laudoMeta, laudo.isAcceptableOrUnknown(data['LAUDO'], _laudoMeta));
    }
    if (data.containsKey('DATA_ATUALIZACAO_ESTOQUE')) {
      context.handle(
          _dataAtualizacaoEstoqueMeta,
          dataAtualizacaoEstoque.isAcceptableOrUnknown(
              data['DATA_ATUALIZACAO_ESTOQUE'], _dataAtualizacaoEstoqueMeta));
    }
    if (data.containsKey('PEDE_CPF_CUPOM')) {
      context.handle(
          _pedeCpfCupomMeta,
          pedeCpfCupom.isAcceptableOrUnknown(
              data['PEDE_CPF_CUPOM'], _pedeCpfCupomMeta));
    }
    if (data.containsKey('TIPO_INTEGRACAO')) {
      context.handle(
          _tipoIntegracaoMeta,
          tipoIntegracao.isAcceptableOrUnknown(
              data['TIPO_INTEGRACAO'], _tipoIntegracaoMeta));
    }
    if (data.containsKey('TIMER_INTEGRACAO')) {
      context.handle(
          _timerIntegracaoMeta,
          timerIntegracao.isAcceptableOrUnknown(
              data['TIMER_INTEGRACAO'], _timerIntegracaoMeta));
    }
    if (data.containsKey('GAVETA_SINAL_INVERTIDO')) {
      context.handle(
          _gavetaSinalInvertidoMeta,
          gavetaSinalInvertido.isAcceptableOrUnknown(
              data['GAVETA_SINAL_INVERTIDO'], _gavetaSinalInvertidoMeta));
    }
    if (data.containsKey('GAVETA_UTILIZACAO')) {
      context.handle(
          _gavetaUtilizacaoMeta,
          gavetaUtilizacao.isAcceptableOrUnknown(
              data['GAVETA_UTILIZACAO'], _gavetaUtilizacaoMeta));
    }
    if (data.containsKey('USA_TECLADO_REDUZIDO')) {
      context.handle(
          _usaTecladoReduzidoMeta,
          usaTecladoReduzido.isAcceptableOrUnknown(
              data['USA_TECLADO_REDUZIDO'], _usaTecladoReduzidoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvConfiguracao map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvConfiguracao.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvConfiguracaosTable createAlias(String alias) {
    return $PdvConfiguracaosTable(_db, alias);
  }
}

class PdvConfiguracaoBalanca extends DataClass
    implements Insertable<PdvConfiguracaoBalanca> {
  final int id;
  final int idPdvConfiguracao;
  final int modelo;
  final String identificador;
  final int handShake;
  final int parity;
  final int stopBits;
  final int dataBits;
  final int baudRate;
  final String porta;
  final int timeout;
  final String tipoConfiguracao;
  PdvConfiguracaoBalanca(
      {@required this.id,
      this.idPdvConfiguracao,
      this.modelo,
      this.identificador,
      this.handShake,
      this.parity,
      this.stopBits,
      this.dataBits,
      this.baudRate,
      this.porta,
      this.timeout,
      this.tipoConfiguracao});
  factory PdvConfiguracaoBalanca.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return PdvConfiguracaoBalanca(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvConfiguracao: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_PDV_CONFIGURACAO']),
      modelo: intType.mapFromDatabaseResponse(data['${effectivePrefix}MODELO']),
      identificador: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}IDENTIFICADOR']),
      handShake:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}HAND_SHAKE']),
      parity: intType.mapFromDatabaseResponse(data['${effectivePrefix}PARITY']),
      stopBits:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}STOP_BITS']),
      dataBits:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}DATA_BITS']),
      baudRate:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}BAUD_RATE']),
      porta:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}PORTA']),
      timeout:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}TIMEOUT']),
      tipoConfiguracao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_CONFIGURACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvConfiguracao != null) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao);
    }
    if (!nullToAbsent || modelo != null) {
      map['MODELO'] = Variable<int>(modelo);
    }
    if (!nullToAbsent || identificador != null) {
      map['IDENTIFICADOR'] = Variable<String>(identificador);
    }
    if (!nullToAbsent || handShake != null) {
      map['HAND_SHAKE'] = Variable<int>(handShake);
    }
    if (!nullToAbsent || parity != null) {
      map['PARITY'] = Variable<int>(parity);
    }
    if (!nullToAbsent || stopBits != null) {
      map['STOP_BITS'] = Variable<int>(stopBits);
    }
    if (!nullToAbsent || dataBits != null) {
      map['DATA_BITS'] = Variable<int>(dataBits);
    }
    if (!nullToAbsent || baudRate != null) {
      map['BAUD_RATE'] = Variable<int>(baudRate);
    }
    if (!nullToAbsent || porta != null) {
      map['PORTA'] = Variable<String>(porta);
    }
    if (!nullToAbsent || timeout != null) {
      map['TIMEOUT'] = Variable<int>(timeout);
    }
    if (!nullToAbsent || tipoConfiguracao != null) {
      map['TIPO_CONFIGURACAO'] = Variable<String>(tipoConfiguracao);
    }
    return map;
  }

  PdvConfiguracaoBalancasCompanion toCompanion(bool nullToAbsent) {
    return PdvConfiguracaoBalancasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvConfiguracao: idPdvConfiguracao == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvConfiguracao),
      modelo:
          modelo == null && nullToAbsent ? const Value.absent() : Value(modelo),
      identificador: identificador == null && nullToAbsent
          ? const Value.absent()
          : Value(identificador),
      handShake: handShake == null && nullToAbsent
          ? const Value.absent()
          : Value(handShake),
      parity:
          parity == null && nullToAbsent ? const Value.absent() : Value(parity),
      stopBits: stopBits == null && nullToAbsent
          ? const Value.absent()
          : Value(stopBits),
      dataBits: dataBits == null && nullToAbsent
          ? const Value.absent()
          : Value(dataBits),
      baudRate: baudRate == null && nullToAbsent
          ? const Value.absent()
          : Value(baudRate),
      porta:
          porta == null && nullToAbsent ? const Value.absent() : Value(porta),
      timeout: timeout == null && nullToAbsent
          ? const Value.absent()
          : Value(timeout),
      tipoConfiguracao: tipoConfiguracao == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoConfiguracao),
    );
  }

  factory PdvConfiguracaoBalanca.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvConfiguracaoBalanca(
      id: serializer.fromJson<int>(json['id']),
      idPdvConfiguracao: serializer.fromJson<int>(json['idPdvConfiguracao']),
      modelo: serializer.fromJson<int>(json['modelo']),
      identificador: serializer.fromJson<String>(json['identificador']),
      handShake: serializer.fromJson<int>(json['handShake']),
      parity: serializer.fromJson<int>(json['parity']),
      stopBits: serializer.fromJson<int>(json['stopBits']),
      dataBits: serializer.fromJson<int>(json['dataBits']),
      baudRate: serializer.fromJson<int>(json['baudRate']),
      porta: serializer.fromJson<String>(json['porta']),
      timeout: serializer.fromJson<int>(json['timeout']),
      tipoConfiguracao: serializer.fromJson<String>(json['tipoConfiguracao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvConfiguracao': serializer.toJson<int>(idPdvConfiguracao),
      'modelo': serializer.toJson<int>(modelo),
      'identificador': serializer.toJson<String>(identificador),
      'handShake': serializer.toJson<int>(handShake),
      'parity': serializer.toJson<int>(parity),
      'stopBits': serializer.toJson<int>(stopBits),
      'dataBits': serializer.toJson<int>(dataBits),
      'baudRate': serializer.toJson<int>(baudRate),
      'porta': serializer.toJson<String>(porta),
      'timeout': serializer.toJson<int>(timeout),
      'tipoConfiguracao': serializer.toJson<String>(tipoConfiguracao),
    };
  }

  PdvConfiguracaoBalanca copyWith(
          {int id,
          int idPdvConfiguracao,
          int modelo,
          String identificador,
          int handShake,
          int parity,
          int stopBits,
          int dataBits,
          int baudRate,
          String porta,
          int timeout,
          String tipoConfiguracao}) =>
      PdvConfiguracaoBalanca(
        id: id ?? this.id,
        idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
        modelo: modelo ?? this.modelo,
        identificador: identificador ?? this.identificador,
        handShake: handShake ?? this.handShake,
        parity: parity ?? this.parity,
        stopBits: stopBits ?? this.stopBits,
        dataBits: dataBits ?? this.dataBits,
        baudRate: baudRate ?? this.baudRate,
        porta: porta ?? this.porta,
        timeout: timeout ?? this.timeout,
        tipoConfiguracao: tipoConfiguracao ?? this.tipoConfiguracao,
      );
  @override
  String toString() {
    return (StringBuffer('PdvConfiguracaoBalanca(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('modelo: $modelo, ')
          ..write('identificador: $identificador, ')
          ..write('handShake: $handShake, ')
          ..write('parity: $parity, ')
          ..write('stopBits: $stopBits, ')
          ..write('dataBits: $dataBits, ')
          ..write('baudRate: $baudRate, ')
          ..write('porta: $porta, ')
          ..write('timeout: $timeout, ')
          ..write('tipoConfiguracao: $tipoConfiguracao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idPdvConfiguracao.hashCode,
          $mrjc(
              modelo.hashCode,
              $mrjc(
                  identificador.hashCode,
                  $mrjc(
                      handShake.hashCode,
                      $mrjc(
                          parity.hashCode,
                          $mrjc(
                              stopBits.hashCode,
                              $mrjc(
                                  dataBits.hashCode,
                                  $mrjc(
                                      baudRate.hashCode,
                                      $mrjc(
                                          porta.hashCode,
                                          $mrjc(
                                              timeout.hashCode,
                                              tipoConfiguracao
                                                  .hashCode))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvConfiguracaoBalanca &&
          other.id == this.id &&
          other.idPdvConfiguracao == this.idPdvConfiguracao &&
          other.modelo == this.modelo &&
          other.identificador == this.identificador &&
          other.handShake == this.handShake &&
          other.parity == this.parity &&
          other.stopBits == this.stopBits &&
          other.dataBits == this.dataBits &&
          other.baudRate == this.baudRate &&
          other.porta == this.porta &&
          other.timeout == this.timeout &&
          other.tipoConfiguracao == this.tipoConfiguracao);
}

class PdvConfiguracaoBalancasCompanion
    extends UpdateCompanion<PdvConfiguracaoBalanca> {
  final Value<int> id;
  final Value<int> idPdvConfiguracao;
  final Value<int> modelo;
  final Value<String> identificador;
  final Value<int> handShake;
  final Value<int> parity;
  final Value<int> stopBits;
  final Value<int> dataBits;
  final Value<int> baudRate;
  final Value<String> porta;
  final Value<int> timeout;
  final Value<String> tipoConfiguracao;
  const PdvConfiguracaoBalancasCompanion({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.modelo = const Value.absent(),
    this.identificador = const Value.absent(),
    this.handShake = const Value.absent(),
    this.parity = const Value.absent(),
    this.stopBits = const Value.absent(),
    this.dataBits = const Value.absent(),
    this.baudRate = const Value.absent(),
    this.porta = const Value.absent(),
    this.timeout = const Value.absent(),
    this.tipoConfiguracao = const Value.absent(),
  });
  PdvConfiguracaoBalancasCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.modelo = const Value.absent(),
    this.identificador = const Value.absent(),
    this.handShake = const Value.absent(),
    this.parity = const Value.absent(),
    this.stopBits = const Value.absent(),
    this.dataBits = const Value.absent(),
    this.baudRate = const Value.absent(),
    this.porta = const Value.absent(),
    this.timeout = const Value.absent(),
    this.tipoConfiguracao = const Value.absent(),
  });
  static Insertable<PdvConfiguracaoBalanca> custom({
    Expression<int> id,
    Expression<int> idPdvConfiguracao,
    Expression<int> modelo,
    Expression<String> identificador,
    Expression<int> handShake,
    Expression<int> parity,
    Expression<int> stopBits,
    Expression<int> dataBits,
    Expression<int> baudRate,
    Expression<String> porta,
    Expression<int> timeout,
    Expression<String> tipoConfiguracao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvConfiguracao != null) 'ID_PDV_CONFIGURACAO': idPdvConfiguracao,
      if (modelo != null) 'MODELO': modelo,
      if (identificador != null) 'IDENTIFICADOR': identificador,
      if (handShake != null) 'HAND_SHAKE': handShake,
      if (parity != null) 'PARITY': parity,
      if (stopBits != null) 'STOP_BITS': stopBits,
      if (dataBits != null) 'DATA_BITS': dataBits,
      if (baudRate != null) 'BAUD_RATE': baudRate,
      if (porta != null) 'PORTA': porta,
      if (timeout != null) 'TIMEOUT': timeout,
      if (tipoConfiguracao != null) 'TIPO_CONFIGURACAO': tipoConfiguracao,
    });
  }

  PdvConfiguracaoBalancasCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvConfiguracao,
      Value<int> modelo,
      Value<String> identificador,
      Value<int> handShake,
      Value<int> parity,
      Value<int> stopBits,
      Value<int> dataBits,
      Value<int> baudRate,
      Value<String> porta,
      Value<int> timeout,
      Value<String> tipoConfiguracao}) {
    return PdvConfiguracaoBalancasCompanion(
      id: id ?? this.id,
      idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
      modelo: modelo ?? this.modelo,
      identificador: identificador ?? this.identificador,
      handShake: handShake ?? this.handShake,
      parity: parity ?? this.parity,
      stopBits: stopBits ?? this.stopBits,
      dataBits: dataBits ?? this.dataBits,
      baudRate: baudRate ?? this.baudRate,
      porta: porta ?? this.porta,
      timeout: timeout ?? this.timeout,
      tipoConfiguracao: tipoConfiguracao ?? this.tipoConfiguracao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvConfiguracao.present) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao.value);
    }
    if (modelo.present) {
      map['MODELO'] = Variable<int>(modelo.value);
    }
    if (identificador.present) {
      map['IDENTIFICADOR'] = Variable<String>(identificador.value);
    }
    if (handShake.present) {
      map['HAND_SHAKE'] = Variable<int>(handShake.value);
    }
    if (parity.present) {
      map['PARITY'] = Variable<int>(parity.value);
    }
    if (stopBits.present) {
      map['STOP_BITS'] = Variable<int>(stopBits.value);
    }
    if (dataBits.present) {
      map['DATA_BITS'] = Variable<int>(dataBits.value);
    }
    if (baudRate.present) {
      map['BAUD_RATE'] = Variable<int>(baudRate.value);
    }
    if (porta.present) {
      map['PORTA'] = Variable<String>(porta.value);
    }
    if (timeout.present) {
      map['TIMEOUT'] = Variable<int>(timeout.value);
    }
    if (tipoConfiguracao.present) {
      map['TIPO_CONFIGURACAO'] = Variable<String>(tipoConfiguracao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvConfiguracaoBalancasCompanion(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('modelo: $modelo, ')
          ..write('identificador: $identificador, ')
          ..write('handShake: $handShake, ')
          ..write('parity: $parity, ')
          ..write('stopBits: $stopBits, ')
          ..write('dataBits: $dataBits, ')
          ..write('baudRate: $baudRate, ')
          ..write('porta: $porta, ')
          ..write('timeout: $timeout, ')
          ..write('tipoConfiguracao: $tipoConfiguracao')
          ..write(')'))
        .toString();
  }
}

class $PdvConfiguracaoBalancasTable extends PdvConfiguracaoBalancas
    with TableInfo<$PdvConfiguracaoBalancasTable, PdvConfiguracaoBalanca> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvConfiguracaoBalancasTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvConfiguracaoMeta =
      const VerificationMeta('idPdvConfiguracao');
  GeneratedIntColumn _idPdvConfiguracao;
  @override
  GeneratedIntColumn get idPdvConfiguracao =>
      _idPdvConfiguracao ??= _constructIdPdvConfiguracao();
  GeneratedIntColumn _constructIdPdvConfiguracao() {
    return GeneratedIntColumn('ID_PDV_CONFIGURACAO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_CONFIGURACAO(ID)');
  }

  final VerificationMeta _modeloMeta = const VerificationMeta('modelo');
  GeneratedIntColumn _modelo;
  @override
  GeneratedIntColumn get modelo => _modelo ??= _constructModelo();
  GeneratedIntColumn _constructModelo() {
    return GeneratedIntColumn(
      'MODELO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _identificadorMeta =
      const VerificationMeta('identificador');
  GeneratedTextColumn _identificador;
  @override
  GeneratedTextColumn get identificador =>
      _identificador ??= _constructIdentificador();
  GeneratedTextColumn _constructIdentificador() {
    return GeneratedTextColumn('IDENTIFICADOR', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _handShakeMeta = const VerificationMeta('handShake');
  GeneratedIntColumn _handShake;
  @override
  GeneratedIntColumn get handShake => _handShake ??= _constructHandShake();
  GeneratedIntColumn _constructHandShake() {
    return GeneratedIntColumn(
      'HAND_SHAKE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _parityMeta = const VerificationMeta('parity');
  GeneratedIntColumn _parity;
  @override
  GeneratedIntColumn get parity => _parity ??= _constructParity();
  GeneratedIntColumn _constructParity() {
    return GeneratedIntColumn(
      'PARITY',
      $tableName,
      true,
    );
  }

  final VerificationMeta _stopBitsMeta = const VerificationMeta('stopBits');
  GeneratedIntColumn _stopBits;
  @override
  GeneratedIntColumn get stopBits => _stopBits ??= _constructStopBits();
  GeneratedIntColumn _constructStopBits() {
    return GeneratedIntColumn(
      'STOP_BITS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataBitsMeta = const VerificationMeta('dataBits');
  GeneratedIntColumn _dataBits;
  @override
  GeneratedIntColumn get dataBits => _dataBits ??= _constructDataBits();
  GeneratedIntColumn _constructDataBits() {
    return GeneratedIntColumn(
      'DATA_BITS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _baudRateMeta = const VerificationMeta('baudRate');
  GeneratedIntColumn _baudRate;
  @override
  GeneratedIntColumn get baudRate => _baudRate ??= _constructBaudRate();
  GeneratedIntColumn _constructBaudRate() {
    return GeneratedIntColumn(
      'BAUD_RATE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _portaMeta = const VerificationMeta('porta');
  GeneratedTextColumn _porta;
  @override
  GeneratedTextColumn get porta => _porta ??= _constructPorta();
  GeneratedTextColumn _constructPorta() {
    return GeneratedTextColumn('PORTA', $tableName, true,
        minTextLength: 1, maxTextLength: 4);
  }

  final VerificationMeta _timeoutMeta = const VerificationMeta('timeout');
  GeneratedIntColumn _timeout;
  @override
  GeneratedIntColumn get timeout => _timeout ??= _constructTimeout();
  GeneratedIntColumn _constructTimeout() {
    return GeneratedIntColumn(
      'TIMEOUT',
      $tableName,
      true,
    );
  }

  final VerificationMeta _tipoConfiguracaoMeta =
      const VerificationMeta('tipoConfiguracao');
  GeneratedTextColumn _tipoConfiguracao;
  @override
  GeneratedTextColumn get tipoConfiguracao =>
      _tipoConfiguracao ??= _constructTipoConfiguracao();
  GeneratedTextColumn _constructTipoConfiguracao() {
    return GeneratedTextColumn('TIPO_CONFIGURACAO', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvConfiguracao,
        modelo,
        identificador,
        handShake,
        parity,
        stopBits,
        dataBits,
        baudRate,
        porta,
        timeout,
        tipoConfiguracao
      ];
  @override
  $PdvConfiguracaoBalancasTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_CONFIGURACAO_BALANCA';
  @override
  final String actualTableName = 'PDV_CONFIGURACAO_BALANCA';
  @override
  VerificationContext validateIntegrity(
      Insertable<PdvConfiguracaoBalanca> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_CONFIGURACAO')) {
      context.handle(
          _idPdvConfiguracaoMeta,
          idPdvConfiguracao.isAcceptableOrUnknown(
              data['ID_PDV_CONFIGURACAO'], _idPdvConfiguracaoMeta));
    }
    if (data.containsKey('MODELO')) {
      context.handle(_modeloMeta,
          modelo.isAcceptableOrUnknown(data['MODELO'], _modeloMeta));
    }
    if (data.containsKey('IDENTIFICADOR')) {
      context.handle(
          _identificadorMeta,
          identificador.isAcceptableOrUnknown(
              data['IDENTIFICADOR'], _identificadorMeta));
    }
    if (data.containsKey('HAND_SHAKE')) {
      context.handle(_handShakeMeta,
          handShake.isAcceptableOrUnknown(data['HAND_SHAKE'], _handShakeMeta));
    }
    if (data.containsKey('PARITY')) {
      context.handle(_parityMeta,
          parity.isAcceptableOrUnknown(data['PARITY'], _parityMeta));
    }
    if (data.containsKey('STOP_BITS')) {
      context.handle(_stopBitsMeta,
          stopBits.isAcceptableOrUnknown(data['STOP_BITS'], _stopBitsMeta));
    }
    if (data.containsKey('DATA_BITS')) {
      context.handle(_dataBitsMeta,
          dataBits.isAcceptableOrUnknown(data['DATA_BITS'], _dataBitsMeta));
    }
    if (data.containsKey('BAUD_RATE')) {
      context.handle(_baudRateMeta,
          baudRate.isAcceptableOrUnknown(data['BAUD_RATE'], _baudRateMeta));
    }
    if (data.containsKey('PORTA')) {
      context.handle(
          _portaMeta, porta.isAcceptableOrUnknown(data['PORTA'], _portaMeta));
    }
    if (data.containsKey('TIMEOUT')) {
      context.handle(_timeoutMeta,
          timeout.isAcceptableOrUnknown(data['TIMEOUT'], _timeoutMeta));
    }
    if (data.containsKey('TIPO_CONFIGURACAO')) {
      context.handle(
          _tipoConfiguracaoMeta,
          tipoConfiguracao.isAcceptableOrUnknown(
              data['TIPO_CONFIGURACAO'], _tipoConfiguracaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvConfiguracaoBalanca map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvConfiguracaoBalanca.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvConfiguracaoBalancasTable createAlias(String alias) {
    return $PdvConfiguracaoBalancasTable(_db, alias);
  }
}

class PdvConfiguracaoLeitorSerial extends DataClass
    implements Insertable<PdvConfiguracaoLeitorSerial> {
  final int id;
  final int idPdvConfiguracao;
  final String usa;
  final String porta;
  final int baud;
  final int handShake;
  final int parity;
  final int stopBits;
  final int dataBits;
  final int intervalo;
  final String usarFila;
  final String hardFlow;
  final String softFlow;
  final String sufixo;
  final String excluirSufixo;
  PdvConfiguracaoLeitorSerial(
      {@required this.id,
      this.idPdvConfiguracao,
      this.usa,
      this.porta,
      this.baud,
      this.handShake,
      this.parity,
      this.stopBits,
      this.dataBits,
      this.intervalo,
      this.usarFila,
      this.hardFlow,
      this.softFlow,
      this.sufixo,
      this.excluirSufixo});
  factory PdvConfiguracaoLeitorSerial.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return PdvConfiguracaoLeitorSerial(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvConfiguracao: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_PDV_CONFIGURACAO']),
      usa: stringType.mapFromDatabaseResponse(data['${effectivePrefix}USA']),
      porta:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}PORTA']),
      baud: intType.mapFromDatabaseResponse(data['${effectivePrefix}BAUD']),
      handShake:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}HAND_SHAKE']),
      parity: intType.mapFromDatabaseResponse(data['${effectivePrefix}PARITY']),
      stopBits:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}STOP_BITS']),
      dataBits:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}DATA_BITS']),
      intervalo:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}INTERVALO']),
      usarFila: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}USAR_FILA']),
      hardFlow: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HARD_FLOW']),
      softFlow: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}SOFT_FLOW']),
      sufixo:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}SUFIXO']),
      excluirSufixo: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}EXCLUIR_SUFIXO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvConfiguracao != null) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao);
    }
    if (!nullToAbsent || usa != null) {
      map['USA'] = Variable<String>(usa);
    }
    if (!nullToAbsent || porta != null) {
      map['PORTA'] = Variable<String>(porta);
    }
    if (!nullToAbsent || baud != null) {
      map['BAUD'] = Variable<int>(baud);
    }
    if (!nullToAbsent || handShake != null) {
      map['HAND_SHAKE'] = Variable<int>(handShake);
    }
    if (!nullToAbsent || parity != null) {
      map['PARITY'] = Variable<int>(parity);
    }
    if (!nullToAbsent || stopBits != null) {
      map['STOP_BITS'] = Variable<int>(stopBits);
    }
    if (!nullToAbsent || dataBits != null) {
      map['DATA_BITS'] = Variable<int>(dataBits);
    }
    if (!nullToAbsent || intervalo != null) {
      map['INTERVALO'] = Variable<int>(intervalo);
    }
    if (!nullToAbsent || usarFila != null) {
      map['USAR_FILA'] = Variable<String>(usarFila);
    }
    if (!nullToAbsent || hardFlow != null) {
      map['HARD_FLOW'] = Variable<String>(hardFlow);
    }
    if (!nullToAbsent || softFlow != null) {
      map['SOFT_FLOW'] = Variable<String>(softFlow);
    }
    if (!nullToAbsent || sufixo != null) {
      map['SUFIXO'] = Variable<String>(sufixo);
    }
    if (!nullToAbsent || excluirSufixo != null) {
      map['EXCLUIR_SUFIXO'] = Variable<String>(excluirSufixo);
    }
    return map;
  }

  PdvConfiguracaoLeitorSerialsCompanion toCompanion(bool nullToAbsent) {
    return PdvConfiguracaoLeitorSerialsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvConfiguracao: idPdvConfiguracao == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvConfiguracao),
      usa: usa == null && nullToAbsent ? const Value.absent() : Value(usa),
      porta:
          porta == null && nullToAbsent ? const Value.absent() : Value(porta),
      baud: baud == null && nullToAbsent ? const Value.absent() : Value(baud),
      handShake: handShake == null && nullToAbsent
          ? const Value.absent()
          : Value(handShake),
      parity:
          parity == null && nullToAbsent ? const Value.absent() : Value(parity),
      stopBits: stopBits == null && nullToAbsent
          ? const Value.absent()
          : Value(stopBits),
      dataBits: dataBits == null && nullToAbsent
          ? const Value.absent()
          : Value(dataBits),
      intervalo: intervalo == null && nullToAbsent
          ? const Value.absent()
          : Value(intervalo),
      usarFila: usarFila == null && nullToAbsent
          ? const Value.absent()
          : Value(usarFila),
      hardFlow: hardFlow == null && nullToAbsent
          ? const Value.absent()
          : Value(hardFlow),
      softFlow: softFlow == null && nullToAbsent
          ? const Value.absent()
          : Value(softFlow),
      sufixo:
          sufixo == null && nullToAbsent ? const Value.absent() : Value(sufixo),
      excluirSufixo: excluirSufixo == null && nullToAbsent
          ? const Value.absent()
          : Value(excluirSufixo),
    );
  }

  factory PdvConfiguracaoLeitorSerial.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvConfiguracaoLeitorSerial(
      id: serializer.fromJson<int>(json['id']),
      idPdvConfiguracao: serializer.fromJson<int>(json['idPdvConfiguracao']),
      usa: serializer.fromJson<String>(json['usa']),
      porta: serializer.fromJson<String>(json['porta']),
      baud: serializer.fromJson<int>(json['baud']),
      handShake: serializer.fromJson<int>(json['handShake']),
      parity: serializer.fromJson<int>(json['parity']),
      stopBits: serializer.fromJson<int>(json['stopBits']),
      dataBits: serializer.fromJson<int>(json['dataBits']),
      intervalo: serializer.fromJson<int>(json['intervalo']),
      usarFila: serializer.fromJson<String>(json['usarFila']),
      hardFlow: serializer.fromJson<String>(json['hardFlow']),
      softFlow: serializer.fromJson<String>(json['softFlow']),
      sufixo: serializer.fromJson<String>(json['sufixo']),
      excluirSufixo: serializer.fromJson<String>(json['excluirSufixo']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvConfiguracao': serializer.toJson<int>(idPdvConfiguracao),
      'usa': serializer.toJson<String>(usa),
      'porta': serializer.toJson<String>(porta),
      'baud': serializer.toJson<int>(baud),
      'handShake': serializer.toJson<int>(handShake),
      'parity': serializer.toJson<int>(parity),
      'stopBits': serializer.toJson<int>(stopBits),
      'dataBits': serializer.toJson<int>(dataBits),
      'intervalo': serializer.toJson<int>(intervalo),
      'usarFila': serializer.toJson<String>(usarFila),
      'hardFlow': serializer.toJson<String>(hardFlow),
      'softFlow': serializer.toJson<String>(softFlow),
      'sufixo': serializer.toJson<String>(sufixo),
      'excluirSufixo': serializer.toJson<String>(excluirSufixo),
    };
  }

  PdvConfiguracaoLeitorSerial copyWith(
          {int id,
          int idPdvConfiguracao,
          String usa,
          String porta,
          int baud,
          int handShake,
          int parity,
          int stopBits,
          int dataBits,
          int intervalo,
          String usarFila,
          String hardFlow,
          String softFlow,
          String sufixo,
          String excluirSufixo}) =>
      PdvConfiguracaoLeitorSerial(
        id: id ?? this.id,
        idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
        usa: usa ?? this.usa,
        porta: porta ?? this.porta,
        baud: baud ?? this.baud,
        handShake: handShake ?? this.handShake,
        parity: parity ?? this.parity,
        stopBits: stopBits ?? this.stopBits,
        dataBits: dataBits ?? this.dataBits,
        intervalo: intervalo ?? this.intervalo,
        usarFila: usarFila ?? this.usarFila,
        hardFlow: hardFlow ?? this.hardFlow,
        softFlow: softFlow ?? this.softFlow,
        sufixo: sufixo ?? this.sufixo,
        excluirSufixo: excluirSufixo ?? this.excluirSufixo,
      );
  @override
  String toString() {
    return (StringBuffer('PdvConfiguracaoLeitorSerial(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('usa: $usa, ')
          ..write('porta: $porta, ')
          ..write('baud: $baud, ')
          ..write('handShake: $handShake, ')
          ..write('parity: $parity, ')
          ..write('stopBits: $stopBits, ')
          ..write('dataBits: $dataBits, ')
          ..write('intervalo: $intervalo, ')
          ..write('usarFila: $usarFila, ')
          ..write('hardFlow: $hardFlow, ')
          ..write('softFlow: $softFlow, ')
          ..write('sufixo: $sufixo, ')
          ..write('excluirSufixo: $excluirSufixo')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idPdvConfiguracao.hashCode,
          $mrjc(
              usa.hashCode,
              $mrjc(
                  porta.hashCode,
                  $mrjc(
                      baud.hashCode,
                      $mrjc(
                          handShake.hashCode,
                          $mrjc(
                              parity.hashCode,
                              $mrjc(
                                  stopBits.hashCode,
                                  $mrjc(
                                      dataBits.hashCode,
                                      $mrjc(
                                          intervalo.hashCode,
                                          $mrjc(
                                              usarFila.hashCode,
                                              $mrjc(
                                                  hardFlow.hashCode,
                                                  $mrjc(
                                                      softFlow.hashCode,
                                                      $mrjc(
                                                          sufixo.hashCode,
                                                          excluirSufixo
                                                              .hashCode)))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvConfiguracaoLeitorSerial &&
          other.id == this.id &&
          other.idPdvConfiguracao == this.idPdvConfiguracao &&
          other.usa == this.usa &&
          other.porta == this.porta &&
          other.baud == this.baud &&
          other.handShake == this.handShake &&
          other.parity == this.parity &&
          other.stopBits == this.stopBits &&
          other.dataBits == this.dataBits &&
          other.intervalo == this.intervalo &&
          other.usarFila == this.usarFila &&
          other.hardFlow == this.hardFlow &&
          other.softFlow == this.softFlow &&
          other.sufixo == this.sufixo &&
          other.excluirSufixo == this.excluirSufixo);
}

class PdvConfiguracaoLeitorSerialsCompanion
    extends UpdateCompanion<PdvConfiguracaoLeitorSerial> {
  final Value<int> id;
  final Value<int> idPdvConfiguracao;
  final Value<String> usa;
  final Value<String> porta;
  final Value<int> baud;
  final Value<int> handShake;
  final Value<int> parity;
  final Value<int> stopBits;
  final Value<int> dataBits;
  final Value<int> intervalo;
  final Value<String> usarFila;
  final Value<String> hardFlow;
  final Value<String> softFlow;
  final Value<String> sufixo;
  final Value<String> excluirSufixo;
  const PdvConfiguracaoLeitorSerialsCompanion({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.usa = const Value.absent(),
    this.porta = const Value.absent(),
    this.baud = const Value.absent(),
    this.handShake = const Value.absent(),
    this.parity = const Value.absent(),
    this.stopBits = const Value.absent(),
    this.dataBits = const Value.absent(),
    this.intervalo = const Value.absent(),
    this.usarFila = const Value.absent(),
    this.hardFlow = const Value.absent(),
    this.softFlow = const Value.absent(),
    this.sufixo = const Value.absent(),
    this.excluirSufixo = const Value.absent(),
  });
  PdvConfiguracaoLeitorSerialsCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvConfiguracao = const Value.absent(),
    this.usa = const Value.absent(),
    this.porta = const Value.absent(),
    this.baud = const Value.absent(),
    this.handShake = const Value.absent(),
    this.parity = const Value.absent(),
    this.stopBits = const Value.absent(),
    this.dataBits = const Value.absent(),
    this.intervalo = const Value.absent(),
    this.usarFila = const Value.absent(),
    this.hardFlow = const Value.absent(),
    this.softFlow = const Value.absent(),
    this.sufixo = const Value.absent(),
    this.excluirSufixo = const Value.absent(),
  });
  static Insertable<PdvConfiguracaoLeitorSerial> custom({
    Expression<int> id,
    Expression<int> idPdvConfiguracao,
    Expression<String> usa,
    Expression<String> porta,
    Expression<int> baud,
    Expression<int> handShake,
    Expression<int> parity,
    Expression<int> stopBits,
    Expression<int> dataBits,
    Expression<int> intervalo,
    Expression<String> usarFila,
    Expression<String> hardFlow,
    Expression<String> softFlow,
    Expression<String> sufixo,
    Expression<String> excluirSufixo,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvConfiguracao != null) 'ID_PDV_CONFIGURACAO': idPdvConfiguracao,
      if (usa != null) 'USA': usa,
      if (porta != null) 'PORTA': porta,
      if (baud != null) 'BAUD': baud,
      if (handShake != null) 'HAND_SHAKE': handShake,
      if (parity != null) 'PARITY': parity,
      if (stopBits != null) 'STOP_BITS': stopBits,
      if (dataBits != null) 'DATA_BITS': dataBits,
      if (intervalo != null) 'INTERVALO': intervalo,
      if (usarFila != null) 'USAR_FILA': usarFila,
      if (hardFlow != null) 'HARD_FLOW': hardFlow,
      if (softFlow != null) 'SOFT_FLOW': softFlow,
      if (sufixo != null) 'SUFIXO': sufixo,
      if (excluirSufixo != null) 'EXCLUIR_SUFIXO': excluirSufixo,
    });
  }

  PdvConfiguracaoLeitorSerialsCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvConfiguracao,
      Value<String> usa,
      Value<String> porta,
      Value<int> baud,
      Value<int> handShake,
      Value<int> parity,
      Value<int> stopBits,
      Value<int> dataBits,
      Value<int> intervalo,
      Value<String> usarFila,
      Value<String> hardFlow,
      Value<String> softFlow,
      Value<String> sufixo,
      Value<String> excluirSufixo}) {
    return PdvConfiguracaoLeitorSerialsCompanion(
      id: id ?? this.id,
      idPdvConfiguracao: idPdvConfiguracao ?? this.idPdvConfiguracao,
      usa: usa ?? this.usa,
      porta: porta ?? this.porta,
      baud: baud ?? this.baud,
      handShake: handShake ?? this.handShake,
      parity: parity ?? this.parity,
      stopBits: stopBits ?? this.stopBits,
      dataBits: dataBits ?? this.dataBits,
      intervalo: intervalo ?? this.intervalo,
      usarFila: usarFila ?? this.usarFila,
      hardFlow: hardFlow ?? this.hardFlow,
      softFlow: softFlow ?? this.softFlow,
      sufixo: sufixo ?? this.sufixo,
      excluirSufixo: excluirSufixo ?? this.excluirSufixo,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvConfiguracao.present) {
      map['ID_PDV_CONFIGURACAO'] = Variable<int>(idPdvConfiguracao.value);
    }
    if (usa.present) {
      map['USA'] = Variable<String>(usa.value);
    }
    if (porta.present) {
      map['PORTA'] = Variable<String>(porta.value);
    }
    if (baud.present) {
      map['BAUD'] = Variable<int>(baud.value);
    }
    if (handShake.present) {
      map['HAND_SHAKE'] = Variable<int>(handShake.value);
    }
    if (parity.present) {
      map['PARITY'] = Variable<int>(parity.value);
    }
    if (stopBits.present) {
      map['STOP_BITS'] = Variable<int>(stopBits.value);
    }
    if (dataBits.present) {
      map['DATA_BITS'] = Variable<int>(dataBits.value);
    }
    if (intervalo.present) {
      map['INTERVALO'] = Variable<int>(intervalo.value);
    }
    if (usarFila.present) {
      map['USAR_FILA'] = Variable<String>(usarFila.value);
    }
    if (hardFlow.present) {
      map['HARD_FLOW'] = Variable<String>(hardFlow.value);
    }
    if (softFlow.present) {
      map['SOFT_FLOW'] = Variable<String>(softFlow.value);
    }
    if (sufixo.present) {
      map['SUFIXO'] = Variable<String>(sufixo.value);
    }
    if (excluirSufixo.present) {
      map['EXCLUIR_SUFIXO'] = Variable<String>(excluirSufixo.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvConfiguracaoLeitorSerialsCompanion(')
          ..write('id: $id, ')
          ..write('idPdvConfiguracao: $idPdvConfiguracao, ')
          ..write('usa: $usa, ')
          ..write('porta: $porta, ')
          ..write('baud: $baud, ')
          ..write('handShake: $handShake, ')
          ..write('parity: $parity, ')
          ..write('stopBits: $stopBits, ')
          ..write('dataBits: $dataBits, ')
          ..write('intervalo: $intervalo, ')
          ..write('usarFila: $usarFila, ')
          ..write('hardFlow: $hardFlow, ')
          ..write('softFlow: $softFlow, ')
          ..write('sufixo: $sufixo, ')
          ..write('excluirSufixo: $excluirSufixo')
          ..write(')'))
        .toString();
  }
}

class $PdvConfiguracaoLeitorSerialsTable extends PdvConfiguracaoLeitorSerials
    with
        TableInfo<$PdvConfiguracaoLeitorSerialsTable,
            PdvConfiguracaoLeitorSerial> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvConfiguracaoLeitorSerialsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvConfiguracaoMeta =
      const VerificationMeta('idPdvConfiguracao');
  GeneratedIntColumn _idPdvConfiguracao;
  @override
  GeneratedIntColumn get idPdvConfiguracao =>
      _idPdvConfiguracao ??= _constructIdPdvConfiguracao();
  GeneratedIntColumn _constructIdPdvConfiguracao() {
    return GeneratedIntColumn('ID_PDV_CONFIGURACAO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_CONFIGURACAO(ID)');
  }

  final VerificationMeta _usaMeta = const VerificationMeta('usa');
  GeneratedTextColumn _usa;
  @override
  GeneratedTextColumn get usa => _usa ??= _constructUsa();
  GeneratedTextColumn _constructUsa() {
    return GeneratedTextColumn('USA', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _portaMeta = const VerificationMeta('porta');
  GeneratedTextColumn _porta;
  @override
  GeneratedTextColumn get porta => _porta ??= _constructPorta();
  GeneratedTextColumn _constructPorta() {
    return GeneratedTextColumn('PORTA', $tableName, true,
        minTextLength: 1, maxTextLength: 4);
  }

  final VerificationMeta _baudMeta = const VerificationMeta('baud');
  GeneratedIntColumn _baud;
  @override
  GeneratedIntColumn get baud => _baud ??= _constructBaud();
  GeneratedIntColumn _constructBaud() {
    return GeneratedIntColumn(
      'BAUD',
      $tableName,
      true,
    );
  }

  final VerificationMeta _handShakeMeta = const VerificationMeta('handShake');
  GeneratedIntColumn _handShake;
  @override
  GeneratedIntColumn get handShake => _handShake ??= _constructHandShake();
  GeneratedIntColumn _constructHandShake() {
    return GeneratedIntColumn(
      'HAND_SHAKE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _parityMeta = const VerificationMeta('parity');
  GeneratedIntColumn _parity;
  @override
  GeneratedIntColumn get parity => _parity ??= _constructParity();
  GeneratedIntColumn _constructParity() {
    return GeneratedIntColumn(
      'PARITY',
      $tableName,
      true,
    );
  }

  final VerificationMeta _stopBitsMeta = const VerificationMeta('stopBits');
  GeneratedIntColumn _stopBits;
  @override
  GeneratedIntColumn get stopBits => _stopBits ??= _constructStopBits();
  GeneratedIntColumn _constructStopBits() {
    return GeneratedIntColumn(
      'STOP_BITS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataBitsMeta = const VerificationMeta('dataBits');
  GeneratedIntColumn _dataBits;
  @override
  GeneratedIntColumn get dataBits => _dataBits ??= _constructDataBits();
  GeneratedIntColumn _constructDataBits() {
    return GeneratedIntColumn(
      'DATA_BITS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _intervaloMeta = const VerificationMeta('intervalo');
  GeneratedIntColumn _intervalo;
  @override
  GeneratedIntColumn get intervalo => _intervalo ??= _constructIntervalo();
  GeneratedIntColumn _constructIntervalo() {
    return GeneratedIntColumn(
      'INTERVALO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _usarFilaMeta = const VerificationMeta('usarFila');
  GeneratedTextColumn _usarFila;
  @override
  GeneratedTextColumn get usarFila => _usarFila ??= _constructUsarFila();
  GeneratedTextColumn _constructUsarFila() {
    return GeneratedTextColumn('USAR_FILA', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _hardFlowMeta = const VerificationMeta('hardFlow');
  GeneratedTextColumn _hardFlow;
  @override
  GeneratedTextColumn get hardFlow => _hardFlow ??= _constructHardFlow();
  GeneratedTextColumn _constructHardFlow() {
    return GeneratedTextColumn('HARD_FLOW', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _softFlowMeta = const VerificationMeta('softFlow');
  GeneratedTextColumn _softFlow;
  @override
  GeneratedTextColumn get softFlow => _softFlow ??= _constructSoftFlow();
  GeneratedTextColumn _constructSoftFlow() {
    return GeneratedTextColumn('SOFT_FLOW', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _sufixoMeta = const VerificationMeta('sufixo');
  GeneratedTextColumn _sufixo;
  @override
  GeneratedTextColumn get sufixo => _sufixo ??= _constructSufixo();
  GeneratedTextColumn _constructSufixo() {
    return GeneratedTextColumn('SUFIXO', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _excluirSufixoMeta =
      const VerificationMeta('excluirSufixo');
  GeneratedTextColumn _excluirSufixo;
  @override
  GeneratedTextColumn get excluirSufixo =>
      _excluirSufixo ??= _constructExcluirSufixo();
  GeneratedTextColumn _constructExcluirSufixo() {
    return GeneratedTextColumn('EXCLUIR_SUFIXO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvConfiguracao,
        usa,
        porta,
        baud,
        handShake,
        parity,
        stopBits,
        dataBits,
        intervalo,
        usarFila,
        hardFlow,
        softFlow,
        sufixo,
        excluirSufixo
      ];
  @override
  $PdvConfiguracaoLeitorSerialsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_CONFIGURACAO_LEITOR_SERIAL';
  @override
  final String actualTableName = 'PDV_CONFIGURACAO_LEITOR_SERIAL';
  @override
  VerificationContext validateIntegrity(
      Insertable<PdvConfiguracaoLeitorSerial> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_CONFIGURACAO')) {
      context.handle(
          _idPdvConfiguracaoMeta,
          idPdvConfiguracao.isAcceptableOrUnknown(
              data['ID_PDV_CONFIGURACAO'], _idPdvConfiguracaoMeta));
    }
    if (data.containsKey('USA')) {
      context.handle(
          _usaMeta, usa.isAcceptableOrUnknown(data['USA'], _usaMeta));
    }
    if (data.containsKey('PORTA')) {
      context.handle(
          _portaMeta, porta.isAcceptableOrUnknown(data['PORTA'], _portaMeta));
    }
    if (data.containsKey('BAUD')) {
      context.handle(
          _baudMeta, baud.isAcceptableOrUnknown(data['BAUD'], _baudMeta));
    }
    if (data.containsKey('HAND_SHAKE')) {
      context.handle(_handShakeMeta,
          handShake.isAcceptableOrUnknown(data['HAND_SHAKE'], _handShakeMeta));
    }
    if (data.containsKey('PARITY')) {
      context.handle(_parityMeta,
          parity.isAcceptableOrUnknown(data['PARITY'], _parityMeta));
    }
    if (data.containsKey('STOP_BITS')) {
      context.handle(_stopBitsMeta,
          stopBits.isAcceptableOrUnknown(data['STOP_BITS'], _stopBitsMeta));
    }
    if (data.containsKey('DATA_BITS')) {
      context.handle(_dataBitsMeta,
          dataBits.isAcceptableOrUnknown(data['DATA_BITS'], _dataBitsMeta));
    }
    if (data.containsKey('INTERVALO')) {
      context.handle(_intervaloMeta,
          intervalo.isAcceptableOrUnknown(data['INTERVALO'], _intervaloMeta));
    }
    if (data.containsKey('USAR_FILA')) {
      context.handle(_usarFilaMeta,
          usarFila.isAcceptableOrUnknown(data['USAR_FILA'], _usarFilaMeta));
    }
    if (data.containsKey('HARD_FLOW')) {
      context.handle(_hardFlowMeta,
          hardFlow.isAcceptableOrUnknown(data['HARD_FLOW'], _hardFlowMeta));
    }
    if (data.containsKey('SOFT_FLOW')) {
      context.handle(_softFlowMeta,
          softFlow.isAcceptableOrUnknown(data['SOFT_FLOW'], _softFlowMeta));
    }
    if (data.containsKey('SUFIXO')) {
      context.handle(_sufixoMeta,
          sufixo.isAcceptableOrUnknown(data['SUFIXO'], _sufixoMeta));
    }
    if (data.containsKey('EXCLUIR_SUFIXO')) {
      context.handle(
          _excluirSufixoMeta,
          excluirSufixo.isAcceptableOrUnknown(
              data['EXCLUIR_SUFIXO'], _excluirSufixoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvConfiguracaoLeitorSerial map(Map<String, dynamic> data,
      {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvConfiguracaoLeitorSerial.fromData(data, _db,
        prefix: effectivePrefix);
  }

  @override
  $PdvConfiguracaoLeitorSerialsTable createAlias(String alias) {
    return $PdvConfiguracaoLeitorSerialsTable(_db, alias);
  }
}

class PdvFechamento extends DataClass implements Insertable<PdvFechamento> {
  final int id;
  final int idPdvMovimento;
  final int idPdvTipoPagamento;
  final double valor;
  PdvFechamento(
      {@required this.id,
      this.idPdvMovimento,
      this.idPdvTipoPagamento,
      this.valor});
  factory PdvFechamento.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final doubleType = db.typeSystem.forDartType<double>();
    return PdvFechamento(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvMovimento: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      idPdvTipoPagamento: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_PDV_TIPO_PAGAMENTO']),
      valor:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || idPdvTipoPagamento != null) {
      map['ID_PDV_TIPO_PAGAMENTO'] = Variable<int>(idPdvTipoPagamento);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    return map;
  }

  PdvFechamentosCompanion toCompanion(bool nullToAbsent) {
    return PdvFechamentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      idPdvTipoPagamento: idPdvTipoPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvTipoPagamento),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
    );
  }

  factory PdvFechamento.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvFechamento(
      id: serializer.fromJson<int>(json['id']),
      idPdvMovimento: serializer.fromJson<int>(json['idPdvMovimento']),
      idPdvTipoPagamento: serializer.fromJson<int>(json['idPdvTipoPagamento']),
      valor: serializer.fromJson<double>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvMovimento': serializer.toJson<int>(idPdvMovimento),
      'idPdvTipoPagamento': serializer.toJson<int>(idPdvTipoPagamento),
      'valor': serializer.toJson<double>(valor),
    };
  }

  PdvFechamento copyWith(
          {int id, int idPdvMovimento, int idPdvTipoPagamento, double valor}) =>
      PdvFechamento(
        id: id ?? this.id,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        idPdvTipoPagamento: idPdvTipoPagamento ?? this.idPdvTipoPagamento,
        valor: valor ?? this.valor,
      );
  @override
  String toString() {
    return (StringBuffer('PdvFechamento(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('idPdvTipoPagamento: $idPdvTipoPagamento, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(idPdvMovimento.hashCode,
          $mrjc(idPdvTipoPagamento.hashCode, valor.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvFechamento &&
          other.id == this.id &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.idPdvTipoPagamento == this.idPdvTipoPagamento &&
          other.valor == this.valor);
}

class PdvFechamentosCompanion extends UpdateCompanion<PdvFechamento> {
  final Value<int> id;
  final Value<int> idPdvMovimento;
  final Value<int> idPdvTipoPagamento;
  final Value<double> valor;
  const PdvFechamentosCompanion({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.idPdvTipoPagamento = const Value.absent(),
    this.valor = const Value.absent(),
  });
  PdvFechamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.idPdvTipoPagamento = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<PdvFechamento> custom({
    Expression<int> id,
    Expression<int> idPdvMovimento,
    Expression<int> idPdvTipoPagamento,
    Expression<double> valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (idPdvTipoPagamento != null)
        'ID_PDV_TIPO_PAGAMENTO': idPdvTipoPagamento,
      if (valor != null) 'VALOR': valor,
    });
  }

  PdvFechamentosCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvMovimento,
      Value<int> idPdvTipoPagamento,
      Value<double> valor}) {
    return PdvFechamentosCompanion(
      id: id ?? this.id,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      idPdvTipoPagamento: idPdvTipoPagamento ?? this.idPdvTipoPagamento,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (idPdvTipoPagamento.present) {
      map['ID_PDV_TIPO_PAGAMENTO'] = Variable<int>(idPdvTipoPagamento.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvFechamentosCompanion(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('idPdvTipoPagamento: $idPdvTipoPagamento, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $PdvFechamentosTable extends PdvFechamentos
    with TableInfo<$PdvFechamentosTable, PdvFechamento> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvFechamentosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  GeneratedIntColumn _idPdvMovimento;
  @override
  GeneratedIntColumn get idPdvMovimento =>
      _idPdvMovimento ??= _constructIdPdvMovimento();
  GeneratedIntColumn _constructIdPdvMovimento() {
    return GeneratedIntColumn('ID_PDV_MOVIMENTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  }

  final VerificationMeta _idPdvTipoPagamentoMeta =
      const VerificationMeta('idPdvTipoPagamento');
  GeneratedIntColumn _idPdvTipoPagamento;
  @override
  GeneratedIntColumn get idPdvTipoPagamento =>
      _idPdvTipoPagamento ??= _constructIdPdvTipoPagamento();
  GeneratedIntColumn _constructIdPdvTipoPagamento() {
    return GeneratedIntColumn('ID_PDV_TIPO_PAGAMENTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_TIPO_PAGAMENTO(ID)');
  }

  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  GeneratedRealColumn _valor;
  @override
  GeneratedRealColumn get valor => _valor ??= _constructValor();
  GeneratedRealColumn _constructValor() {
    return GeneratedRealColumn(
      'VALOR',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, idPdvMovimento, idPdvTipoPagamento, valor];
  @override
  $PdvFechamentosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_FECHAMENTO';
  @override
  final String actualTableName = 'PDV_FECHAMENTO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvFechamento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO'], _idPdvMovimentoMeta));
    }
    if (data.containsKey('ID_PDV_TIPO_PAGAMENTO')) {
      context.handle(
          _idPdvTipoPagamentoMeta,
          idPdvTipoPagamento.isAcceptableOrUnknown(
              data['ID_PDV_TIPO_PAGAMENTO'], _idPdvTipoPagamentoMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR'], _valorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvFechamento map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvFechamento.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvFechamentosTable createAlias(String alias) {
    return $PdvFechamentosTable(_db, alias);
  }
}

class PdvMovimento extends DataClass implements Insertable<PdvMovimento> {
  final int id;
  final int idEcfImpressora;
  final int idPdvOperador;
  final int idPdvCaixa;
  final int idGerenteSupervisor;
  final DateTime dataAbertura;
  final String horaAbertura;
  final DateTime dataFechamento;
  final String horaFechamento;
  final double totalSuprimento;
  final double totalSangria;
  final double totalNaoFiscal;
  final double totalVenda;
  final double totalDesconto;
  final double totalAcrescimo;
  final double totalFinal;
  final double totalRecebido;
  final double totalTroco;
  final double totalCancelado;
  final String statusMovimento;
  PdvMovimento(
      {@required this.id,
      this.idEcfImpressora,
      this.idPdvOperador,
      this.idPdvCaixa,
      this.idGerenteSupervisor,
      this.dataAbertura,
      this.horaAbertura,
      this.dataFechamento,
      this.horaFechamento,
      this.totalSuprimento,
      this.totalSangria,
      this.totalNaoFiscal,
      this.totalVenda,
      this.totalDesconto,
      this.totalAcrescimo,
      this.totalFinal,
      this.totalRecebido,
      this.totalTroco,
      this.totalCancelado,
      this.statusMovimento});
  factory PdvMovimento.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return PdvMovimento(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idEcfImpressora: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_IMPRESSORA']),
      idPdvOperador: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_OPERADOR']),
      idPdvCaixa: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_CAIXA']),
      idGerenteSupervisor: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_GERENTE_SUPERVISOR']),
      dataAbertura: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_ABERTURA']),
      horaAbertura: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_ABERTURA']),
      dataFechamento: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_FECHAMENTO']),
      horaFechamento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_FECHAMENTO']),
      totalSuprimento: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_SUPRIMENTO']),
      totalSangria: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_SANGRIA']),
      totalNaoFiscal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_NAO_FISCAL']),
      totalVenda: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_VENDA']),
      totalDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_DESCONTO']),
      totalAcrescimo: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_ACRESCIMO']),
      totalFinal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_FINAL']),
      totalRecebido: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_RECEBIDO']),
      totalTroco: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_TROCO']),
      totalCancelado: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TOTAL_CANCELADO']),
      statusMovimento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}STATUS_MOVIMENTO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idEcfImpressora != null) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora);
    }
    if (!nullToAbsent || idPdvOperador != null) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador);
    }
    if (!nullToAbsent || idPdvCaixa != null) {
      map['ID_PDV_CAIXA'] = Variable<int>(idPdvCaixa);
    }
    if (!nullToAbsent || idGerenteSupervisor != null) {
      map['ID_GERENTE_SUPERVISOR'] = Variable<int>(idGerenteSupervisor);
    }
    if (!nullToAbsent || dataAbertura != null) {
      map['DATA_ABERTURA'] = Variable<DateTime>(dataAbertura);
    }
    if (!nullToAbsent || horaAbertura != null) {
      map['HORA_ABERTURA'] = Variable<String>(horaAbertura);
    }
    if (!nullToAbsent || dataFechamento != null) {
      map['DATA_FECHAMENTO'] = Variable<DateTime>(dataFechamento);
    }
    if (!nullToAbsent || horaFechamento != null) {
      map['HORA_FECHAMENTO'] = Variable<String>(horaFechamento);
    }
    if (!nullToAbsent || totalSuprimento != null) {
      map['TOTAL_SUPRIMENTO'] = Variable<double>(totalSuprimento);
    }
    if (!nullToAbsent || totalSangria != null) {
      map['TOTAL_SANGRIA'] = Variable<double>(totalSangria);
    }
    if (!nullToAbsent || totalNaoFiscal != null) {
      map['TOTAL_NAO_FISCAL'] = Variable<double>(totalNaoFiscal);
    }
    if (!nullToAbsent || totalVenda != null) {
      map['TOTAL_VENDA'] = Variable<double>(totalVenda);
    }
    if (!nullToAbsent || totalDesconto != null) {
      map['TOTAL_DESCONTO'] = Variable<double>(totalDesconto);
    }
    if (!nullToAbsent || totalAcrescimo != null) {
      map['TOTAL_ACRESCIMO'] = Variable<double>(totalAcrescimo);
    }
    if (!nullToAbsent || totalFinal != null) {
      map['TOTAL_FINAL'] = Variable<double>(totalFinal);
    }
    if (!nullToAbsent || totalRecebido != null) {
      map['TOTAL_RECEBIDO'] = Variable<double>(totalRecebido);
    }
    if (!nullToAbsent || totalTroco != null) {
      map['TOTAL_TROCO'] = Variable<double>(totalTroco);
    }
    if (!nullToAbsent || totalCancelado != null) {
      map['TOTAL_CANCELADO'] = Variable<double>(totalCancelado);
    }
    if (!nullToAbsent || statusMovimento != null) {
      map['STATUS_MOVIMENTO'] = Variable<String>(statusMovimento);
    }
    return map;
  }

  PdvMovimentosCompanion toCompanion(bool nullToAbsent) {
    return PdvMovimentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idEcfImpressora: idEcfImpressora == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfImpressora),
      idPdvOperador: idPdvOperador == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvOperador),
      idPdvCaixa: idPdvCaixa == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvCaixa),
      idGerenteSupervisor: idGerenteSupervisor == null && nullToAbsent
          ? const Value.absent()
          : Value(idGerenteSupervisor),
      dataAbertura: dataAbertura == null && nullToAbsent
          ? const Value.absent()
          : Value(dataAbertura),
      horaAbertura: horaAbertura == null && nullToAbsent
          ? const Value.absent()
          : Value(horaAbertura),
      dataFechamento: dataFechamento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataFechamento),
      horaFechamento: horaFechamento == null && nullToAbsent
          ? const Value.absent()
          : Value(horaFechamento),
      totalSuprimento: totalSuprimento == null && nullToAbsent
          ? const Value.absent()
          : Value(totalSuprimento),
      totalSangria: totalSangria == null && nullToAbsent
          ? const Value.absent()
          : Value(totalSangria),
      totalNaoFiscal: totalNaoFiscal == null && nullToAbsent
          ? const Value.absent()
          : Value(totalNaoFiscal),
      totalVenda: totalVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(totalVenda),
      totalDesconto: totalDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(totalDesconto),
      totalAcrescimo: totalAcrescimo == null && nullToAbsent
          ? const Value.absent()
          : Value(totalAcrescimo),
      totalFinal: totalFinal == null && nullToAbsent
          ? const Value.absent()
          : Value(totalFinal),
      totalRecebido: totalRecebido == null && nullToAbsent
          ? const Value.absent()
          : Value(totalRecebido),
      totalTroco: totalTroco == null && nullToAbsent
          ? const Value.absent()
          : Value(totalTroco),
      totalCancelado: totalCancelado == null && nullToAbsent
          ? const Value.absent()
          : Value(totalCancelado),
      statusMovimento: statusMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(statusMovimento),
    );
  }

  factory PdvMovimento.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvMovimento(
      id: serializer.fromJson<int>(json['id']),
      idEcfImpressora: serializer.fromJson<int>(json['idEcfImpressora']),
      idPdvOperador: serializer.fromJson<int>(json['idPdvOperador']),
      idPdvCaixa: serializer.fromJson<int>(json['idPdvCaixa']),
      idGerenteSupervisor:
          serializer.fromJson<int>(json['idGerenteSupervisor']),
      dataAbertura: serializer.fromJson<DateTime>(json['dataAbertura']),
      horaAbertura: serializer.fromJson<String>(json['horaAbertura']),
      dataFechamento: serializer.fromJson<DateTime>(json['dataFechamento']),
      horaFechamento: serializer.fromJson<String>(json['horaFechamento']),
      totalSuprimento: serializer.fromJson<double>(json['totalSuprimento']),
      totalSangria: serializer.fromJson<double>(json['totalSangria']),
      totalNaoFiscal: serializer.fromJson<double>(json['totalNaoFiscal']),
      totalVenda: serializer.fromJson<double>(json['totalVenda']),
      totalDesconto: serializer.fromJson<double>(json['totalDesconto']),
      totalAcrescimo: serializer.fromJson<double>(json['totalAcrescimo']),
      totalFinal: serializer.fromJson<double>(json['totalFinal']),
      totalRecebido: serializer.fromJson<double>(json['totalRecebido']),
      totalTroco: serializer.fromJson<double>(json['totalTroco']),
      totalCancelado: serializer.fromJson<double>(json['totalCancelado']),
      statusMovimento: serializer.fromJson<String>(json['statusMovimento']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idEcfImpressora': serializer.toJson<int>(idEcfImpressora),
      'idPdvOperador': serializer.toJson<int>(idPdvOperador),
      'idPdvCaixa': serializer.toJson<int>(idPdvCaixa),
      'idGerenteSupervisor': serializer.toJson<int>(idGerenteSupervisor),
      'dataAbertura': serializer.toJson<DateTime>(dataAbertura),
      'horaAbertura': serializer.toJson<String>(horaAbertura),
      'dataFechamento': serializer.toJson<DateTime>(dataFechamento),
      'horaFechamento': serializer.toJson<String>(horaFechamento),
      'totalSuprimento': serializer.toJson<double>(totalSuprimento),
      'totalSangria': serializer.toJson<double>(totalSangria),
      'totalNaoFiscal': serializer.toJson<double>(totalNaoFiscal),
      'totalVenda': serializer.toJson<double>(totalVenda),
      'totalDesconto': serializer.toJson<double>(totalDesconto),
      'totalAcrescimo': serializer.toJson<double>(totalAcrescimo),
      'totalFinal': serializer.toJson<double>(totalFinal),
      'totalRecebido': serializer.toJson<double>(totalRecebido),
      'totalTroco': serializer.toJson<double>(totalTroco),
      'totalCancelado': serializer.toJson<double>(totalCancelado),
      'statusMovimento': serializer.toJson<String>(statusMovimento),
    };
  }

  PdvMovimento copyWith(
          {int id,
          int idEcfImpressora,
          int idPdvOperador,
          int idPdvCaixa,
          int idGerenteSupervisor,
          DateTime dataAbertura,
          String horaAbertura,
          DateTime dataFechamento,
          String horaFechamento,
          double totalSuprimento,
          double totalSangria,
          double totalNaoFiscal,
          double totalVenda,
          double totalDesconto,
          double totalAcrescimo,
          double totalFinal,
          double totalRecebido,
          double totalTroco,
          double totalCancelado,
          String statusMovimento}) =>
      PdvMovimento(
        id: id ?? this.id,
        idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
        idPdvOperador: idPdvOperador ?? this.idPdvOperador,
        idPdvCaixa: idPdvCaixa ?? this.idPdvCaixa,
        idGerenteSupervisor: idGerenteSupervisor ?? this.idGerenteSupervisor,
        dataAbertura: dataAbertura ?? this.dataAbertura,
        horaAbertura: horaAbertura ?? this.horaAbertura,
        dataFechamento: dataFechamento ?? this.dataFechamento,
        horaFechamento: horaFechamento ?? this.horaFechamento,
        totalSuprimento: totalSuprimento ?? this.totalSuprimento,
        totalSangria: totalSangria ?? this.totalSangria,
        totalNaoFiscal: totalNaoFiscal ?? this.totalNaoFiscal,
        totalVenda: totalVenda ?? this.totalVenda,
        totalDesconto: totalDesconto ?? this.totalDesconto,
        totalAcrescimo: totalAcrescimo ?? this.totalAcrescimo,
        totalFinal: totalFinal ?? this.totalFinal,
        totalRecebido: totalRecebido ?? this.totalRecebido,
        totalTroco: totalTroco ?? this.totalTroco,
        totalCancelado: totalCancelado ?? this.totalCancelado,
        statusMovimento: statusMovimento ?? this.statusMovimento,
      );
  @override
  String toString() {
    return (StringBuffer('PdvMovimento(')
          ..write('id: $id, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idPdvCaixa: $idPdvCaixa, ')
          ..write('idGerenteSupervisor: $idGerenteSupervisor, ')
          ..write('dataAbertura: $dataAbertura, ')
          ..write('horaAbertura: $horaAbertura, ')
          ..write('dataFechamento: $dataFechamento, ')
          ..write('horaFechamento: $horaFechamento, ')
          ..write('totalSuprimento: $totalSuprimento, ')
          ..write('totalSangria: $totalSangria, ')
          ..write('totalNaoFiscal: $totalNaoFiscal, ')
          ..write('totalVenda: $totalVenda, ')
          ..write('totalDesconto: $totalDesconto, ')
          ..write('totalAcrescimo: $totalAcrescimo, ')
          ..write('totalFinal: $totalFinal, ')
          ..write('totalRecebido: $totalRecebido, ')
          ..write('totalTroco: $totalTroco, ')
          ..write('totalCancelado: $totalCancelado, ')
          ..write('statusMovimento: $statusMovimento')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idEcfImpressora.hashCode,
          $mrjc(
              idPdvOperador.hashCode,
              $mrjc(
                  idPdvCaixa.hashCode,
                  $mrjc(
                      idGerenteSupervisor.hashCode,
                      $mrjc(
                          dataAbertura.hashCode,
                          $mrjc(
                              horaAbertura.hashCode,
                              $mrjc(
                                  dataFechamento.hashCode,
                                  $mrjc(
                                      horaFechamento.hashCode,
                                      $mrjc(
                                          totalSuprimento.hashCode,
                                          $mrjc(
                                              totalSangria.hashCode,
                                              $mrjc(
                                                  totalNaoFiscal.hashCode,
                                                  $mrjc(
                                                      totalVenda.hashCode,
                                                      $mrjc(
                                                          totalDesconto
                                                              .hashCode,
                                                          $mrjc(
                                                              totalAcrescimo
                                                                  .hashCode,
                                                              $mrjc(
                                                                  totalFinal
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      totalRecebido
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          totalTroco
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              totalCancelado.hashCode,
                                                                              statusMovimento.hashCode))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvMovimento &&
          other.id == this.id &&
          other.idEcfImpressora == this.idEcfImpressora &&
          other.idPdvOperador == this.idPdvOperador &&
          other.idPdvCaixa == this.idPdvCaixa &&
          other.idGerenteSupervisor == this.idGerenteSupervisor &&
          other.dataAbertura == this.dataAbertura &&
          other.horaAbertura == this.horaAbertura &&
          other.dataFechamento == this.dataFechamento &&
          other.horaFechamento == this.horaFechamento &&
          other.totalSuprimento == this.totalSuprimento &&
          other.totalSangria == this.totalSangria &&
          other.totalNaoFiscal == this.totalNaoFiscal &&
          other.totalVenda == this.totalVenda &&
          other.totalDesconto == this.totalDesconto &&
          other.totalAcrescimo == this.totalAcrescimo &&
          other.totalFinal == this.totalFinal &&
          other.totalRecebido == this.totalRecebido &&
          other.totalTroco == this.totalTroco &&
          other.totalCancelado == this.totalCancelado &&
          other.statusMovimento == this.statusMovimento);
}

class PdvMovimentosCompanion extends UpdateCompanion<PdvMovimento> {
  final Value<int> id;
  final Value<int> idEcfImpressora;
  final Value<int> idPdvOperador;
  final Value<int> idPdvCaixa;
  final Value<int> idGerenteSupervisor;
  final Value<DateTime> dataAbertura;
  final Value<String> horaAbertura;
  final Value<DateTime> dataFechamento;
  final Value<String> horaFechamento;
  final Value<double> totalSuprimento;
  final Value<double> totalSangria;
  final Value<double> totalNaoFiscal;
  final Value<double> totalVenda;
  final Value<double> totalDesconto;
  final Value<double> totalAcrescimo;
  final Value<double> totalFinal;
  final Value<double> totalRecebido;
  final Value<double> totalTroco;
  final Value<double> totalCancelado;
  final Value<String> statusMovimento;
  const PdvMovimentosCompanion({
    this.id = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idPdvCaixa = const Value.absent(),
    this.idGerenteSupervisor = const Value.absent(),
    this.dataAbertura = const Value.absent(),
    this.horaAbertura = const Value.absent(),
    this.dataFechamento = const Value.absent(),
    this.horaFechamento = const Value.absent(),
    this.totalSuprimento = const Value.absent(),
    this.totalSangria = const Value.absent(),
    this.totalNaoFiscal = const Value.absent(),
    this.totalVenda = const Value.absent(),
    this.totalDesconto = const Value.absent(),
    this.totalAcrescimo = const Value.absent(),
    this.totalFinal = const Value.absent(),
    this.totalRecebido = const Value.absent(),
    this.totalTroco = const Value.absent(),
    this.totalCancelado = const Value.absent(),
    this.statusMovimento = const Value.absent(),
  });
  PdvMovimentosCompanion.insert({
    this.id = const Value.absent(),
    this.idEcfImpressora = const Value.absent(),
    this.idPdvOperador = const Value.absent(),
    this.idPdvCaixa = const Value.absent(),
    this.idGerenteSupervisor = const Value.absent(),
    this.dataAbertura = const Value.absent(),
    this.horaAbertura = const Value.absent(),
    this.dataFechamento = const Value.absent(),
    this.horaFechamento = const Value.absent(),
    this.totalSuprimento = const Value.absent(),
    this.totalSangria = const Value.absent(),
    this.totalNaoFiscal = const Value.absent(),
    this.totalVenda = const Value.absent(),
    this.totalDesconto = const Value.absent(),
    this.totalAcrescimo = const Value.absent(),
    this.totalFinal = const Value.absent(),
    this.totalRecebido = const Value.absent(),
    this.totalTroco = const Value.absent(),
    this.totalCancelado = const Value.absent(),
    this.statusMovimento = const Value.absent(),
  });
  static Insertable<PdvMovimento> custom({
    Expression<int> id,
    Expression<int> idEcfImpressora,
    Expression<int> idPdvOperador,
    Expression<int> idPdvCaixa,
    Expression<int> idGerenteSupervisor,
    Expression<DateTime> dataAbertura,
    Expression<String> horaAbertura,
    Expression<DateTime> dataFechamento,
    Expression<String> horaFechamento,
    Expression<double> totalSuprimento,
    Expression<double> totalSangria,
    Expression<double> totalNaoFiscal,
    Expression<double> totalVenda,
    Expression<double> totalDesconto,
    Expression<double> totalAcrescimo,
    Expression<double> totalFinal,
    Expression<double> totalRecebido,
    Expression<double> totalTroco,
    Expression<double> totalCancelado,
    Expression<String> statusMovimento,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idEcfImpressora != null) 'ID_ECF_IMPRESSORA': idEcfImpressora,
      if (idPdvOperador != null) 'ID_PDV_OPERADOR': idPdvOperador,
      if (idPdvCaixa != null) 'ID_PDV_CAIXA': idPdvCaixa,
      if (idGerenteSupervisor != null)
        'ID_GERENTE_SUPERVISOR': idGerenteSupervisor,
      if (dataAbertura != null) 'DATA_ABERTURA': dataAbertura,
      if (horaAbertura != null) 'HORA_ABERTURA': horaAbertura,
      if (dataFechamento != null) 'DATA_FECHAMENTO': dataFechamento,
      if (horaFechamento != null) 'HORA_FECHAMENTO': horaFechamento,
      if (totalSuprimento != null) 'TOTAL_SUPRIMENTO': totalSuprimento,
      if (totalSangria != null) 'TOTAL_SANGRIA': totalSangria,
      if (totalNaoFiscal != null) 'TOTAL_NAO_FISCAL': totalNaoFiscal,
      if (totalVenda != null) 'TOTAL_VENDA': totalVenda,
      if (totalDesconto != null) 'TOTAL_DESCONTO': totalDesconto,
      if (totalAcrescimo != null) 'TOTAL_ACRESCIMO': totalAcrescimo,
      if (totalFinal != null) 'TOTAL_FINAL': totalFinal,
      if (totalRecebido != null) 'TOTAL_RECEBIDO': totalRecebido,
      if (totalTroco != null) 'TOTAL_TROCO': totalTroco,
      if (totalCancelado != null) 'TOTAL_CANCELADO': totalCancelado,
      if (statusMovimento != null) 'STATUS_MOVIMENTO': statusMovimento,
    });
  }

  PdvMovimentosCompanion copyWith(
      {Value<int> id,
      Value<int> idEcfImpressora,
      Value<int> idPdvOperador,
      Value<int> idPdvCaixa,
      Value<int> idGerenteSupervisor,
      Value<DateTime> dataAbertura,
      Value<String> horaAbertura,
      Value<DateTime> dataFechamento,
      Value<String> horaFechamento,
      Value<double> totalSuprimento,
      Value<double> totalSangria,
      Value<double> totalNaoFiscal,
      Value<double> totalVenda,
      Value<double> totalDesconto,
      Value<double> totalAcrescimo,
      Value<double> totalFinal,
      Value<double> totalRecebido,
      Value<double> totalTroco,
      Value<double> totalCancelado,
      Value<String> statusMovimento}) {
    return PdvMovimentosCompanion(
      id: id ?? this.id,
      idEcfImpressora: idEcfImpressora ?? this.idEcfImpressora,
      idPdvOperador: idPdvOperador ?? this.idPdvOperador,
      idPdvCaixa: idPdvCaixa ?? this.idPdvCaixa,
      idGerenteSupervisor: idGerenteSupervisor ?? this.idGerenteSupervisor,
      dataAbertura: dataAbertura ?? this.dataAbertura,
      horaAbertura: horaAbertura ?? this.horaAbertura,
      dataFechamento: dataFechamento ?? this.dataFechamento,
      horaFechamento: horaFechamento ?? this.horaFechamento,
      totalSuprimento: totalSuprimento ?? this.totalSuprimento,
      totalSangria: totalSangria ?? this.totalSangria,
      totalNaoFiscal: totalNaoFiscal ?? this.totalNaoFiscal,
      totalVenda: totalVenda ?? this.totalVenda,
      totalDesconto: totalDesconto ?? this.totalDesconto,
      totalAcrescimo: totalAcrescimo ?? this.totalAcrescimo,
      totalFinal: totalFinal ?? this.totalFinal,
      totalRecebido: totalRecebido ?? this.totalRecebido,
      totalTroco: totalTroco ?? this.totalTroco,
      totalCancelado: totalCancelado ?? this.totalCancelado,
      statusMovimento: statusMovimento ?? this.statusMovimento,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idEcfImpressora.present) {
      map['ID_ECF_IMPRESSORA'] = Variable<int>(idEcfImpressora.value);
    }
    if (idPdvOperador.present) {
      map['ID_PDV_OPERADOR'] = Variable<int>(idPdvOperador.value);
    }
    if (idPdvCaixa.present) {
      map['ID_PDV_CAIXA'] = Variable<int>(idPdvCaixa.value);
    }
    if (idGerenteSupervisor.present) {
      map['ID_GERENTE_SUPERVISOR'] = Variable<int>(idGerenteSupervisor.value);
    }
    if (dataAbertura.present) {
      map['DATA_ABERTURA'] = Variable<DateTime>(dataAbertura.value);
    }
    if (horaAbertura.present) {
      map['HORA_ABERTURA'] = Variable<String>(horaAbertura.value);
    }
    if (dataFechamento.present) {
      map['DATA_FECHAMENTO'] = Variable<DateTime>(dataFechamento.value);
    }
    if (horaFechamento.present) {
      map['HORA_FECHAMENTO'] = Variable<String>(horaFechamento.value);
    }
    if (totalSuprimento.present) {
      map['TOTAL_SUPRIMENTO'] = Variable<double>(totalSuprimento.value);
    }
    if (totalSangria.present) {
      map['TOTAL_SANGRIA'] = Variable<double>(totalSangria.value);
    }
    if (totalNaoFiscal.present) {
      map['TOTAL_NAO_FISCAL'] = Variable<double>(totalNaoFiscal.value);
    }
    if (totalVenda.present) {
      map['TOTAL_VENDA'] = Variable<double>(totalVenda.value);
    }
    if (totalDesconto.present) {
      map['TOTAL_DESCONTO'] = Variable<double>(totalDesconto.value);
    }
    if (totalAcrescimo.present) {
      map['TOTAL_ACRESCIMO'] = Variable<double>(totalAcrescimo.value);
    }
    if (totalFinal.present) {
      map['TOTAL_FINAL'] = Variable<double>(totalFinal.value);
    }
    if (totalRecebido.present) {
      map['TOTAL_RECEBIDO'] = Variable<double>(totalRecebido.value);
    }
    if (totalTroco.present) {
      map['TOTAL_TROCO'] = Variable<double>(totalTroco.value);
    }
    if (totalCancelado.present) {
      map['TOTAL_CANCELADO'] = Variable<double>(totalCancelado.value);
    }
    if (statusMovimento.present) {
      map['STATUS_MOVIMENTO'] = Variable<String>(statusMovimento.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvMovimentosCompanion(')
          ..write('id: $id, ')
          ..write('idEcfImpressora: $idEcfImpressora, ')
          ..write('idPdvOperador: $idPdvOperador, ')
          ..write('idPdvCaixa: $idPdvCaixa, ')
          ..write('idGerenteSupervisor: $idGerenteSupervisor, ')
          ..write('dataAbertura: $dataAbertura, ')
          ..write('horaAbertura: $horaAbertura, ')
          ..write('dataFechamento: $dataFechamento, ')
          ..write('horaFechamento: $horaFechamento, ')
          ..write('totalSuprimento: $totalSuprimento, ')
          ..write('totalSangria: $totalSangria, ')
          ..write('totalNaoFiscal: $totalNaoFiscal, ')
          ..write('totalVenda: $totalVenda, ')
          ..write('totalDesconto: $totalDesconto, ')
          ..write('totalAcrescimo: $totalAcrescimo, ')
          ..write('totalFinal: $totalFinal, ')
          ..write('totalRecebido: $totalRecebido, ')
          ..write('totalTroco: $totalTroco, ')
          ..write('totalCancelado: $totalCancelado, ')
          ..write('statusMovimento: $statusMovimento')
          ..write(')'))
        .toString();
  }
}

class $PdvMovimentosTable extends PdvMovimentos
    with TableInfo<$PdvMovimentosTable, PdvMovimento> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvMovimentosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idEcfImpressoraMeta =
      const VerificationMeta('idEcfImpressora');
  GeneratedIntColumn _idEcfImpressora;
  @override
  GeneratedIntColumn get idEcfImpressora =>
      _idEcfImpressora ??= _constructIdEcfImpressora();
  GeneratedIntColumn _constructIdEcfImpressora() {
    return GeneratedIntColumn('ID_ECF_IMPRESSORA', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_IMPRESSORA(ID)');
  }

  final VerificationMeta _idPdvOperadorMeta =
      const VerificationMeta('idPdvOperador');
  GeneratedIntColumn _idPdvOperador;
  @override
  GeneratedIntColumn get idPdvOperador =>
      _idPdvOperador ??= _constructIdPdvOperador();
  GeneratedIntColumn _constructIdPdvOperador() {
    return GeneratedIntColumn('ID_PDV_OPERADOR', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_OPERADOR(ID)');
  }

  final VerificationMeta _idPdvCaixaMeta = const VerificationMeta('idPdvCaixa');
  GeneratedIntColumn _idPdvCaixa;
  @override
  GeneratedIntColumn get idPdvCaixa => _idPdvCaixa ??= _constructIdPdvCaixa();
  GeneratedIntColumn _constructIdPdvCaixa() {
    return GeneratedIntColumn('ID_PDV_CAIXA', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_CAIXA(ID)');
  }

  final VerificationMeta _idGerenteSupervisorMeta =
      const VerificationMeta('idGerenteSupervisor');
  GeneratedIntColumn _idGerenteSupervisor;
  @override
  GeneratedIntColumn get idGerenteSupervisor =>
      _idGerenteSupervisor ??= _constructIdGerenteSupervisor();
  GeneratedIntColumn _constructIdGerenteSupervisor() {
    return GeneratedIntColumn('ID_GERENTE_SUPERVISOR', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES GERENTE_SUPERVISOR(ID)');
  }

  final VerificationMeta _dataAberturaMeta =
      const VerificationMeta('dataAbertura');
  GeneratedDateTimeColumn _dataAbertura;
  @override
  GeneratedDateTimeColumn get dataAbertura =>
      _dataAbertura ??= _constructDataAbertura();
  GeneratedDateTimeColumn _constructDataAbertura() {
    return GeneratedDateTimeColumn(
      'DATA_ABERTURA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaAberturaMeta =
      const VerificationMeta('horaAbertura');
  GeneratedTextColumn _horaAbertura;
  @override
  GeneratedTextColumn get horaAbertura =>
      _horaAbertura ??= _constructHoraAbertura();
  GeneratedTextColumn _constructHoraAbertura() {
    return GeneratedTextColumn('HORA_ABERTURA', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _dataFechamentoMeta =
      const VerificationMeta('dataFechamento');
  GeneratedDateTimeColumn _dataFechamento;
  @override
  GeneratedDateTimeColumn get dataFechamento =>
      _dataFechamento ??= _constructDataFechamento();
  GeneratedDateTimeColumn _constructDataFechamento() {
    return GeneratedDateTimeColumn(
      'DATA_FECHAMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaFechamentoMeta =
      const VerificationMeta('horaFechamento');
  GeneratedTextColumn _horaFechamento;
  @override
  GeneratedTextColumn get horaFechamento =>
      _horaFechamento ??= _constructHoraFechamento();
  GeneratedTextColumn _constructHoraFechamento() {
    return GeneratedTextColumn('HORA_FECHAMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _totalSuprimentoMeta =
      const VerificationMeta('totalSuprimento');
  GeneratedRealColumn _totalSuprimento;
  @override
  GeneratedRealColumn get totalSuprimento =>
      _totalSuprimento ??= _constructTotalSuprimento();
  GeneratedRealColumn _constructTotalSuprimento() {
    return GeneratedRealColumn(
      'TOTAL_SUPRIMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totalSangriaMeta =
      const VerificationMeta('totalSangria');
  GeneratedRealColumn _totalSangria;
  @override
  GeneratedRealColumn get totalSangria =>
      _totalSangria ??= _constructTotalSangria();
  GeneratedRealColumn _constructTotalSangria() {
    return GeneratedRealColumn(
      'TOTAL_SANGRIA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totalNaoFiscalMeta =
      const VerificationMeta('totalNaoFiscal');
  GeneratedRealColumn _totalNaoFiscal;
  @override
  GeneratedRealColumn get totalNaoFiscal =>
      _totalNaoFiscal ??= _constructTotalNaoFiscal();
  GeneratedRealColumn _constructTotalNaoFiscal() {
    return GeneratedRealColumn(
      'TOTAL_NAO_FISCAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totalVendaMeta = const VerificationMeta('totalVenda');
  GeneratedRealColumn _totalVenda;
  @override
  GeneratedRealColumn get totalVenda => _totalVenda ??= _constructTotalVenda();
  GeneratedRealColumn _constructTotalVenda() {
    return GeneratedRealColumn(
      'TOTAL_VENDA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totalDescontoMeta =
      const VerificationMeta('totalDesconto');
  GeneratedRealColumn _totalDesconto;
  @override
  GeneratedRealColumn get totalDesconto =>
      _totalDesconto ??= _constructTotalDesconto();
  GeneratedRealColumn _constructTotalDesconto() {
    return GeneratedRealColumn(
      'TOTAL_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totalAcrescimoMeta =
      const VerificationMeta('totalAcrescimo');
  GeneratedRealColumn _totalAcrescimo;
  @override
  GeneratedRealColumn get totalAcrescimo =>
      _totalAcrescimo ??= _constructTotalAcrescimo();
  GeneratedRealColumn _constructTotalAcrescimo() {
    return GeneratedRealColumn(
      'TOTAL_ACRESCIMO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totalFinalMeta = const VerificationMeta('totalFinal');
  GeneratedRealColumn _totalFinal;
  @override
  GeneratedRealColumn get totalFinal => _totalFinal ??= _constructTotalFinal();
  GeneratedRealColumn _constructTotalFinal() {
    return GeneratedRealColumn(
      'TOTAL_FINAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totalRecebidoMeta =
      const VerificationMeta('totalRecebido');
  GeneratedRealColumn _totalRecebido;
  @override
  GeneratedRealColumn get totalRecebido =>
      _totalRecebido ??= _constructTotalRecebido();
  GeneratedRealColumn _constructTotalRecebido() {
    return GeneratedRealColumn(
      'TOTAL_RECEBIDO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totalTrocoMeta = const VerificationMeta('totalTroco');
  GeneratedRealColumn _totalTroco;
  @override
  GeneratedRealColumn get totalTroco => _totalTroco ??= _constructTotalTroco();
  GeneratedRealColumn _constructTotalTroco() {
    return GeneratedRealColumn(
      'TOTAL_TROCO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totalCanceladoMeta =
      const VerificationMeta('totalCancelado');
  GeneratedRealColumn _totalCancelado;
  @override
  GeneratedRealColumn get totalCancelado =>
      _totalCancelado ??= _constructTotalCancelado();
  GeneratedRealColumn _constructTotalCancelado() {
    return GeneratedRealColumn(
      'TOTAL_CANCELADO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _statusMovimentoMeta =
      const VerificationMeta('statusMovimento');
  GeneratedTextColumn _statusMovimento;
  @override
  GeneratedTextColumn get statusMovimento =>
      _statusMovimento ??= _constructStatusMovimento();
  GeneratedTextColumn _constructStatusMovimento() {
    return GeneratedTextColumn('STATUS_MOVIMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idEcfImpressora,
        idPdvOperador,
        idPdvCaixa,
        idGerenteSupervisor,
        dataAbertura,
        horaAbertura,
        dataFechamento,
        horaFechamento,
        totalSuprimento,
        totalSangria,
        totalNaoFiscal,
        totalVenda,
        totalDesconto,
        totalAcrescimo,
        totalFinal,
        totalRecebido,
        totalTroco,
        totalCancelado,
        statusMovimento
      ];
  @override
  $PdvMovimentosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_MOVIMENTO';
  @override
  final String actualTableName = 'PDV_MOVIMENTO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvMovimento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_ECF_IMPRESSORA')) {
      context.handle(
          _idEcfImpressoraMeta,
          idEcfImpressora.isAcceptableOrUnknown(
              data['ID_ECF_IMPRESSORA'], _idEcfImpressoraMeta));
    }
    if (data.containsKey('ID_PDV_OPERADOR')) {
      context.handle(
          _idPdvOperadorMeta,
          idPdvOperador.isAcceptableOrUnknown(
              data['ID_PDV_OPERADOR'], _idPdvOperadorMeta));
    }
    if (data.containsKey('ID_PDV_CAIXA')) {
      context.handle(
          _idPdvCaixaMeta,
          idPdvCaixa.isAcceptableOrUnknown(
              data['ID_PDV_CAIXA'], _idPdvCaixaMeta));
    }
    if (data.containsKey('ID_GERENTE_SUPERVISOR')) {
      context.handle(
          _idGerenteSupervisorMeta,
          idGerenteSupervisor.isAcceptableOrUnknown(
              data['ID_GERENTE_SUPERVISOR'], _idGerenteSupervisorMeta));
    }
    if (data.containsKey('DATA_ABERTURA')) {
      context.handle(
          _dataAberturaMeta,
          dataAbertura.isAcceptableOrUnknown(
              data['DATA_ABERTURA'], _dataAberturaMeta));
    }
    if (data.containsKey('HORA_ABERTURA')) {
      context.handle(
          _horaAberturaMeta,
          horaAbertura.isAcceptableOrUnknown(
              data['HORA_ABERTURA'], _horaAberturaMeta));
    }
    if (data.containsKey('DATA_FECHAMENTO')) {
      context.handle(
          _dataFechamentoMeta,
          dataFechamento.isAcceptableOrUnknown(
              data['DATA_FECHAMENTO'], _dataFechamentoMeta));
    }
    if (data.containsKey('HORA_FECHAMENTO')) {
      context.handle(
          _horaFechamentoMeta,
          horaFechamento.isAcceptableOrUnknown(
              data['HORA_FECHAMENTO'], _horaFechamentoMeta));
    }
    if (data.containsKey('TOTAL_SUPRIMENTO')) {
      context.handle(
          _totalSuprimentoMeta,
          totalSuprimento.isAcceptableOrUnknown(
              data['TOTAL_SUPRIMENTO'], _totalSuprimentoMeta));
    }
    if (data.containsKey('TOTAL_SANGRIA')) {
      context.handle(
          _totalSangriaMeta,
          totalSangria.isAcceptableOrUnknown(
              data['TOTAL_SANGRIA'], _totalSangriaMeta));
    }
    if (data.containsKey('TOTAL_NAO_FISCAL')) {
      context.handle(
          _totalNaoFiscalMeta,
          totalNaoFiscal.isAcceptableOrUnknown(
              data['TOTAL_NAO_FISCAL'], _totalNaoFiscalMeta));
    }
    if (data.containsKey('TOTAL_VENDA')) {
      context.handle(
          _totalVendaMeta,
          totalVenda.isAcceptableOrUnknown(
              data['TOTAL_VENDA'], _totalVendaMeta));
    }
    if (data.containsKey('TOTAL_DESCONTO')) {
      context.handle(
          _totalDescontoMeta,
          totalDesconto.isAcceptableOrUnknown(
              data['TOTAL_DESCONTO'], _totalDescontoMeta));
    }
    if (data.containsKey('TOTAL_ACRESCIMO')) {
      context.handle(
          _totalAcrescimoMeta,
          totalAcrescimo.isAcceptableOrUnknown(
              data['TOTAL_ACRESCIMO'], _totalAcrescimoMeta));
    }
    if (data.containsKey('TOTAL_FINAL')) {
      context.handle(
          _totalFinalMeta,
          totalFinal.isAcceptableOrUnknown(
              data['TOTAL_FINAL'], _totalFinalMeta));
    }
    if (data.containsKey('TOTAL_RECEBIDO')) {
      context.handle(
          _totalRecebidoMeta,
          totalRecebido.isAcceptableOrUnknown(
              data['TOTAL_RECEBIDO'], _totalRecebidoMeta));
    }
    if (data.containsKey('TOTAL_TROCO')) {
      context.handle(
          _totalTrocoMeta,
          totalTroco.isAcceptableOrUnknown(
              data['TOTAL_TROCO'], _totalTrocoMeta));
    }
    if (data.containsKey('TOTAL_CANCELADO')) {
      context.handle(
          _totalCanceladoMeta,
          totalCancelado.isAcceptableOrUnknown(
              data['TOTAL_CANCELADO'], _totalCanceladoMeta));
    }
    if (data.containsKey('STATUS_MOVIMENTO')) {
      context.handle(
          _statusMovimentoMeta,
          statusMovimento.isAcceptableOrUnknown(
              data['STATUS_MOVIMENTO'], _statusMovimentoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvMovimento map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvMovimento.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvMovimentosTable createAlias(String alias) {
    return $PdvMovimentosTable(_db, alias);
  }
}

class PdvOperador extends DataClass implements Insertable<PdvOperador> {
  final int id;
  final int idColaborador;
  final String login;
  final String senha;
  PdvOperador({@required this.id, this.idColaborador, this.login, this.senha});
  factory PdvOperador.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return PdvOperador(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idColaborador: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_COLABORADOR']),
      login:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}LOGIN']),
      senha:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}SENHA']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || login != null) {
      map['LOGIN'] = Variable<String>(login);
    }
    if (!nullToAbsent || senha != null) {
      map['SENHA'] = Variable<String>(senha);
    }
    return map;
  }

  PdvOperadorsCompanion toCompanion(bool nullToAbsent) {
    return PdvOperadorsCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idColaborador: idColaborador == null && nullToAbsent
          ? const Value.absent()
          : Value(idColaborador),
      login:
          login == null && nullToAbsent ? const Value.absent() : Value(login),
      senha:
          senha == null && nullToAbsent ? const Value.absent() : Value(senha),
    );
  }

  factory PdvOperador.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvOperador(
      id: serializer.fromJson<int>(json['id']),
      idColaborador: serializer.fromJson<int>(json['idColaborador']),
      login: serializer.fromJson<String>(json['login']),
      senha: serializer.fromJson<String>(json['senha']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idColaborador': serializer.toJson<int>(idColaborador),
      'login': serializer.toJson<String>(login),
      'senha': serializer.toJson<String>(senha),
    };
  }

  PdvOperador copyWith(
          {int id, int idColaborador, String login, String senha}) =>
      PdvOperador(
        id: id ?? this.id,
        idColaborador: idColaborador ?? this.idColaborador,
        login: login ?? this.login,
        senha: senha ?? this.senha,
      );
  @override
  String toString() {
    return (StringBuffer('PdvOperador(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('login: $login, ')
          ..write('senha: $senha')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(id.hashCode,
      $mrjc(idColaborador.hashCode, $mrjc(login.hashCode, senha.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvOperador &&
          other.id == this.id &&
          other.idColaborador == this.idColaborador &&
          other.login == this.login &&
          other.senha == this.senha);
}

class PdvOperadorsCompanion extends UpdateCompanion<PdvOperador> {
  final Value<int> id;
  final Value<int> idColaborador;
  final Value<String> login;
  final Value<String> senha;
  const PdvOperadorsCompanion({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.login = const Value.absent(),
    this.senha = const Value.absent(),
  });
  PdvOperadorsCompanion.insert({
    this.id = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.login = const Value.absent(),
    this.senha = const Value.absent(),
  });
  static Insertable<PdvOperador> custom({
    Expression<int> id,
    Expression<int> idColaborador,
    Expression<String> login,
    Expression<String> senha,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
      if (login != null) 'LOGIN': login,
      if (senha != null) 'SENHA': senha,
    });
  }

  PdvOperadorsCompanion copyWith(
      {Value<int> id,
      Value<int> idColaborador,
      Value<String> login,
      Value<String> senha}) {
    return PdvOperadorsCompanion(
      id: id ?? this.id,
      idColaborador: idColaborador ?? this.idColaborador,
      login: login ?? this.login,
      senha: senha ?? this.senha,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idColaborador.present) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador.value);
    }
    if (login.present) {
      map['LOGIN'] = Variable<String>(login.value);
    }
    if (senha.present) {
      map['SENHA'] = Variable<String>(senha.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvOperadorsCompanion(')
          ..write('id: $id, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('login: $login, ')
          ..write('senha: $senha')
          ..write(')'))
        .toString();
  }
}

class $PdvOperadorsTable extends PdvOperadors
    with TableInfo<$PdvOperadorsTable, PdvOperador> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvOperadorsTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idColaboradorMeta =
      const VerificationMeta('idColaborador');
  GeneratedIntColumn _idColaborador;
  @override
  GeneratedIntColumn get idColaborador =>
      _idColaborador ??= _constructIdColaborador();
  GeneratedIntColumn _constructIdColaborador() {
    return GeneratedIntColumn('ID_COLABORADOR', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
  }

  final VerificationMeta _loginMeta = const VerificationMeta('login');
  GeneratedTextColumn _login;
  @override
  GeneratedTextColumn get login => _login ??= _constructLogin();
  GeneratedTextColumn _constructLogin() {
    return GeneratedTextColumn('LOGIN', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _senhaMeta = const VerificationMeta('senha');
  GeneratedTextColumn _senha;
  @override
  GeneratedTextColumn get senha => _senha ??= _constructSenha();
  GeneratedTextColumn _constructSenha() {
    return GeneratedTextColumn('SENHA', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  @override
  List<GeneratedColumn> get $columns => [id, idColaborador, login, senha];
  @override
  $PdvOperadorsTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_OPERADOR';
  @override
  final String actualTableName = 'PDV_OPERADOR';
  @override
  VerificationContext validateIntegrity(Insertable<PdvOperador> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_COLABORADOR')) {
      context.handle(
          _idColaboradorMeta,
          idColaborador.isAcceptableOrUnknown(
              data['ID_COLABORADOR'], _idColaboradorMeta));
    }
    if (data.containsKey('LOGIN')) {
      context.handle(
          _loginMeta, login.isAcceptableOrUnknown(data['LOGIN'], _loginMeta));
    }
    if (data.containsKey('SENHA')) {
      context.handle(
          _senhaMeta, senha.isAcceptableOrUnknown(data['SENHA'], _senhaMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvOperador map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvOperador.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvOperadorsTable createAlias(String alias) {
    return $PdvOperadorsTable(_db, alias);
  }
}

class PdvSangria extends DataClass implements Insertable<PdvSangria> {
  final int id;
  final int idPdvMovimento;
  final DateTime dataSangria;
  final String horaSangria;
  final double valor;
  final String observacao;
  PdvSangria(
      {@required this.id,
      this.idPdvMovimento,
      this.dataSangria,
      this.horaSangria,
      this.valor,
      this.observacao});
  factory PdvSangria.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return PdvSangria(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvMovimento: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      dataSangria: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_SANGRIA']),
      horaSangria: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_SANGRIA']),
      valor:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
      observacao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || dataSangria != null) {
      map['DATA_SANGRIA'] = Variable<DateTime>(dataSangria);
    }
    if (!nullToAbsent || horaSangria != null) {
      map['HORA_SANGRIA'] = Variable<String>(horaSangria);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    return map;
  }

  PdvSangriasCompanion toCompanion(bool nullToAbsent) {
    return PdvSangriasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      dataSangria: dataSangria == null && nullToAbsent
          ? const Value.absent()
          : Value(dataSangria),
      horaSangria: horaSangria == null && nullToAbsent
          ? const Value.absent()
          : Value(horaSangria),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
    );
  }

  factory PdvSangria.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvSangria(
      id: serializer.fromJson<int>(json['id']),
      idPdvMovimento: serializer.fromJson<int>(json['idPdvMovimento']),
      dataSangria: serializer.fromJson<DateTime>(json['dataSangria']),
      horaSangria: serializer.fromJson<String>(json['horaSangria']),
      valor: serializer.fromJson<double>(json['valor']),
      observacao: serializer.fromJson<String>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvMovimento': serializer.toJson<int>(idPdvMovimento),
      'dataSangria': serializer.toJson<DateTime>(dataSangria),
      'horaSangria': serializer.toJson<String>(horaSangria),
      'valor': serializer.toJson<double>(valor),
      'observacao': serializer.toJson<String>(observacao),
    };
  }

  PdvSangria copyWith(
          {int id,
          int idPdvMovimento,
          DateTime dataSangria,
          String horaSangria,
          double valor,
          String observacao}) =>
      PdvSangria(
        id: id ?? this.id,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        dataSangria: dataSangria ?? this.dataSangria,
        horaSangria: horaSangria ?? this.horaSangria,
        valor: valor ?? this.valor,
        observacao: observacao ?? this.observacao,
      );
  @override
  String toString() {
    return (StringBuffer('PdvSangria(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataSangria: $dataSangria, ')
          ..write('horaSangria: $horaSangria, ')
          ..write('valor: $valor, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idPdvMovimento.hashCode,
          $mrjc(
              dataSangria.hashCode,
              $mrjc(horaSangria.hashCode,
                  $mrjc(valor.hashCode, observacao.hashCode))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvSangria &&
          other.id == this.id &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.dataSangria == this.dataSangria &&
          other.horaSangria == this.horaSangria &&
          other.valor == this.valor &&
          other.observacao == this.observacao);
}

class PdvSangriasCompanion extends UpdateCompanion<PdvSangria> {
  final Value<int> id;
  final Value<int> idPdvMovimento;
  final Value<DateTime> dataSangria;
  final Value<String> horaSangria;
  final Value<double> valor;
  final Value<String> observacao;
  const PdvSangriasCompanion({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataSangria = const Value.absent(),
    this.horaSangria = const Value.absent(),
    this.valor = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  PdvSangriasCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataSangria = const Value.absent(),
    this.horaSangria = const Value.absent(),
    this.valor = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<PdvSangria> custom({
    Expression<int> id,
    Expression<int> idPdvMovimento,
    Expression<DateTime> dataSangria,
    Expression<String> horaSangria,
    Expression<double> valor,
    Expression<String> observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (dataSangria != null) 'DATA_SANGRIA': dataSangria,
      if (horaSangria != null) 'HORA_SANGRIA': horaSangria,
      if (valor != null) 'VALOR': valor,
      if (observacao != null) 'OBSERVACAO': observacao,
    });
  }

  PdvSangriasCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvMovimento,
      Value<DateTime> dataSangria,
      Value<String> horaSangria,
      Value<double> valor,
      Value<String> observacao}) {
    return PdvSangriasCompanion(
      id: id ?? this.id,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      dataSangria: dataSangria ?? this.dataSangria,
      horaSangria: horaSangria ?? this.horaSangria,
      valor: valor ?? this.valor,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (dataSangria.present) {
      map['DATA_SANGRIA'] = Variable<DateTime>(dataSangria.value);
    }
    if (horaSangria.present) {
      map['HORA_SANGRIA'] = Variable<String>(horaSangria.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvSangriasCompanion(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataSangria: $dataSangria, ')
          ..write('horaSangria: $horaSangria, ')
          ..write('valor: $valor, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $PdvSangriasTable extends PdvSangrias
    with TableInfo<$PdvSangriasTable, PdvSangria> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvSangriasTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  GeneratedIntColumn _idPdvMovimento;
  @override
  GeneratedIntColumn get idPdvMovimento =>
      _idPdvMovimento ??= _constructIdPdvMovimento();
  GeneratedIntColumn _constructIdPdvMovimento() {
    return GeneratedIntColumn('ID_PDV_MOVIMENTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  }

  final VerificationMeta _dataSangriaMeta =
      const VerificationMeta('dataSangria');
  GeneratedDateTimeColumn _dataSangria;
  @override
  GeneratedDateTimeColumn get dataSangria =>
      _dataSangria ??= _constructDataSangria();
  GeneratedDateTimeColumn _constructDataSangria() {
    return GeneratedDateTimeColumn(
      'DATA_SANGRIA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaSangriaMeta =
      const VerificationMeta('horaSangria');
  GeneratedTextColumn _horaSangria;
  @override
  GeneratedTextColumn get horaSangria =>
      _horaSangria ??= _constructHoraSangria();
  GeneratedTextColumn _constructHoraSangria() {
    return GeneratedTextColumn('HORA_SANGRIA', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  GeneratedRealColumn _valor;
  @override
  GeneratedRealColumn get valor => _valor ??= _constructValor();
  GeneratedRealColumn _constructValor() {
    return GeneratedRealColumn(
      'VALOR',
      $tableName,
      true,
    );
  }

  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  GeneratedTextColumn _observacao;
  @override
  GeneratedTextColumn get observacao => _observacao ??= _constructObservacao();
  GeneratedTextColumn _constructObservacao() {
    return GeneratedTextColumn('OBSERVACAO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, idPdvMovimento, dataSangria, horaSangria, valor, observacao];
  @override
  $PdvSangriasTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_SANGRIA';
  @override
  final String actualTableName = 'PDV_SANGRIA';
  @override
  VerificationContext validateIntegrity(Insertable<PdvSangria> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO'], _idPdvMovimentoMeta));
    }
    if (data.containsKey('DATA_SANGRIA')) {
      context.handle(
          _dataSangriaMeta,
          dataSangria.isAcceptableOrUnknown(
              data['DATA_SANGRIA'], _dataSangriaMeta));
    }
    if (data.containsKey('HORA_SANGRIA')) {
      context.handle(
          _horaSangriaMeta,
          horaSangria.isAcceptableOrUnknown(
              data['HORA_SANGRIA'], _horaSangriaMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR'], _valorMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO'], _observacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvSangria map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvSangria.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvSangriasTable createAlias(String alias) {
    return $PdvSangriasTable(_db, alias);
  }
}

class PdvSuprimento extends DataClass implements Insertable<PdvSuprimento> {
  final int id;
  final int idPdvMovimento;
  final DateTime dataSuprimento;
  final String horaSuprimento;
  final double valor;
  final String observacao;
  PdvSuprimento(
      {@required this.id,
      this.idPdvMovimento,
      this.dataSuprimento,
      this.horaSuprimento,
      this.valor,
      this.observacao});
  factory PdvSuprimento.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return PdvSuprimento(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvMovimento: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      dataSuprimento: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_SUPRIMENTO']),
      horaSuprimento: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_SUPRIMENTO']),
      valor:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
      observacao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}OBSERVACAO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || dataSuprimento != null) {
      map['DATA_SUPRIMENTO'] = Variable<DateTime>(dataSuprimento);
    }
    if (!nullToAbsent || horaSuprimento != null) {
      map['HORA_SUPRIMENTO'] = Variable<String>(horaSuprimento);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    if (!nullToAbsent || observacao != null) {
      map['OBSERVACAO'] = Variable<String>(observacao);
    }
    return map;
  }

  PdvSuprimentosCompanion toCompanion(bool nullToAbsent) {
    return PdvSuprimentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      dataSuprimento: dataSuprimento == null && nullToAbsent
          ? const Value.absent()
          : Value(dataSuprimento),
      horaSuprimento: horaSuprimento == null && nullToAbsent
          ? const Value.absent()
          : Value(horaSuprimento),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
      observacao: observacao == null && nullToAbsent
          ? const Value.absent()
          : Value(observacao),
    );
  }

  factory PdvSuprimento.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvSuprimento(
      id: serializer.fromJson<int>(json['id']),
      idPdvMovimento: serializer.fromJson<int>(json['idPdvMovimento']),
      dataSuprimento: serializer.fromJson<DateTime>(json['dataSuprimento']),
      horaSuprimento: serializer.fromJson<String>(json['horaSuprimento']),
      valor: serializer.fromJson<double>(json['valor']),
      observacao: serializer.fromJson<String>(json['observacao']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvMovimento': serializer.toJson<int>(idPdvMovimento),
      'dataSuprimento': serializer.toJson<DateTime>(dataSuprimento),
      'horaSuprimento': serializer.toJson<String>(horaSuprimento),
      'valor': serializer.toJson<double>(valor),
      'observacao': serializer.toJson<String>(observacao),
    };
  }

  PdvSuprimento copyWith(
          {int id,
          int idPdvMovimento,
          DateTime dataSuprimento,
          String horaSuprimento,
          double valor,
          String observacao}) =>
      PdvSuprimento(
        id: id ?? this.id,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        dataSuprimento: dataSuprimento ?? this.dataSuprimento,
        horaSuprimento: horaSuprimento ?? this.horaSuprimento,
        valor: valor ?? this.valor,
        observacao: observacao ?? this.observacao,
      );
  @override
  String toString() {
    return (StringBuffer('PdvSuprimento(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataSuprimento: $dataSuprimento, ')
          ..write('horaSuprimento: $horaSuprimento, ')
          ..write('valor: $valor, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idPdvMovimento.hashCode,
          $mrjc(
              dataSuprimento.hashCode,
              $mrjc(horaSuprimento.hashCode,
                  $mrjc(valor.hashCode, observacao.hashCode))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvSuprimento &&
          other.id == this.id &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.dataSuprimento == this.dataSuprimento &&
          other.horaSuprimento == this.horaSuprimento &&
          other.valor == this.valor &&
          other.observacao == this.observacao);
}

class PdvSuprimentosCompanion extends UpdateCompanion<PdvSuprimento> {
  final Value<int> id;
  final Value<int> idPdvMovimento;
  final Value<DateTime> dataSuprimento;
  final Value<String> horaSuprimento;
  final Value<double> valor;
  final Value<String> observacao;
  const PdvSuprimentosCompanion({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataSuprimento = const Value.absent(),
    this.horaSuprimento = const Value.absent(),
    this.valor = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  PdvSuprimentosCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.dataSuprimento = const Value.absent(),
    this.horaSuprimento = const Value.absent(),
    this.valor = const Value.absent(),
    this.observacao = const Value.absent(),
  });
  static Insertable<PdvSuprimento> custom({
    Expression<int> id,
    Expression<int> idPdvMovimento,
    Expression<DateTime> dataSuprimento,
    Expression<String> horaSuprimento,
    Expression<double> valor,
    Expression<String> observacao,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (dataSuprimento != null) 'DATA_SUPRIMENTO': dataSuprimento,
      if (horaSuprimento != null) 'HORA_SUPRIMENTO': horaSuprimento,
      if (valor != null) 'VALOR': valor,
      if (observacao != null) 'OBSERVACAO': observacao,
    });
  }

  PdvSuprimentosCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvMovimento,
      Value<DateTime> dataSuprimento,
      Value<String> horaSuprimento,
      Value<double> valor,
      Value<String> observacao}) {
    return PdvSuprimentosCompanion(
      id: id ?? this.id,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      dataSuprimento: dataSuprimento ?? this.dataSuprimento,
      horaSuprimento: horaSuprimento ?? this.horaSuprimento,
      valor: valor ?? this.valor,
      observacao: observacao ?? this.observacao,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (dataSuprimento.present) {
      map['DATA_SUPRIMENTO'] = Variable<DateTime>(dataSuprimento.value);
    }
    if (horaSuprimento.present) {
      map['HORA_SUPRIMENTO'] = Variable<String>(horaSuprimento.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    if (observacao.present) {
      map['OBSERVACAO'] = Variable<String>(observacao.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvSuprimentosCompanion(')
          ..write('id: $id, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('dataSuprimento: $dataSuprimento, ')
          ..write('horaSuprimento: $horaSuprimento, ')
          ..write('valor: $valor, ')
          ..write('observacao: $observacao')
          ..write(')'))
        .toString();
  }
}

class $PdvSuprimentosTable extends PdvSuprimentos
    with TableInfo<$PdvSuprimentosTable, PdvSuprimento> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvSuprimentosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  GeneratedIntColumn _idPdvMovimento;
  @override
  GeneratedIntColumn get idPdvMovimento =>
      _idPdvMovimento ??= _constructIdPdvMovimento();
  GeneratedIntColumn _constructIdPdvMovimento() {
    return GeneratedIntColumn('ID_PDV_MOVIMENTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  }

  final VerificationMeta _dataSuprimentoMeta =
      const VerificationMeta('dataSuprimento');
  GeneratedDateTimeColumn _dataSuprimento;
  @override
  GeneratedDateTimeColumn get dataSuprimento =>
      _dataSuprimento ??= _constructDataSuprimento();
  GeneratedDateTimeColumn _constructDataSuprimento() {
    return GeneratedDateTimeColumn(
      'DATA_SUPRIMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaSuprimentoMeta =
      const VerificationMeta('horaSuprimento');
  GeneratedTextColumn _horaSuprimento;
  @override
  GeneratedTextColumn get horaSuprimento =>
      _horaSuprimento ??= _constructHoraSuprimento();
  GeneratedTextColumn _constructHoraSuprimento() {
    return GeneratedTextColumn('HORA_SUPRIMENTO', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  GeneratedRealColumn _valor;
  @override
  GeneratedRealColumn get valor => _valor ??= _constructValor();
  GeneratedRealColumn _constructValor() {
    return GeneratedRealColumn(
      'VALOR',
      $tableName,
      true,
    );
  }

  final VerificationMeta _observacaoMeta = const VerificationMeta('observacao');
  GeneratedTextColumn _observacao;
  @override
  GeneratedTextColumn get observacao => _observacao ??= _constructObservacao();
  GeneratedTextColumn _constructObservacao() {
    return GeneratedTextColumn('OBSERVACAO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, idPdvMovimento, dataSuprimento, horaSuprimento, valor, observacao];
  @override
  $PdvSuprimentosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_SUPRIMENTO';
  @override
  final String actualTableName = 'PDV_SUPRIMENTO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvSuprimento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO'], _idPdvMovimentoMeta));
    }
    if (data.containsKey('DATA_SUPRIMENTO')) {
      context.handle(
          _dataSuprimentoMeta,
          dataSuprimento.isAcceptableOrUnknown(
              data['DATA_SUPRIMENTO'], _dataSuprimentoMeta));
    }
    if (data.containsKey('HORA_SUPRIMENTO')) {
      context.handle(
          _horaSuprimentoMeta,
          horaSuprimento.isAcceptableOrUnknown(
              data['HORA_SUPRIMENTO'], _horaSuprimentoMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR'], _valorMeta));
    }
    if (data.containsKey('OBSERVACAO')) {
      context.handle(
          _observacaoMeta,
          observacao.isAcceptableOrUnknown(
              data['OBSERVACAO'], _observacaoMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvSuprimento map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvSuprimento.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvSuprimentosTable createAlias(String alias) {
    return $PdvSuprimentosTable(_db, alias);
  }
}

class PdvTipoPagamento extends DataClass
    implements Insertable<PdvTipoPagamento> {
  final int id;
  final String codigo;
  final String descricao;
  final String tef;
  final String imprimeVinculado;
  final String permiteTroco;
  final String tefTipoGp;
  final String geraParcelas;
  PdvTipoPagamento(
      {@required this.id,
      this.codigo,
      this.descricao,
      this.tef,
      this.imprimeVinculado,
      this.permiteTroco,
      this.tefTipoGp,
      this.geraParcelas});
  factory PdvTipoPagamento.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return PdvTipoPagamento(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      codigo:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CODIGO']),
      descricao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
      tef: stringType.mapFromDatabaseResponse(data['${effectivePrefix}TEF']),
      imprimeVinculado: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}IMPRIME_VINCULADO']),
      permiteTroco: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}PERMITE_TROCO']),
      tefTipoGp: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TEF_TIPO_GP']),
      geraParcelas: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}GERA_PARCELAS']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || codigo != null) {
      map['CODIGO'] = Variable<String>(codigo);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || tef != null) {
      map['TEF'] = Variable<String>(tef);
    }
    if (!nullToAbsent || imprimeVinculado != null) {
      map['IMPRIME_VINCULADO'] = Variable<String>(imprimeVinculado);
    }
    if (!nullToAbsent || permiteTroco != null) {
      map['PERMITE_TROCO'] = Variable<String>(permiteTroco);
    }
    if (!nullToAbsent || tefTipoGp != null) {
      map['TEF_TIPO_GP'] = Variable<String>(tefTipoGp);
    }
    if (!nullToAbsent || geraParcelas != null) {
      map['GERA_PARCELAS'] = Variable<String>(geraParcelas);
    }
    return map;
  }

  PdvTipoPagamentosCompanion toCompanion(bool nullToAbsent) {
    return PdvTipoPagamentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      codigo:
          codigo == null && nullToAbsent ? const Value.absent() : Value(codigo),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      tef: tef == null && nullToAbsent ? const Value.absent() : Value(tef),
      imprimeVinculado: imprimeVinculado == null && nullToAbsent
          ? const Value.absent()
          : Value(imprimeVinculado),
      permiteTroco: permiteTroco == null && nullToAbsent
          ? const Value.absent()
          : Value(permiteTroco),
      tefTipoGp: tefTipoGp == null && nullToAbsent
          ? const Value.absent()
          : Value(tefTipoGp),
      geraParcelas: geraParcelas == null && nullToAbsent
          ? const Value.absent()
          : Value(geraParcelas),
    );
  }

  factory PdvTipoPagamento.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvTipoPagamento(
      id: serializer.fromJson<int>(json['id']),
      codigo: serializer.fromJson<String>(json['codigo']),
      descricao: serializer.fromJson<String>(json['descricao']),
      tef: serializer.fromJson<String>(json['tef']),
      imprimeVinculado: serializer.fromJson<String>(json['imprimeVinculado']),
      permiteTroco: serializer.fromJson<String>(json['permiteTroco']),
      tefTipoGp: serializer.fromJson<String>(json['tefTipoGp']),
      geraParcelas: serializer.fromJson<String>(json['geraParcelas']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'codigo': serializer.toJson<String>(codigo),
      'descricao': serializer.toJson<String>(descricao),
      'tef': serializer.toJson<String>(tef),
      'imprimeVinculado': serializer.toJson<String>(imprimeVinculado),
      'permiteTroco': serializer.toJson<String>(permiteTroco),
      'tefTipoGp': serializer.toJson<String>(tefTipoGp),
      'geraParcelas': serializer.toJson<String>(geraParcelas),
    };
  }

  PdvTipoPagamento copyWith(
          {int id,
          String codigo,
          String descricao,
          String tef,
          String imprimeVinculado,
          String permiteTroco,
          String tefTipoGp,
          String geraParcelas}) =>
      PdvTipoPagamento(
        id: id ?? this.id,
        codigo: codigo ?? this.codigo,
        descricao: descricao ?? this.descricao,
        tef: tef ?? this.tef,
        imprimeVinculado: imprimeVinculado ?? this.imprimeVinculado,
        permiteTroco: permiteTroco ?? this.permiteTroco,
        tefTipoGp: tefTipoGp ?? this.tefTipoGp,
        geraParcelas: geraParcelas ?? this.geraParcelas,
      );
  @override
  String toString() {
    return (StringBuffer('PdvTipoPagamento(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao, ')
          ..write('tef: $tef, ')
          ..write('imprimeVinculado: $imprimeVinculado, ')
          ..write('permiteTroco: $permiteTroco, ')
          ..write('tefTipoGp: $tefTipoGp, ')
          ..write('geraParcelas: $geraParcelas')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          codigo.hashCode,
          $mrjc(
              descricao.hashCode,
              $mrjc(
                  tef.hashCode,
                  $mrjc(
                      imprimeVinculado.hashCode,
                      $mrjc(
                          permiteTroco.hashCode,
                          $mrjc(
                              tefTipoGp.hashCode, geraParcelas.hashCode))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvTipoPagamento &&
          other.id == this.id &&
          other.codigo == this.codigo &&
          other.descricao == this.descricao &&
          other.tef == this.tef &&
          other.imprimeVinculado == this.imprimeVinculado &&
          other.permiteTroco == this.permiteTroco &&
          other.tefTipoGp == this.tefTipoGp &&
          other.geraParcelas == this.geraParcelas);
}

class PdvTipoPagamentosCompanion extends UpdateCompanion<PdvTipoPagamento> {
  final Value<int> id;
  final Value<String> codigo;
  final Value<String> descricao;
  final Value<String> tef;
  final Value<String> imprimeVinculado;
  final Value<String> permiteTroco;
  final Value<String> tefTipoGp;
  final Value<String> geraParcelas;
  const PdvTipoPagamentosCompanion({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.tef = const Value.absent(),
    this.imprimeVinculado = const Value.absent(),
    this.permiteTroco = const Value.absent(),
    this.tefTipoGp = const Value.absent(),
    this.geraParcelas = const Value.absent(),
  });
  PdvTipoPagamentosCompanion.insert({
    this.id = const Value.absent(),
    this.codigo = const Value.absent(),
    this.descricao = const Value.absent(),
    this.tef = const Value.absent(),
    this.imprimeVinculado = const Value.absent(),
    this.permiteTroco = const Value.absent(),
    this.tefTipoGp = const Value.absent(),
    this.geraParcelas = const Value.absent(),
  });
  static Insertable<PdvTipoPagamento> custom({
    Expression<int> id,
    Expression<String> codigo,
    Expression<String> descricao,
    Expression<String> tef,
    Expression<String> imprimeVinculado,
    Expression<String> permiteTroco,
    Expression<String> tefTipoGp,
    Expression<String> geraParcelas,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (codigo != null) 'CODIGO': codigo,
      if (descricao != null) 'DESCRICAO': descricao,
      if (tef != null) 'TEF': tef,
      if (imprimeVinculado != null) 'IMPRIME_VINCULADO': imprimeVinculado,
      if (permiteTroco != null) 'PERMITE_TROCO': permiteTroco,
      if (tefTipoGp != null) 'TEF_TIPO_GP': tefTipoGp,
      if (geraParcelas != null) 'GERA_PARCELAS': geraParcelas,
    });
  }

  PdvTipoPagamentosCompanion copyWith(
      {Value<int> id,
      Value<String> codigo,
      Value<String> descricao,
      Value<String> tef,
      Value<String> imprimeVinculado,
      Value<String> permiteTroco,
      Value<String> tefTipoGp,
      Value<String> geraParcelas}) {
    return PdvTipoPagamentosCompanion(
      id: id ?? this.id,
      codigo: codigo ?? this.codigo,
      descricao: descricao ?? this.descricao,
      tef: tef ?? this.tef,
      imprimeVinculado: imprimeVinculado ?? this.imprimeVinculado,
      permiteTroco: permiteTroco ?? this.permiteTroco,
      tefTipoGp: tefTipoGp ?? this.tefTipoGp,
      geraParcelas: geraParcelas ?? this.geraParcelas,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (codigo.present) {
      map['CODIGO'] = Variable<String>(codigo.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (tef.present) {
      map['TEF'] = Variable<String>(tef.value);
    }
    if (imprimeVinculado.present) {
      map['IMPRIME_VINCULADO'] = Variable<String>(imprimeVinculado.value);
    }
    if (permiteTroco.present) {
      map['PERMITE_TROCO'] = Variable<String>(permiteTroco.value);
    }
    if (tefTipoGp.present) {
      map['TEF_TIPO_GP'] = Variable<String>(tefTipoGp.value);
    }
    if (geraParcelas.present) {
      map['GERA_PARCELAS'] = Variable<String>(geraParcelas.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvTipoPagamentosCompanion(')
          ..write('id: $id, ')
          ..write('codigo: $codigo, ')
          ..write('descricao: $descricao, ')
          ..write('tef: $tef, ')
          ..write('imprimeVinculado: $imprimeVinculado, ')
          ..write('permiteTroco: $permiteTroco, ')
          ..write('tefTipoGp: $tefTipoGp, ')
          ..write('geraParcelas: $geraParcelas')
          ..write(')'))
        .toString();
  }
}

class $PdvTipoPagamentosTable extends PdvTipoPagamentos
    with TableInfo<$PdvTipoPagamentosTable, PdvTipoPagamento> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvTipoPagamentosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _codigoMeta = const VerificationMeta('codigo');
  GeneratedTextColumn _codigo;
  @override
  GeneratedTextColumn get codigo => _codigo ??= _constructCodigo();
  GeneratedTextColumn _constructCodigo() {
    return GeneratedTextColumn('CODIGO', $tableName, true,
        minTextLength: 1, maxTextLength: 3);
  }

  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  GeneratedTextColumn _descricao;
  @override
  GeneratedTextColumn get descricao => _descricao ??= _constructDescricao();
  GeneratedTextColumn _constructDescricao() {
    return GeneratedTextColumn('DESCRICAO', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _tefMeta = const VerificationMeta('tef');
  GeneratedTextColumn _tef;
  @override
  GeneratedTextColumn get tef => _tef ??= _constructTef();
  GeneratedTextColumn _constructTef() {
    return GeneratedTextColumn('TEF', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _imprimeVinculadoMeta =
      const VerificationMeta('imprimeVinculado');
  GeneratedTextColumn _imprimeVinculado;
  @override
  GeneratedTextColumn get imprimeVinculado =>
      _imprimeVinculado ??= _constructImprimeVinculado();
  GeneratedTextColumn _constructImprimeVinculado() {
    return GeneratedTextColumn('IMPRIME_VINCULADO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _permiteTrocoMeta =
      const VerificationMeta('permiteTroco');
  GeneratedTextColumn _permiteTroco;
  @override
  GeneratedTextColumn get permiteTroco =>
      _permiteTroco ??= _constructPermiteTroco();
  GeneratedTextColumn _constructPermiteTroco() {
    return GeneratedTextColumn('PERMITE_TROCO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _tefTipoGpMeta = const VerificationMeta('tefTipoGp');
  GeneratedTextColumn _tefTipoGp;
  @override
  GeneratedTextColumn get tefTipoGp => _tefTipoGp ??= _constructTefTipoGp();
  GeneratedTextColumn _constructTefTipoGp() {
    return GeneratedTextColumn('TEF_TIPO_GP', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _geraParcelasMeta =
      const VerificationMeta('geraParcelas');
  GeneratedTextColumn _geraParcelas;
  @override
  GeneratedTextColumn get geraParcelas =>
      _geraParcelas ??= _constructGeraParcelas();
  GeneratedTextColumn _constructGeraParcelas() {
    return GeneratedTextColumn('GERA_PARCELAS', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        codigo,
        descricao,
        tef,
        imprimeVinculado,
        permiteTroco,
        tefTipoGp,
        geraParcelas
      ];
  @override
  $PdvTipoPagamentosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_TIPO_PAGAMENTO';
  @override
  final String actualTableName = 'PDV_TIPO_PAGAMENTO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvTipoPagamento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('CODIGO')) {
      context.handle(_codigoMeta,
          codigo.isAcceptableOrUnknown(data['CODIGO'], _codigoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO'], _descricaoMeta));
    }
    if (data.containsKey('TEF')) {
      context.handle(
          _tefMeta, tef.isAcceptableOrUnknown(data['TEF'], _tefMeta));
    }
    if (data.containsKey('IMPRIME_VINCULADO')) {
      context.handle(
          _imprimeVinculadoMeta,
          imprimeVinculado.isAcceptableOrUnknown(
              data['IMPRIME_VINCULADO'], _imprimeVinculadoMeta));
    }
    if (data.containsKey('PERMITE_TROCO')) {
      context.handle(
          _permiteTrocoMeta,
          permiteTroco.isAcceptableOrUnknown(
              data['PERMITE_TROCO'], _permiteTrocoMeta));
    }
    if (data.containsKey('TEF_TIPO_GP')) {
      context.handle(_tefTipoGpMeta,
          tefTipoGp.isAcceptableOrUnknown(data['TEF_TIPO_GP'], _tefTipoGpMeta));
    }
    if (data.containsKey('GERA_PARCELAS')) {
      context.handle(
          _geraParcelasMeta,
          geraParcelas.isAcceptableOrUnknown(
              data['GERA_PARCELAS'], _geraParcelasMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvTipoPagamento map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvTipoPagamento.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvTipoPagamentosTable createAlias(String alias) {
    return $PdvTipoPagamentosTable(_db, alias);
  }
}

class PdvTotalTipoPagamento extends DataClass
    implements Insertable<PdvTotalTipoPagamento> {
  final int id;
  final int idPdvVendaCabecalho;
  final int idPdvTipoPagamento;
  final DateTime dataVenda;
  final String horaVenda;
  final String serieEcf;
  final int coo;
  final int ccf;
  final int gnf;
  final double valor;
  final String nsu;
  final String estorno;
  final String rede;
  final String cartaoDc;
  final String hashRegistro;
  PdvTotalTipoPagamento(
      {@required this.id,
      this.idPdvVendaCabecalho,
      this.idPdvTipoPagamento,
      this.dataVenda,
      this.horaVenda,
      this.serieEcf,
      this.coo,
      this.ccf,
      this.gnf,
      this.valor,
      this.nsu,
      this.estorno,
      this.rede,
      this.cartaoDc,
      this.hashRegistro});
  factory PdvTotalTipoPagamento.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return PdvTotalTipoPagamento(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idPdvVendaCabecalho: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
      idPdvTipoPagamento: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_PDV_TIPO_PAGAMENTO']),
      dataVenda: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_VENDA']),
      horaVenda: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_VENDA']),
      serieEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
      coo: intType.mapFromDatabaseResponse(data['${effectivePrefix}COO']),
      ccf: intType.mapFromDatabaseResponse(data['${effectivePrefix}CCF']),
      gnf: intType.mapFromDatabaseResponse(data['${effectivePrefix}GNF']),
      valor:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
      nsu: stringType.mapFromDatabaseResponse(data['${effectivePrefix}NSU']),
      estorno:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}ESTORNO']),
      rede: stringType.mapFromDatabaseResponse(data['${effectivePrefix}REDE']),
      cartaoDc: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CARTAO_DC']),
      hashRegistro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idPdvVendaCabecalho != null) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho);
    }
    if (!nullToAbsent || idPdvTipoPagamento != null) {
      map['ID_PDV_TIPO_PAGAMENTO'] = Variable<int>(idPdvTipoPagamento);
    }
    if (!nullToAbsent || dataVenda != null) {
      map['DATA_VENDA'] = Variable<DateTime>(dataVenda);
    }
    if (!nullToAbsent || horaVenda != null) {
      map['HORA_VENDA'] = Variable<String>(horaVenda);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || ccf != null) {
      map['CCF'] = Variable<int>(ccf);
    }
    if (!nullToAbsent || gnf != null) {
      map['GNF'] = Variable<int>(gnf);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    if (!nullToAbsent || nsu != null) {
      map['NSU'] = Variable<String>(nsu);
    }
    if (!nullToAbsent || estorno != null) {
      map['ESTORNO'] = Variable<String>(estorno);
    }
    if (!nullToAbsent || rede != null) {
      map['REDE'] = Variable<String>(rede);
    }
    if (!nullToAbsent || cartaoDc != null) {
      map['CARTAO_DC'] = Variable<String>(cartaoDc);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  PdvTotalTipoPagamentosCompanion toCompanion(bool nullToAbsent) {
    return PdvTotalTipoPagamentosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idPdvVendaCabecalho: idPdvVendaCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvVendaCabecalho),
      idPdvTipoPagamento: idPdvTipoPagamento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvTipoPagamento),
      dataVenda: dataVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(dataVenda),
      horaVenda: horaVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(horaVenda),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      ccf: ccf == null && nullToAbsent ? const Value.absent() : Value(ccf),
      gnf: gnf == null && nullToAbsent ? const Value.absent() : Value(gnf),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
      nsu: nsu == null && nullToAbsent ? const Value.absent() : Value(nsu),
      estorno: estorno == null && nullToAbsent
          ? const Value.absent()
          : Value(estorno),
      rede: rede == null && nullToAbsent ? const Value.absent() : Value(rede),
      cartaoDc: cartaoDc == null && nullToAbsent
          ? const Value.absent()
          : Value(cartaoDc),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory PdvTotalTipoPagamento.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvTotalTipoPagamento(
      id: serializer.fromJson<int>(json['id']),
      idPdvVendaCabecalho:
          serializer.fromJson<int>(json['idPdvVendaCabecalho']),
      idPdvTipoPagamento: serializer.fromJson<int>(json['idPdvTipoPagamento']),
      dataVenda: serializer.fromJson<DateTime>(json['dataVenda']),
      horaVenda: serializer.fromJson<String>(json['horaVenda']),
      serieEcf: serializer.fromJson<String>(json['serieEcf']),
      coo: serializer.fromJson<int>(json['coo']),
      ccf: serializer.fromJson<int>(json['ccf']),
      gnf: serializer.fromJson<int>(json['gnf']),
      valor: serializer.fromJson<double>(json['valor']),
      nsu: serializer.fromJson<String>(json['nsu']),
      estorno: serializer.fromJson<String>(json['estorno']),
      rede: serializer.fromJson<String>(json['rede']),
      cartaoDc: serializer.fromJson<String>(json['cartaoDc']),
      hashRegistro: serializer.fromJson<String>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idPdvVendaCabecalho': serializer.toJson<int>(idPdvVendaCabecalho),
      'idPdvTipoPagamento': serializer.toJson<int>(idPdvTipoPagamento),
      'dataVenda': serializer.toJson<DateTime>(dataVenda),
      'horaVenda': serializer.toJson<String>(horaVenda),
      'serieEcf': serializer.toJson<String>(serieEcf),
      'coo': serializer.toJson<int>(coo),
      'ccf': serializer.toJson<int>(ccf),
      'gnf': serializer.toJson<int>(gnf),
      'valor': serializer.toJson<double>(valor),
      'nsu': serializer.toJson<String>(nsu),
      'estorno': serializer.toJson<String>(estorno),
      'rede': serializer.toJson<String>(rede),
      'cartaoDc': serializer.toJson<String>(cartaoDc),
      'hashRegistro': serializer.toJson<String>(hashRegistro),
    };
  }

  PdvTotalTipoPagamento copyWith(
          {int id,
          int idPdvVendaCabecalho,
          int idPdvTipoPagamento,
          DateTime dataVenda,
          String horaVenda,
          String serieEcf,
          int coo,
          int ccf,
          int gnf,
          double valor,
          String nsu,
          String estorno,
          String rede,
          String cartaoDc,
          String hashRegistro}) =>
      PdvTotalTipoPagamento(
        id: id ?? this.id,
        idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
        idPdvTipoPagamento: idPdvTipoPagamento ?? this.idPdvTipoPagamento,
        dataVenda: dataVenda ?? this.dataVenda,
        horaVenda: horaVenda ?? this.horaVenda,
        serieEcf: serieEcf ?? this.serieEcf,
        coo: coo ?? this.coo,
        ccf: ccf ?? this.ccf,
        gnf: gnf ?? this.gnf,
        valor: valor ?? this.valor,
        nsu: nsu ?? this.nsu,
        estorno: estorno ?? this.estorno,
        rede: rede ?? this.rede,
        cartaoDc: cartaoDc ?? this.cartaoDc,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('PdvTotalTipoPagamento(')
          ..write('id: $id, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('idPdvTipoPagamento: $idPdvTipoPagamento, ')
          ..write('dataVenda: $dataVenda, ')
          ..write('horaVenda: $horaVenda, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('coo: $coo, ')
          ..write('ccf: $ccf, ')
          ..write('gnf: $gnf, ')
          ..write('valor: $valor, ')
          ..write('nsu: $nsu, ')
          ..write('estorno: $estorno, ')
          ..write('rede: $rede, ')
          ..write('cartaoDc: $cartaoDc, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idPdvVendaCabecalho.hashCode,
          $mrjc(
              idPdvTipoPagamento.hashCode,
              $mrjc(
                  dataVenda.hashCode,
                  $mrjc(
                      horaVenda.hashCode,
                      $mrjc(
                          serieEcf.hashCode,
                          $mrjc(
                              coo.hashCode,
                              $mrjc(
                                  ccf.hashCode,
                                  $mrjc(
                                      gnf.hashCode,
                                      $mrjc(
                                          valor.hashCode,
                                          $mrjc(
                                              nsu.hashCode,
                                              $mrjc(
                                                  estorno.hashCode,
                                                  $mrjc(
                                                      rede.hashCode,
                                                      $mrjc(
                                                          cartaoDc.hashCode,
                                                          hashRegistro
                                                              .hashCode)))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvTotalTipoPagamento &&
          other.id == this.id &&
          other.idPdvVendaCabecalho == this.idPdvVendaCabecalho &&
          other.idPdvTipoPagamento == this.idPdvTipoPagamento &&
          other.dataVenda == this.dataVenda &&
          other.horaVenda == this.horaVenda &&
          other.serieEcf == this.serieEcf &&
          other.coo == this.coo &&
          other.ccf == this.ccf &&
          other.gnf == this.gnf &&
          other.valor == this.valor &&
          other.nsu == this.nsu &&
          other.estorno == this.estorno &&
          other.rede == this.rede &&
          other.cartaoDc == this.cartaoDc &&
          other.hashRegistro == this.hashRegistro);
}

class PdvTotalTipoPagamentosCompanion
    extends UpdateCompanion<PdvTotalTipoPagamento> {
  final Value<int> id;
  final Value<int> idPdvVendaCabecalho;
  final Value<int> idPdvTipoPagamento;
  final Value<DateTime> dataVenda;
  final Value<String> horaVenda;
  final Value<String> serieEcf;
  final Value<int> coo;
  final Value<int> ccf;
  final Value<int> gnf;
  final Value<double> valor;
  final Value<String> nsu;
  final Value<String> estorno;
  final Value<String> rede;
  final Value<String> cartaoDc;
  final Value<String> hashRegistro;
  const PdvTotalTipoPagamentosCompanion({
    this.id = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.idPdvTipoPagamento = const Value.absent(),
    this.dataVenda = const Value.absent(),
    this.horaVenda = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.ccf = const Value.absent(),
    this.gnf = const Value.absent(),
    this.valor = const Value.absent(),
    this.nsu = const Value.absent(),
    this.estorno = const Value.absent(),
    this.rede = const Value.absent(),
    this.cartaoDc = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  PdvTotalTipoPagamentosCompanion.insert({
    this.id = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.idPdvTipoPagamento = const Value.absent(),
    this.dataVenda = const Value.absent(),
    this.horaVenda = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.coo = const Value.absent(),
    this.ccf = const Value.absent(),
    this.gnf = const Value.absent(),
    this.valor = const Value.absent(),
    this.nsu = const Value.absent(),
    this.estorno = const Value.absent(),
    this.rede = const Value.absent(),
    this.cartaoDc = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<PdvTotalTipoPagamento> custom({
    Expression<int> id,
    Expression<int> idPdvVendaCabecalho,
    Expression<int> idPdvTipoPagamento,
    Expression<DateTime> dataVenda,
    Expression<String> horaVenda,
    Expression<String> serieEcf,
    Expression<int> coo,
    Expression<int> ccf,
    Expression<int> gnf,
    Expression<double> valor,
    Expression<String> nsu,
    Expression<String> estorno,
    Expression<String> rede,
    Expression<String> cartaoDc,
    Expression<String> hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idPdvVendaCabecalho != null)
        'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
      if (idPdvTipoPagamento != null)
        'ID_PDV_TIPO_PAGAMENTO': idPdvTipoPagamento,
      if (dataVenda != null) 'DATA_VENDA': dataVenda,
      if (horaVenda != null) 'HORA_VENDA': horaVenda,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (coo != null) 'COO': coo,
      if (ccf != null) 'CCF': ccf,
      if (gnf != null) 'GNF': gnf,
      if (valor != null) 'VALOR': valor,
      if (nsu != null) 'NSU': nsu,
      if (estorno != null) 'ESTORNO': estorno,
      if (rede != null) 'REDE': rede,
      if (cartaoDc != null) 'CARTAO_DC': cartaoDc,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  PdvTotalTipoPagamentosCompanion copyWith(
      {Value<int> id,
      Value<int> idPdvVendaCabecalho,
      Value<int> idPdvTipoPagamento,
      Value<DateTime> dataVenda,
      Value<String> horaVenda,
      Value<String> serieEcf,
      Value<int> coo,
      Value<int> ccf,
      Value<int> gnf,
      Value<double> valor,
      Value<String> nsu,
      Value<String> estorno,
      Value<String> rede,
      Value<String> cartaoDc,
      Value<String> hashRegistro}) {
    return PdvTotalTipoPagamentosCompanion(
      id: id ?? this.id,
      idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
      idPdvTipoPagamento: idPdvTipoPagamento ?? this.idPdvTipoPagamento,
      dataVenda: dataVenda ?? this.dataVenda,
      horaVenda: horaVenda ?? this.horaVenda,
      serieEcf: serieEcf ?? this.serieEcf,
      coo: coo ?? this.coo,
      ccf: ccf ?? this.ccf,
      gnf: gnf ?? this.gnf,
      valor: valor ?? this.valor,
      nsu: nsu ?? this.nsu,
      estorno: estorno ?? this.estorno,
      rede: rede ?? this.rede,
      cartaoDc: cartaoDc ?? this.cartaoDc,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idPdvVendaCabecalho.present) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho.value);
    }
    if (idPdvTipoPagamento.present) {
      map['ID_PDV_TIPO_PAGAMENTO'] = Variable<int>(idPdvTipoPagamento.value);
    }
    if (dataVenda.present) {
      map['DATA_VENDA'] = Variable<DateTime>(dataVenda.value);
    }
    if (horaVenda.present) {
      map['HORA_VENDA'] = Variable<String>(horaVenda.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (ccf.present) {
      map['CCF'] = Variable<int>(ccf.value);
    }
    if (gnf.present) {
      map['GNF'] = Variable<int>(gnf.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    if (nsu.present) {
      map['NSU'] = Variable<String>(nsu.value);
    }
    if (estorno.present) {
      map['ESTORNO'] = Variable<String>(estorno.value);
    }
    if (rede.present) {
      map['REDE'] = Variable<String>(rede.value);
    }
    if (cartaoDc.present) {
      map['CARTAO_DC'] = Variable<String>(cartaoDc.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvTotalTipoPagamentosCompanion(')
          ..write('id: $id, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('idPdvTipoPagamento: $idPdvTipoPagamento, ')
          ..write('dataVenda: $dataVenda, ')
          ..write('horaVenda: $horaVenda, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('coo: $coo, ')
          ..write('ccf: $ccf, ')
          ..write('gnf: $gnf, ')
          ..write('valor: $valor, ')
          ..write('nsu: $nsu, ')
          ..write('estorno: $estorno, ')
          ..write('rede: $rede, ')
          ..write('cartaoDc: $cartaoDc, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $PdvTotalTipoPagamentosTable extends PdvTotalTipoPagamentos
    with TableInfo<$PdvTotalTipoPagamentosTable, PdvTotalTipoPagamento> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvTotalTipoPagamentosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idPdvVendaCabecalhoMeta =
      const VerificationMeta('idPdvVendaCabecalho');
  GeneratedIntColumn _idPdvVendaCabecalho;
  @override
  GeneratedIntColumn get idPdvVendaCabecalho =>
      _idPdvVendaCabecalho ??= _constructIdPdvVendaCabecalho();
  GeneratedIntColumn _constructIdPdvVendaCabecalho() {
    return GeneratedIntColumn('ID_PDV_VENDA_CABECALHO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
  }

  final VerificationMeta _idPdvTipoPagamentoMeta =
      const VerificationMeta('idPdvTipoPagamento');
  GeneratedIntColumn _idPdvTipoPagamento;
  @override
  GeneratedIntColumn get idPdvTipoPagamento =>
      _idPdvTipoPagamento ??= _constructIdPdvTipoPagamento();
  GeneratedIntColumn _constructIdPdvTipoPagamento() {
    return GeneratedIntColumn('ID_PDV_TIPO_PAGAMENTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_TIPO_PAGAMENTO(ID)');
  }

  final VerificationMeta _dataVendaMeta = const VerificationMeta('dataVenda');
  GeneratedDateTimeColumn _dataVenda;
  @override
  GeneratedDateTimeColumn get dataVenda => _dataVenda ??= _constructDataVenda();
  GeneratedDateTimeColumn _constructDataVenda() {
    return GeneratedDateTimeColumn(
      'DATA_VENDA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaVendaMeta = const VerificationMeta('horaVenda');
  GeneratedTextColumn _horaVenda;
  @override
  GeneratedTextColumn get horaVenda => _horaVenda ??= _constructHoraVenda();
  GeneratedTextColumn _constructHoraVenda() {
    return GeneratedTextColumn('HORA_VENDA', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  GeneratedTextColumn _serieEcf;
  @override
  GeneratedTextColumn get serieEcf => _serieEcf ??= _constructSerieEcf();
  GeneratedTextColumn _constructSerieEcf() {
    return GeneratedTextColumn('SERIE_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  GeneratedIntColumn _coo;
  @override
  GeneratedIntColumn get coo => _coo ??= _constructCoo();
  GeneratedIntColumn _constructCoo() {
    return GeneratedIntColumn(
      'COO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
  GeneratedIntColumn _ccf;
  @override
  GeneratedIntColumn get ccf => _ccf ??= _constructCcf();
  GeneratedIntColumn _constructCcf() {
    return GeneratedIntColumn(
      'CCF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _gnfMeta = const VerificationMeta('gnf');
  GeneratedIntColumn _gnf;
  @override
  GeneratedIntColumn get gnf => _gnf ??= _constructGnf();
  GeneratedIntColumn _constructGnf() {
    return GeneratedIntColumn(
      'GNF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  GeneratedRealColumn _valor;
  @override
  GeneratedRealColumn get valor => _valor ??= _constructValor();
  GeneratedRealColumn _constructValor() {
    return GeneratedRealColumn(
      'VALOR',
      $tableName,
      true,
    );
  }

  final VerificationMeta _nsuMeta = const VerificationMeta('nsu');
  GeneratedTextColumn _nsu;
  @override
  GeneratedTextColumn get nsu => _nsu ??= _constructNsu();
  GeneratedTextColumn _constructNsu() {
    return GeneratedTextColumn('NSU', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _estornoMeta = const VerificationMeta('estorno');
  GeneratedTextColumn _estorno;
  @override
  GeneratedTextColumn get estorno => _estorno ??= _constructEstorno();
  GeneratedTextColumn _constructEstorno() {
    return GeneratedTextColumn('ESTORNO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _redeMeta = const VerificationMeta('rede');
  GeneratedTextColumn _rede;
  @override
  GeneratedTextColumn get rede => _rede ??= _constructRede();
  GeneratedTextColumn _constructRede() {
    return GeneratedTextColumn('REDE', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _cartaoDcMeta = const VerificationMeta('cartaoDc');
  GeneratedTextColumn _cartaoDc;
  @override
  GeneratedTextColumn get cartaoDc => _cartaoDc ??= _constructCartaoDc();
  GeneratedTextColumn _constructCartaoDc() {
    return GeneratedTextColumn('CARTAO_DC', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  GeneratedTextColumn _hashRegistro;
  @override
  GeneratedTextColumn get hashRegistro =>
      _hashRegistro ??= _constructHashRegistro();
  GeneratedTextColumn _constructHashRegistro() {
    return GeneratedTextColumn('HASH_REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idPdvVendaCabecalho,
        idPdvTipoPagamento,
        dataVenda,
        horaVenda,
        serieEcf,
        coo,
        ccf,
        gnf,
        valor,
        nsu,
        estorno,
        rede,
        cartaoDc,
        hashRegistro
      ];
  @override
  $PdvTotalTipoPagamentosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_TOTAL_TIPO_PAGAMENTO';
  @override
  final String actualTableName = 'PDV_TOTAL_TIPO_PAGAMENTO';
  @override
  VerificationContext validateIntegrity(
      Insertable<PdvTotalTipoPagamento> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
      context.handle(
          _idPdvVendaCabecalhoMeta,
          idPdvVendaCabecalho.isAcceptableOrUnknown(
              data['ID_PDV_VENDA_CABECALHO'], _idPdvVendaCabecalhoMeta));
    }
    if (data.containsKey('ID_PDV_TIPO_PAGAMENTO')) {
      context.handle(
          _idPdvTipoPagamentoMeta,
          idPdvTipoPagamento.isAcceptableOrUnknown(
              data['ID_PDV_TIPO_PAGAMENTO'], _idPdvTipoPagamentoMeta));
    }
    if (data.containsKey('DATA_VENDA')) {
      context.handle(_dataVendaMeta,
          dataVenda.isAcceptableOrUnknown(data['DATA_VENDA'], _dataVendaMeta));
    }
    if (data.containsKey('HORA_VENDA')) {
      context.handle(_horaVendaMeta,
          horaVenda.isAcceptableOrUnknown(data['HORA_VENDA'], _horaVendaMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF'], _serieEcfMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO'], _cooMeta));
    }
    if (data.containsKey('CCF')) {
      context.handle(
          _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF'], _ccfMeta));
    }
    if (data.containsKey('GNF')) {
      context.handle(
          _gnfMeta, gnf.isAcceptableOrUnknown(data['GNF'], _gnfMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR'], _valorMeta));
    }
    if (data.containsKey('NSU')) {
      context.handle(
          _nsuMeta, nsu.isAcceptableOrUnknown(data['NSU'], _nsuMeta));
    }
    if (data.containsKey('ESTORNO')) {
      context.handle(_estornoMeta,
          estorno.isAcceptableOrUnknown(data['ESTORNO'], _estornoMeta));
    }
    if (data.containsKey('REDE')) {
      context.handle(
          _redeMeta, rede.isAcceptableOrUnknown(data['REDE'], _redeMeta));
    }
    if (data.containsKey('CARTAO_DC')) {
      context.handle(_cartaoDcMeta,
          cartaoDc.isAcceptableOrUnknown(data['CARTAO_DC'], _cartaoDcMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO'], _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvTotalTipoPagamento map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvTotalTipoPagamento.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvTotalTipoPagamentosTable createAlias(String alias) {
    return $PdvTotalTipoPagamentosTable(_db, alias);
  }
}

class PdvVendaCabecalho extends DataClass
    implements Insertable<PdvVendaCabecalho> {
  final int id;
  final int idCliente;
  final int idColaborador;
  final int idPdvMovimento;
  final int idEcfDav;
  final int idEcfPreVendaCabecalho;
  final String serieEcf;
  final int cfop;
  final int coo;
  final int ccf;
  final DateTime dataVenda;
  final String horaVenda;
  final double valorVenda;
  final double taxaDesconto;
  final double valorDesconto;
  final double taxaAcrescimo;
  final double valorAcrescimo;
  final double valorFinal;
  final double valorRecebido;
  final double valorTroco;
  final double valorCancelado;
  final double valorTotalProdutos;
  final double valorTotalDocumento;
  final double valorBaseIcms;
  final double valorIcms;
  final double valorIcmsOutras;
  final double valorIssqn;
  final double valorPis;
  final double valorCofins;
  final double valorAcrescimoItens;
  final double valorDescontoItens;
  final String statusVenda;
  final String nomeCliente;
  final String cpfCnpjCliente;
  final String cupomCancelado;
  final String hashRegistro;
  PdvVendaCabecalho(
      {@required this.id,
      this.idCliente,
      this.idColaborador,
      this.idPdvMovimento,
      this.idEcfDav,
      this.idEcfPreVendaCabecalho,
      this.serieEcf,
      this.cfop,
      this.coo,
      this.ccf,
      this.dataVenda,
      this.horaVenda,
      this.valorVenda,
      this.taxaDesconto,
      this.valorDesconto,
      this.taxaAcrescimo,
      this.valorAcrescimo,
      this.valorFinal,
      this.valorRecebido,
      this.valorTroco,
      this.valorCancelado,
      this.valorTotalProdutos,
      this.valorTotalDocumento,
      this.valorBaseIcms,
      this.valorIcms,
      this.valorIcmsOutras,
      this.valorIssqn,
      this.valorPis,
      this.valorCofins,
      this.valorAcrescimoItens,
      this.valorDescontoItens,
      this.statusVenda,
      this.nomeCliente,
      this.cpfCnpjCliente,
      this.cupomCancelado,
      this.hashRegistro});
  factory PdvVendaCabecalho.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final doubleType = db.typeSystem.forDartType<double>();
    return PdvVendaCabecalho(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idCliente:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}ID_CLIENTE']),
      idColaborador: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_COLABORADOR']),
      idPdvMovimento: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PDV_MOVIMENTO']),
      idEcfDav:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}ID_ECF_DAV']),
      idEcfPreVendaCabecalho: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_ECF_PRE_VENDA_CABECALHO']),
      serieEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
      cfop: intType.mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
      coo: intType.mapFromDatabaseResponse(data['${effectivePrefix}COO']),
      ccf: intType.mapFromDatabaseResponse(data['${effectivePrefix}CCF']),
      dataVenda: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_VENDA']),
      horaVenda: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HORA_VENDA']),
      valorVenda: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_VENDA']),
      taxaDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
      valorDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
      taxaAcrescimo: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ACRESCIMO']),
      valorAcrescimo: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ACRESCIMO']),
      valorFinal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_FINAL']),
      valorRecebido: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_RECEBIDO']),
      valorTroco: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TROCO']),
      valorCancelado: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_CANCELADO']),
      valorTotalProdutos: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}VALOR_TOTAL_PRODUTOS']),
      valorTotalDocumento: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}VALOR_TOTAL_DOCUMENTO']),
      valorBaseIcms: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_BASE_ICMS']),
      valorIcms: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS']),
      valorIcmsOutras: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS_OUTRAS']),
      valorIssqn: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ISSQN']),
      valorPis: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PIS']),
      valorCofins: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_COFINS']),
      valorAcrescimoItens: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}VALOR_ACRESCIMO_ITENS']),
      valorDescontoItens: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}VALOR_DESCONTO_ITENS']),
      statusVenda: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}STATUS_VENDA']),
      nomeCliente: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}NOME_CLIENTE']),
      cpfCnpjCliente: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CPF_CNPJ_CLIENTE']),
      cupomCancelado: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CUPOM_CANCELADO']),
      hashRegistro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idCliente != null) {
      map['ID_CLIENTE'] = Variable<int>(idCliente);
    }
    if (!nullToAbsent || idColaborador != null) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador);
    }
    if (!nullToAbsent || idPdvMovimento != null) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento);
    }
    if (!nullToAbsent || idEcfDav != null) {
      map['ID_ECF_DAV'] = Variable<int>(idEcfDav);
    }
    if (!nullToAbsent || idEcfPreVendaCabecalho != null) {
      map['ID_ECF_PRE_VENDA_CABECALHO'] = Variable<int>(idEcfPreVendaCabecalho);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || ccf != null) {
      map['CCF'] = Variable<int>(ccf);
    }
    if (!nullToAbsent || dataVenda != null) {
      map['DATA_VENDA'] = Variable<DateTime>(dataVenda);
    }
    if (!nullToAbsent || horaVenda != null) {
      map['HORA_VENDA'] = Variable<String>(horaVenda);
    }
    if (!nullToAbsent || valorVenda != null) {
      map['VALOR_VENDA'] = Variable<double>(valorVenda);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || taxaAcrescimo != null) {
      map['TAXA_ACRESCIMO'] = Variable<double>(taxaAcrescimo);
    }
    if (!nullToAbsent || valorAcrescimo != null) {
      map['VALOR_ACRESCIMO'] = Variable<double>(valorAcrescimo);
    }
    if (!nullToAbsent || valorFinal != null) {
      map['VALOR_FINAL'] = Variable<double>(valorFinal);
    }
    if (!nullToAbsent || valorRecebido != null) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido);
    }
    if (!nullToAbsent || valorTroco != null) {
      map['VALOR_TROCO'] = Variable<double>(valorTroco);
    }
    if (!nullToAbsent || valorCancelado != null) {
      map['VALOR_CANCELADO'] = Variable<double>(valorCancelado);
    }
    if (!nullToAbsent || valorTotalProdutos != null) {
      map['VALOR_TOTAL_PRODUTOS'] = Variable<double>(valorTotalProdutos);
    }
    if (!nullToAbsent || valorTotalDocumento != null) {
      map['VALOR_TOTAL_DOCUMENTO'] = Variable<double>(valorTotalDocumento);
    }
    if (!nullToAbsent || valorBaseIcms != null) {
      map['VALOR_BASE_ICMS'] = Variable<double>(valorBaseIcms);
    }
    if (!nullToAbsent || valorIcms != null) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms);
    }
    if (!nullToAbsent || valorIcmsOutras != null) {
      map['VALOR_ICMS_OUTRAS'] = Variable<double>(valorIcmsOutras);
    }
    if (!nullToAbsent || valorIssqn != null) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn);
    }
    if (!nullToAbsent || valorPis != null) {
      map['VALOR_PIS'] = Variable<double>(valorPis);
    }
    if (!nullToAbsent || valorCofins != null) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins);
    }
    if (!nullToAbsent || valorAcrescimoItens != null) {
      map['VALOR_ACRESCIMO_ITENS'] = Variable<double>(valorAcrescimoItens);
    }
    if (!nullToAbsent || valorDescontoItens != null) {
      map['VALOR_DESCONTO_ITENS'] = Variable<double>(valorDescontoItens);
    }
    if (!nullToAbsent || statusVenda != null) {
      map['STATUS_VENDA'] = Variable<String>(statusVenda);
    }
    if (!nullToAbsent || nomeCliente != null) {
      map['NOME_CLIENTE'] = Variable<String>(nomeCliente);
    }
    if (!nullToAbsent || cpfCnpjCliente != null) {
      map['CPF_CNPJ_CLIENTE'] = Variable<String>(cpfCnpjCliente);
    }
    if (!nullToAbsent || cupomCancelado != null) {
      map['CUPOM_CANCELADO'] = Variable<String>(cupomCancelado);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  PdvVendaCabecalhosCompanion toCompanion(bool nullToAbsent) {
    return PdvVendaCabecalhosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idCliente: idCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(idCliente),
      idColaborador: idColaborador == null && nullToAbsent
          ? const Value.absent()
          : Value(idColaborador),
      idPdvMovimento: idPdvMovimento == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvMovimento),
      idEcfDav: idEcfDav == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfDav),
      idEcfPreVendaCabecalho: idEcfPreVendaCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idEcfPreVendaCabecalho),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      ccf: ccf == null && nullToAbsent ? const Value.absent() : Value(ccf),
      dataVenda: dataVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(dataVenda),
      horaVenda: horaVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(horaVenda),
      valorVenda: valorVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(valorVenda),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      taxaAcrescimo: taxaAcrescimo == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaAcrescimo),
      valorAcrescimo: valorAcrescimo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAcrescimo),
      valorFinal: valorFinal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorFinal),
      valorRecebido: valorRecebido == null && nullToAbsent
          ? const Value.absent()
          : Value(valorRecebido),
      valorTroco: valorTroco == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTroco),
      valorCancelado: valorCancelado == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCancelado),
      valorTotalProdutos: valorTotalProdutos == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalProdutos),
      valorTotalDocumento: valorTotalDocumento == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalDocumento),
      valorBaseIcms: valorBaseIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBaseIcms),
      valorIcms: valorIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcms),
      valorIcmsOutras: valorIcmsOutras == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcmsOutras),
      valorIssqn: valorIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIssqn),
      valorPis: valorPis == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPis),
      valorCofins: valorCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCofins),
      valorAcrescimoItens: valorAcrescimoItens == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAcrescimoItens),
      valorDescontoItens: valorDescontoItens == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDescontoItens),
      statusVenda: statusVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(statusVenda),
      nomeCliente: nomeCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(nomeCliente),
      cpfCnpjCliente: cpfCnpjCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(cpfCnpjCliente),
      cupomCancelado: cupomCancelado == null && nullToAbsent
          ? const Value.absent()
          : Value(cupomCancelado),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory PdvVendaCabecalho.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvVendaCabecalho(
      id: serializer.fromJson<int>(json['id']),
      idCliente: serializer.fromJson<int>(json['idCliente']),
      idColaborador: serializer.fromJson<int>(json['idColaborador']),
      idPdvMovimento: serializer.fromJson<int>(json['idPdvMovimento']),
      idEcfDav: serializer.fromJson<int>(json['idEcfDav']),
      idEcfPreVendaCabecalho:
          serializer.fromJson<int>(json['idEcfPreVendaCabecalho']),
      serieEcf: serializer.fromJson<String>(json['serieEcf']),
      cfop: serializer.fromJson<int>(json['cfop']),
      coo: serializer.fromJson<int>(json['coo']),
      ccf: serializer.fromJson<int>(json['ccf']),
      dataVenda: serializer.fromJson<DateTime>(json['dataVenda']),
      horaVenda: serializer.fromJson<String>(json['horaVenda']),
      valorVenda: serializer.fromJson<double>(json['valorVenda']),
      taxaDesconto: serializer.fromJson<double>(json['taxaDesconto']),
      valorDesconto: serializer.fromJson<double>(json['valorDesconto']),
      taxaAcrescimo: serializer.fromJson<double>(json['taxaAcrescimo']),
      valorAcrescimo: serializer.fromJson<double>(json['valorAcrescimo']),
      valorFinal: serializer.fromJson<double>(json['valorFinal']),
      valorRecebido: serializer.fromJson<double>(json['valorRecebido']),
      valorTroco: serializer.fromJson<double>(json['valorTroco']),
      valorCancelado: serializer.fromJson<double>(json['valorCancelado']),
      valorTotalProdutos:
          serializer.fromJson<double>(json['valorTotalProdutos']),
      valorTotalDocumento:
          serializer.fromJson<double>(json['valorTotalDocumento']),
      valorBaseIcms: serializer.fromJson<double>(json['valorBaseIcms']),
      valorIcms: serializer.fromJson<double>(json['valorIcms']),
      valorIcmsOutras: serializer.fromJson<double>(json['valorIcmsOutras']),
      valorIssqn: serializer.fromJson<double>(json['valorIssqn']),
      valorPis: serializer.fromJson<double>(json['valorPis']),
      valorCofins: serializer.fromJson<double>(json['valorCofins']),
      valorAcrescimoItens:
          serializer.fromJson<double>(json['valorAcrescimoItens']),
      valorDescontoItens:
          serializer.fromJson<double>(json['valorDescontoItens']),
      statusVenda: serializer.fromJson<String>(json['statusVenda']),
      nomeCliente: serializer.fromJson<String>(json['nomeCliente']),
      cpfCnpjCliente: serializer.fromJson<String>(json['cpfCnpjCliente']),
      cupomCancelado: serializer.fromJson<String>(json['cupomCancelado']),
      hashRegistro: serializer.fromJson<String>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idCliente': serializer.toJson<int>(idCliente),
      'idColaborador': serializer.toJson<int>(idColaborador),
      'idPdvMovimento': serializer.toJson<int>(idPdvMovimento),
      'idEcfDav': serializer.toJson<int>(idEcfDav),
      'idEcfPreVendaCabecalho': serializer.toJson<int>(idEcfPreVendaCabecalho),
      'serieEcf': serializer.toJson<String>(serieEcf),
      'cfop': serializer.toJson<int>(cfop),
      'coo': serializer.toJson<int>(coo),
      'ccf': serializer.toJson<int>(ccf),
      'dataVenda': serializer.toJson<DateTime>(dataVenda),
      'horaVenda': serializer.toJson<String>(horaVenda),
      'valorVenda': serializer.toJson<double>(valorVenda),
      'taxaDesconto': serializer.toJson<double>(taxaDesconto),
      'valorDesconto': serializer.toJson<double>(valorDesconto),
      'taxaAcrescimo': serializer.toJson<double>(taxaAcrescimo),
      'valorAcrescimo': serializer.toJson<double>(valorAcrescimo),
      'valorFinal': serializer.toJson<double>(valorFinal),
      'valorRecebido': serializer.toJson<double>(valorRecebido),
      'valorTroco': serializer.toJson<double>(valorTroco),
      'valorCancelado': serializer.toJson<double>(valorCancelado),
      'valorTotalProdutos': serializer.toJson<double>(valorTotalProdutos),
      'valorTotalDocumento': serializer.toJson<double>(valorTotalDocumento),
      'valorBaseIcms': serializer.toJson<double>(valorBaseIcms),
      'valorIcms': serializer.toJson<double>(valorIcms),
      'valorIcmsOutras': serializer.toJson<double>(valorIcmsOutras),
      'valorIssqn': serializer.toJson<double>(valorIssqn),
      'valorPis': serializer.toJson<double>(valorPis),
      'valorCofins': serializer.toJson<double>(valorCofins),
      'valorAcrescimoItens': serializer.toJson<double>(valorAcrescimoItens),
      'valorDescontoItens': serializer.toJson<double>(valorDescontoItens),
      'statusVenda': serializer.toJson<String>(statusVenda),
      'nomeCliente': serializer.toJson<String>(nomeCliente),
      'cpfCnpjCliente': serializer.toJson<String>(cpfCnpjCliente),
      'cupomCancelado': serializer.toJson<String>(cupomCancelado),
      'hashRegistro': serializer.toJson<String>(hashRegistro),
    };
  }

  PdvVendaCabecalho copyWith(
          {int id,
          int idCliente,
          int idColaborador,
          int idPdvMovimento,
          int idEcfDav,
          int idEcfPreVendaCabecalho,
          String serieEcf,
          int cfop,
          int coo,
          int ccf,
          DateTime dataVenda,
          String horaVenda,
          double valorVenda,
          double taxaDesconto,
          double valorDesconto,
          double taxaAcrescimo,
          double valorAcrescimo,
          double valorFinal,
          double valorRecebido,
          double valorTroco,
          double valorCancelado,
          double valorTotalProdutos,
          double valorTotalDocumento,
          double valorBaseIcms,
          double valorIcms,
          double valorIcmsOutras,
          double valorIssqn,
          double valorPis,
          double valorCofins,
          double valorAcrescimoItens,
          double valorDescontoItens,
          String statusVenda,
          String nomeCliente,
          String cpfCnpjCliente,
          String cupomCancelado,
          String hashRegistro}) =>
      PdvVendaCabecalho(
        id: id ?? this.id,
        idCliente: idCliente ?? this.idCliente,
        idColaborador: idColaborador ?? this.idColaborador,
        idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
        idEcfDav: idEcfDav ?? this.idEcfDav,
        idEcfPreVendaCabecalho:
            idEcfPreVendaCabecalho ?? this.idEcfPreVendaCabecalho,
        serieEcf: serieEcf ?? this.serieEcf,
        cfop: cfop ?? this.cfop,
        coo: coo ?? this.coo,
        ccf: ccf ?? this.ccf,
        dataVenda: dataVenda ?? this.dataVenda,
        horaVenda: horaVenda ?? this.horaVenda,
        valorVenda: valorVenda ?? this.valorVenda,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        taxaAcrescimo: taxaAcrescimo ?? this.taxaAcrescimo,
        valorAcrescimo: valorAcrescimo ?? this.valorAcrescimo,
        valorFinal: valorFinal ?? this.valorFinal,
        valorRecebido: valorRecebido ?? this.valorRecebido,
        valorTroco: valorTroco ?? this.valorTroco,
        valorCancelado: valorCancelado ?? this.valorCancelado,
        valorTotalProdutos: valorTotalProdutos ?? this.valorTotalProdutos,
        valorTotalDocumento: valorTotalDocumento ?? this.valorTotalDocumento,
        valorBaseIcms: valorBaseIcms ?? this.valorBaseIcms,
        valorIcms: valorIcms ?? this.valorIcms,
        valorIcmsOutras: valorIcmsOutras ?? this.valorIcmsOutras,
        valorIssqn: valorIssqn ?? this.valorIssqn,
        valorPis: valorPis ?? this.valorPis,
        valorCofins: valorCofins ?? this.valorCofins,
        valorAcrescimoItens: valorAcrescimoItens ?? this.valorAcrescimoItens,
        valorDescontoItens: valorDescontoItens ?? this.valorDescontoItens,
        statusVenda: statusVenda ?? this.statusVenda,
        nomeCliente: nomeCliente ?? this.nomeCliente,
        cpfCnpjCliente: cpfCnpjCliente ?? this.cpfCnpjCliente,
        cupomCancelado: cupomCancelado ?? this.cupomCancelado,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('PdvVendaCabecalho(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('idEcfDav: $idEcfDav, ')
          ..write('idEcfPreVendaCabecalho: $idEcfPreVendaCabecalho, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('cfop: $cfop, ')
          ..write('coo: $coo, ')
          ..write('ccf: $ccf, ')
          ..write('dataVenda: $dataVenda, ')
          ..write('horaVenda: $horaVenda, ')
          ..write('valorVenda: $valorVenda, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('taxaAcrescimo: $taxaAcrescimo, ')
          ..write('valorAcrescimo: $valorAcrescimo, ')
          ..write('valorFinal: $valorFinal, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('valorTroco: $valorTroco, ')
          ..write('valorCancelado: $valorCancelado, ')
          ..write('valorTotalProdutos: $valorTotalProdutos, ')
          ..write('valorTotalDocumento: $valorTotalDocumento, ')
          ..write('valorBaseIcms: $valorBaseIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('valorIcmsOutras: $valorIcmsOutras, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('valorPis: $valorPis, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('valorAcrescimoItens: $valorAcrescimoItens, ')
          ..write('valorDescontoItens: $valorDescontoItens, ')
          ..write('statusVenda: $statusVenda, ')
          ..write('nomeCliente: $nomeCliente, ')
          ..write('cpfCnpjCliente: $cpfCnpjCliente, ')
          ..write('cupomCancelado: $cupomCancelado, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idCliente.hashCode,
          $mrjc(
              idColaborador.hashCode,
              $mrjc(
                  idPdvMovimento.hashCode,
                  $mrjc(
                      idEcfDav.hashCode,
                      $mrjc(
                          idEcfPreVendaCabecalho.hashCode,
                          $mrjc(
                              serieEcf.hashCode,
                              $mrjc(
                                  cfop.hashCode,
                                  $mrjc(
                                      coo.hashCode,
                                      $mrjc(
                                          ccf.hashCode,
                                          $mrjc(
                                              dataVenda.hashCode,
                                              $mrjc(
                                                  horaVenda.hashCode,
                                                  $mrjc(
                                                      valorVenda.hashCode,
                                                      $mrjc(
                                                          taxaDesconto.hashCode,
                                                          $mrjc(
                                                              valorDesconto
                                                                  .hashCode,
                                                              $mrjc(
                                                                  taxaAcrescimo
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      valorAcrescimo
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          valorFinal
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              valorRecebido.hashCode,
                                                                              $mrjc(valorTroco.hashCode, $mrjc(valorCancelado.hashCode, $mrjc(valorTotalProdutos.hashCode, $mrjc(valorTotalDocumento.hashCode, $mrjc(valorBaseIcms.hashCode, $mrjc(valorIcms.hashCode, $mrjc(valorIcmsOutras.hashCode, $mrjc(valorIssqn.hashCode, $mrjc(valorPis.hashCode, $mrjc(valorCofins.hashCode, $mrjc(valorAcrescimoItens.hashCode, $mrjc(valorDescontoItens.hashCode, $mrjc(statusVenda.hashCode, $mrjc(nomeCliente.hashCode, $mrjc(cpfCnpjCliente.hashCode, $mrjc(cupomCancelado.hashCode, hashRegistro.hashCode))))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvVendaCabecalho &&
          other.id == this.id &&
          other.idCliente == this.idCliente &&
          other.idColaborador == this.idColaborador &&
          other.idPdvMovimento == this.idPdvMovimento &&
          other.idEcfDav == this.idEcfDav &&
          other.idEcfPreVendaCabecalho == this.idEcfPreVendaCabecalho &&
          other.serieEcf == this.serieEcf &&
          other.cfop == this.cfop &&
          other.coo == this.coo &&
          other.ccf == this.ccf &&
          other.dataVenda == this.dataVenda &&
          other.horaVenda == this.horaVenda &&
          other.valorVenda == this.valorVenda &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorDesconto == this.valorDesconto &&
          other.taxaAcrescimo == this.taxaAcrescimo &&
          other.valorAcrescimo == this.valorAcrescimo &&
          other.valorFinal == this.valorFinal &&
          other.valorRecebido == this.valorRecebido &&
          other.valorTroco == this.valorTroco &&
          other.valorCancelado == this.valorCancelado &&
          other.valorTotalProdutos == this.valorTotalProdutos &&
          other.valorTotalDocumento == this.valorTotalDocumento &&
          other.valorBaseIcms == this.valorBaseIcms &&
          other.valorIcms == this.valorIcms &&
          other.valorIcmsOutras == this.valorIcmsOutras &&
          other.valorIssqn == this.valorIssqn &&
          other.valorPis == this.valorPis &&
          other.valorCofins == this.valorCofins &&
          other.valorAcrescimoItens == this.valorAcrescimoItens &&
          other.valorDescontoItens == this.valorDescontoItens &&
          other.statusVenda == this.statusVenda &&
          other.nomeCliente == this.nomeCliente &&
          other.cpfCnpjCliente == this.cpfCnpjCliente &&
          other.cupomCancelado == this.cupomCancelado &&
          other.hashRegistro == this.hashRegistro);
}

class PdvVendaCabecalhosCompanion extends UpdateCompanion<PdvVendaCabecalho> {
  final Value<int> id;
  final Value<int> idCliente;
  final Value<int> idColaborador;
  final Value<int> idPdvMovimento;
  final Value<int> idEcfDav;
  final Value<int> idEcfPreVendaCabecalho;
  final Value<String> serieEcf;
  final Value<int> cfop;
  final Value<int> coo;
  final Value<int> ccf;
  final Value<DateTime> dataVenda;
  final Value<String> horaVenda;
  final Value<double> valorVenda;
  final Value<double> taxaDesconto;
  final Value<double> valorDesconto;
  final Value<double> taxaAcrescimo;
  final Value<double> valorAcrescimo;
  final Value<double> valorFinal;
  final Value<double> valorRecebido;
  final Value<double> valorTroco;
  final Value<double> valorCancelado;
  final Value<double> valorTotalProdutos;
  final Value<double> valorTotalDocumento;
  final Value<double> valorBaseIcms;
  final Value<double> valorIcms;
  final Value<double> valorIcmsOutras;
  final Value<double> valorIssqn;
  final Value<double> valorPis;
  final Value<double> valorCofins;
  final Value<double> valorAcrescimoItens;
  final Value<double> valorDescontoItens;
  final Value<String> statusVenda;
  final Value<String> nomeCliente;
  final Value<String> cpfCnpjCliente;
  final Value<String> cupomCancelado;
  final Value<String> hashRegistro;
  const PdvVendaCabecalhosCompanion({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.idEcfDav = const Value.absent(),
    this.idEcfPreVendaCabecalho = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.cfop = const Value.absent(),
    this.coo = const Value.absent(),
    this.ccf = const Value.absent(),
    this.dataVenda = const Value.absent(),
    this.horaVenda = const Value.absent(),
    this.valorVenda = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.taxaAcrescimo = const Value.absent(),
    this.valorAcrescimo = const Value.absent(),
    this.valorFinal = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.valorTroco = const Value.absent(),
    this.valorCancelado = const Value.absent(),
    this.valorTotalProdutos = const Value.absent(),
    this.valorTotalDocumento = const Value.absent(),
    this.valorBaseIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.valorIcmsOutras = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.valorAcrescimoItens = const Value.absent(),
    this.valorDescontoItens = const Value.absent(),
    this.statusVenda = const Value.absent(),
    this.nomeCliente = const Value.absent(),
    this.cpfCnpjCliente = const Value.absent(),
    this.cupomCancelado = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  PdvVendaCabecalhosCompanion.insert({
    this.id = const Value.absent(),
    this.idCliente = const Value.absent(),
    this.idColaborador = const Value.absent(),
    this.idPdvMovimento = const Value.absent(),
    this.idEcfDav = const Value.absent(),
    this.idEcfPreVendaCabecalho = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.cfop = const Value.absent(),
    this.coo = const Value.absent(),
    this.ccf = const Value.absent(),
    this.dataVenda = const Value.absent(),
    this.horaVenda = const Value.absent(),
    this.valorVenda = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.taxaAcrescimo = const Value.absent(),
    this.valorAcrescimo = const Value.absent(),
    this.valorFinal = const Value.absent(),
    this.valorRecebido = const Value.absent(),
    this.valorTroco = const Value.absent(),
    this.valorCancelado = const Value.absent(),
    this.valorTotalProdutos = const Value.absent(),
    this.valorTotalDocumento = const Value.absent(),
    this.valorBaseIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.valorIcmsOutras = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.valorAcrescimoItens = const Value.absent(),
    this.valorDescontoItens = const Value.absent(),
    this.statusVenda = const Value.absent(),
    this.nomeCliente = const Value.absent(),
    this.cpfCnpjCliente = const Value.absent(),
    this.cupomCancelado = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<PdvVendaCabecalho> custom({
    Expression<int> id,
    Expression<int> idCliente,
    Expression<int> idColaborador,
    Expression<int> idPdvMovimento,
    Expression<int> idEcfDav,
    Expression<int> idEcfPreVendaCabecalho,
    Expression<String> serieEcf,
    Expression<int> cfop,
    Expression<int> coo,
    Expression<int> ccf,
    Expression<DateTime> dataVenda,
    Expression<String> horaVenda,
    Expression<double> valorVenda,
    Expression<double> taxaDesconto,
    Expression<double> valorDesconto,
    Expression<double> taxaAcrescimo,
    Expression<double> valorAcrescimo,
    Expression<double> valorFinal,
    Expression<double> valorRecebido,
    Expression<double> valorTroco,
    Expression<double> valorCancelado,
    Expression<double> valorTotalProdutos,
    Expression<double> valorTotalDocumento,
    Expression<double> valorBaseIcms,
    Expression<double> valorIcms,
    Expression<double> valorIcmsOutras,
    Expression<double> valorIssqn,
    Expression<double> valorPis,
    Expression<double> valorCofins,
    Expression<double> valorAcrescimoItens,
    Expression<double> valorDescontoItens,
    Expression<String> statusVenda,
    Expression<String> nomeCliente,
    Expression<String> cpfCnpjCliente,
    Expression<String> cupomCancelado,
    Expression<String> hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idCliente != null) 'ID_CLIENTE': idCliente,
      if (idColaborador != null) 'ID_COLABORADOR': idColaborador,
      if (idPdvMovimento != null) 'ID_PDV_MOVIMENTO': idPdvMovimento,
      if (idEcfDav != null) 'ID_ECF_DAV': idEcfDav,
      if (idEcfPreVendaCabecalho != null)
        'ID_ECF_PRE_VENDA_CABECALHO': idEcfPreVendaCabecalho,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (cfop != null) 'CFOP': cfop,
      if (coo != null) 'COO': coo,
      if (ccf != null) 'CCF': ccf,
      if (dataVenda != null) 'DATA_VENDA': dataVenda,
      if (horaVenda != null) 'HORA_VENDA': horaVenda,
      if (valorVenda != null) 'VALOR_VENDA': valorVenda,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (taxaAcrescimo != null) 'TAXA_ACRESCIMO': taxaAcrescimo,
      if (valorAcrescimo != null) 'VALOR_ACRESCIMO': valorAcrescimo,
      if (valorFinal != null) 'VALOR_FINAL': valorFinal,
      if (valorRecebido != null) 'VALOR_RECEBIDO': valorRecebido,
      if (valorTroco != null) 'VALOR_TROCO': valorTroco,
      if (valorCancelado != null) 'VALOR_CANCELADO': valorCancelado,
      if (valorTotalProdutos != null)
        'VALOR_TOTAL_PRODUTOS': valorTotalProdutos,
      if (valorTotalDocumento != null)
        'VALOR_TOTAL_DOCUMENTO': valorTotalDocumento,
      if (valorBaseIcms != null) 'VALOR_BASE_ICMS': valorBaseIcms,
      if (valorIcms != null) 'VALOR_ICMS': valorIcms,
      if (valorIcmsOutras != null) 'VALOR_ICMS_OUTRAS': valorIcmsOutras,
      if (valorIssqn != null) 'VALOR_ISSQN': valorIssqn,
      if (valorPis != null) 'VALOR_PIS': valorPis,
      if (valorCofins != null) 'VALOR_COFINS': valorCofins,
      if (valorAcrescimoItens != null)
        'VALOR_ACRESCIMO_ITENS': valorAcrescimoItens,
      if (valorDescontoItens != null)
        'VALOR_DESCONTO_ITENS': valorDescontoItens,
      if (statusVenda != null) 'STATUS_VENDA': statusVenda,
      if (nomeCliente != null) 'NOME_CLIENTE': nomeCliente,
      if (cpfCnpjCliente != null) 'CPF_CNPJ_CLIENTE': cpfCnpjCliente,
      if (cupomCancelado != null) 'CUPOM_CANCELADO': cupomCancelado,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  PdvVendaCabecalhosCompanion copyWith(
      {Value<int> id,
      Value<int> idCliente,
      Value<int> idColaborador,
      Value<int> idPdvMovimento,
      Value<int> idEcfDav,
      Value<int> idEcfPreVendaCabecalho,
      Value<String> serieEcf,
      Value<int> cfop,
      Value<int> coo,
      Value<int> ccf,
      Value<DateTime> dataVenda,
      Value<String> horaVenda,
      Value<double> valorVenda,
      Value<double> taxaDesconto,
      Value<double> valorDesconto,
      Value<double> taxaAcrescimo,
      Value<double> valorAcrescimo,
      Value<double> valorFinal,
      Value<double> valorRecebido,
      Value<double> valorTroco,
      Value<double> valorCancelado,
      Value<double> valorTotalProdutos,
      Value<double> valorTotalDocumento,
      Value<double> valorBaseIcms,
      Value<double> valorIcms,
      Value<double> valorIcmsOutras,
      Value<double> valorIssqn,
      Value<double> valorPis,
      Value<double> valorCofins,
      Value<double> valorAcrescimoItens,
      Value<double> valorDescontoItens,
      Value<String> statusVenda,
      Value<String> nomeCliente,
      Value<String> cpfCnpjCliente,
      Value<String> cupomCancelado,
      Value<String> hashRegistro}) {
    return PdvVendaCabecalhosCompanion(
      id: id ?? this.id,
      idCliente: idCliente ?? this.idCliente,
      idColaborador: idColaborador ?? this.idColaborador,
      idPdvMovimento: idPdvMovimento ?? this.idPdvMovimento,
      idEcfDav: idEcfDav ?? this.idEcfDav,
      idEcfPreVendaCabecalho:
          idEcfPreVendaCabecalho ?? this.idEcfPreVendaCabecalho,
      serieEcf: serieEcf ?? this.serieEcf,
      cfop: cfop ?? this.cfop,
      coo: coo ?? this.coo,
      ccf: ccf ?? this.ccf,
      dataVenda: dataVenda ?? this.dataVenda,
      horaVenda: horaVenda ?? this.horaVenda,
      valorVenda: valorVenda ?? this.valorVenda,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      taxaAcrescimo: taxaAcrescimo ?? this.taxaAcrescimo,
      valorAcrescimo: valorAcrescimo ?? this.valorAcrescimo,
      valorFinal: valorFinal ?? this.valorFinal,
      valorRecebido: valorRecebido ?? this.valorRecebido,
      valorTroco: valorTroco ?? this.valorTroco,
      valorCancelado: valorCancelado ?? this.valorCancelado,
      valorTotalProdutos: valorTotalProdutos ?? this.valorTotalProdutos,
      valorTotalDocumento: valorTotalDocumento ?? this.valorTotalDocumento,
      valorBaseIcms: valorBaseIcms ?? this.valorBaseIcms,
      valorIcms: valorIcms ?? this.valorIcms,
      valorIcmsOutras: valorIcmsOutras ?? this.valorIcmsOutras,
      valorIssqn: valorIssqn ?? this.valorIssqn,
      valorPis: valorPis ?? this.valorPis,
      valorCofins: valorCofins ?? this.valorCofins,
      valorAcrescimoItens: valorAcrescimoItens ?? this.valorAcrescimoItens,
      valorDescontoItens: valorDescontoItens ?? this.valorDescontoItens,
      statusVenda: statusVenda ?? this.statusVenda,
      nomeCliente: nomeCliente ?? this.nomeCliente,
      cpfCnpjCliente: cpfCnpjCliente ?? this.cpfCnpjCliente,
      cupomCancelado: cupomCancelado ?? this.cupomCancelado,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idCliente.present) {
      map['ID_CLIENTE'] = Variable<int>(idCliente.value);
    }
    if (idColaborador.present) {
      map['ID_COLABORADOR'] = Variable<int>(idColaborador.value);
    }
    if (idPdvMovimento.present) {
      map['ID_PDV_MOVIMENTO'] = Variable<int>(idPdvMovimento.value);
    }
    if (idEcfDav.present) {
      map['ID_ECF_DAV'] = Variable<int>(idEcfDav.value);
    }
    if (idEcfPreVendaCabecalho.present) {
      map['ID_ECF_PRE_VENDA_CABECALHO'] =
          Variable<int>(idEcfPreVendaCabecalho.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (ccf.present) {
      map['CCF'] = Variable<int>(ccf.value);
    }
    if (dataVenda.present) {
      map['DATA_VENDA'] = Variable<DateTime>(dataVenda.value);
    }
    if (horaVenda.present) {
      map['HORA_VENDA'] = Variable<String>(horaVenda.value);
    }
    if (valorVenda.present) {
      map['VALOR_VENDA'] = Variable<double>(valorVenda.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (taxaAcrescimo.present) {
      map['TAXA_ACRESCIMO'] = Variable<double>(taxaAcrescimo.value);
    }
    if (valorAcrescimo.present) {
      map['VALOR_ACRESCIMO'] = Variable<double>(valorAcrescimo.value);
    }
    if (valorFinal.present) {
      map['VALOR_FINAL'] = Variable<double>(valorFinal.value);
    }
    if (valorRecebido.present) {
      map['VALOR_RECEBIDO'] = Variable<double>(valorRecebido.value);
    }
    if (valorTroco.present) {
      map['VALOR_TROCO'] = Variable<double>(valorTroco.value);
    }
    if (valorCancelado.present) {
      map['VALOR_CANCELADO'] = Variable<double>(valorCancelado.value);
    }
    if (valorTotalProdutos.present) {
      map['VALOR_TOTAL_PRODUTOS'] = Variable<double>(valorTotalProdutos.value);
    }
    if (valorTotalDocumento.present) {
      map['VALOR_TOTAL_DOCUMENTO'] =
          Variable<double>(valorTotalDocumento.value);
    }
    if (valorBaseIcms.present) {
      map['VALOR_BASE_ICMS'] = Variable<double>(valorBaseIcms.value);
    }
    if (valorIcms.present) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms.value);
    }
    if (valorIcmsOutras.present) {
      map['VALOR_ICMS_OUTRAS'] = Variable<double>(valorIcmsOutras.value);
    }
    if (valorIssqn.present) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn.value);
    }
    if (valorPis.present) {
      map['VALOR_PIS'] = Variable<double>(valorPis.value);
    }
    if (valorCofins.present) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins.value);
    }
    if (valorAcrescimoItens.present) {
      map['VALOR_ACRESCIMO_ITENS'] =
          Variable<double>(valorAcrescimoItens.value);
    }
    if (valorDescontoItens.present) {
      map['VALOR_DESCONTO_ITENS'] = Variable<double>(valorDescontoItens.value);
    }
    if (statusVenda.present) {
      map['STATUS_VENDA'] = Variable<String>(statusVenda.value);
    }
    if (nomeCliente.present) {
      map['NOME_CLIENTE'] = Variable<String>(nomeCliente.value);
    }
    if (cpfCnpjCliente.present) {
      map['CPF_CNPJ_CLIENTE'] = Variable<String>(cpfCnpjCliente.value);
    }
    if (cupomCancelado.present) {
      map['CUPOM_CANCELADO'] = Variable<String>(cupomCancelado.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvVendaCabecalhosCompanion(')
          ..write('id: $id, ')
          ..write('idCliente: $idCliente, ')
          ..write('idColaborador: $idColaborador, ')
          ..write('idPdvMovimento: $idPdvMovimento, ')
          ..write('idEcfDav: $idEcfDav, ')
          ..write('idEcfPreVendaCabecalho: $idEcfPreVendaCabecalho, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('cfop: $cfop, ')
          ..write('coo: $coo, ')
          ..write('ccf: $ccf, ')
          ..write('dataVenda: $dataVenda, ')
          ..write('horaVenda: $horaVenda, ')
          ..write('valorVenda: $valorVenda, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('taxaAcrescimo: $taxaAcrescimo, ')
          ..write('valorAcrescimo: $valorAcrescimo, ')
          ..write('valorFinal: $valorFinal, ')
          ..write('valorRecebido: $valorRecebido, ')
          ..write('valorTroco: $valorTroco, ')
          ..write('valorCancelado: $valorCancelado, ')
          ..write('valorTotalProdutos: $valorTotalProdutos, ')
          ..write('valorTotalDocumento: $valorTotalDocumento, ')
          ..write('valorBaseIcms: $valorBaseIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('valorIcmsOutras: $valorIcmsOutras, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('valorPis: $valorPis, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('valorAcrescimoItens: $valorAcrescimoItens, ')
          ..write('valorDescontoItens: $valorDescontoItens, ')
          ..write('statusVenda: $statusVenda, ')
          ..write('nomeCliente: $nomeCliente, ')
          ..write('cpfCnpjCliente: $cpfCnpjCliente, ')
          ..write('cupomCancelado: $cupomCancelado, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $PdvVendaCabecalhosTable extends PdvVendaCabecalhos
    with TableInfo<$PdvVendaCabecalhosTable, PdvVendaCabecalho> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvVendaCabecalhosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idClienteMeta = const VerificationMeta('idCliente');
  GeneratedIntColumn _idCliente;
  @override
  GeneratedIntColumn get idCliente => _idCliente ??= _constructIdCliente();
  GeneratedIntColumn _constructIdCliente() {
    return GeneratedIntColumn('ID_CLIENTE', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES CLIENTE(ID)');
  }

  final VerificationMeta _idColaboradorMeta =
      const VerificationMeta('idColaborador');
  GeneratedIntColumn _idColaborador;
  @override
  GeneratedIntColumn get idColaborador =>
      _idColaborador ??= _constructIdColaborador();
  GeneratedIntColumn _constructIdColaborador() {
    return GeneratedIntColumn('ID_COLABORADOR', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES COLABORADOR(ID)');
  }

  final VerificationMeta _idPdvMovimentoMeta =
      const VerificationMeta('idPdvMovimento');
  GeneratedIntColumn _idPdvMovimento;
  @override
  GeneratedIntColumn get idPdvMovimento =>
      _idPdvMovimento ??= _constructIdPdvMovimento();
  GeneratedIntColumn _constructIdPdvMovimento() {
    return GeneratedIntColumn('ID_PDV_MOVIMENTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_MOVIMENTO(ID)');
  }

  final VerificationMeta _idEcfDavMeta = const VerificationMeta('idEcfDav');
  GeneratedIntColumn _idEcfDav;
  @override
  GeneratedIntColumn get idEcfDav => _idEcfDav ??= _constructIdEcfDav();
  GeneratedIntColumn _constructIdEcfDav() {
    return GeneratedIntColumn('ID_ECF_DAV', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_DAV(ID)');
  }

  final VerificationMeta _idEcfPreVendaCabecalhoMeta =
      const VerificationMeta('idEcfPreVendaCabecalho');
  GeneratedIntColumn _idEcfPreVendaCabecalho;
  @override
  GeneratedIntColumn get idEcfPreVendaCabecalho =>
      _idEcfPreVendaCabecalho ??= _constructIdEcfPreVendaCabecalho();
  GeneratedIntColumn _constructIdEcfPreVendaCabecalho() {
    return GeneratedIntColumn('ID_ECF_PRE_VENDA_CABECALHO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES ECF_PRE_VENDA_CABECALHO(ID)');
  }

  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  GeneratedTextColumn _serieEcf;
  @override
  GeneratedTextColumn get serieEcf => _serieEcf ??= _constructSerieEcf();
  GeneratedTextColumn _constructSerieEcf() {
    return GeneratedTextColumn('SERIE_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  GeneratedIntColumn _cfop;
  @override
  GeneratedIntColumn get cfop => _cfop ??= _constructCfop();
  GeneratedIntColumn _constructCfop() {
    return GeneratedIntColumn(
      'CFOP',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  GeneratedIntColumn _coo;
  @override
  GeneratedIntColumn get coo => _coo ??= _constructCoo();
  GeneratedIntColumn _constructCoo() {
    return GeneratedIntColumn(
      'COO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
  GeneratedIntColumn _ccf;
  @override
  GeneratedIntColumn get ccf => _ccf ??= _constructCcf();
  GeneratedIntColumn _constructCcf() {
    return GeneratedIntColumn(
      'CCF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataVendaMeta = const VerificationMeta('dataVenda');
  GeneratedDateTimeColumn _dataVenda;
  @override
  GeneratedDateTimeColumn get dataVenda => _dataVenda ??= _constructDataVenda();
  GeneratedDateTimeColumn _constructDataVenda() {
    return GeneratedDateTimeColumn(
      'DATA_VENDA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _horaVendaMeta = const VerificationMeta('horaVenda');
  GeneratedTextColumn _horaVenda;
  @override
  GeneratedTextColumn get horaVenda => _horaVenda ??= _constructHoraVenda();
  GeneratedTextColumn _constructHoraVenda() {
    return GeneratedTextColumn('HORA_VENDA', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _valorVendaMeta = const VerificationMeta('valorVenda');
  GeneratedRealColumn _valorVenda;
  @override
  GeneratedRealColumn get valorVenda => _valorVenda ??= _constructValorVenda();
  GeneratedRealColumn _constructValorVenda() {
    return GeneratedRealColumn(
      'VALOR_VENDA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  GeneratedRealColumn _taxaDesconto;
  @override
  GeneratedRealColumn get taxaDesconto =>
      _taxaDesconto ??= _constructTaxaDesconto();
  GeneratedRealColumn _constructTaxaDesconto() {
    return GeneratedRealColumn(
      'TAXA_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  GeneratedRealColumn _valorDesconto;
  @override
  GeneratedRealColumn get valorDesconto =>
      _valorDesconto ??= _constructValorDesconto();
  GeneratedRealColumn _constructValorDesconto() {
    return GeneratedRealColumn(
      'VALOR_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaAcrescimoMeta =
      const VerificationMeta('taxaAcrescimo');
  GeneratedRealColumn _taxaAcrescimo;
  @override
  GeneratedRealColumn get taxaAcrescimo =>
      _taxaAcrescimo ??= _constructTaxaAcrescimo();
  GeneratedRealColumn _constructTaxaAcrescimo() {
    return GeneratedRealColumn(
      'TAXA_ACRESCIMO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorAcrescimoMeta =
      const VerificationMeta('valorAcrescimo');
  GeneratedRealColumn _valorAcrescimo;
  @override
  GeneratedRealColumn get valorAcrescimo =>
      _valorAcrescimo ??= _constructValorAcrescimo();
  GeneratedRealColumn _constructValorAcrescimo() {
    return GeneratedRealColumn(
      'VALOR_ACRESCIMO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorFinalMeta = const VerificationMeta('valorFinal');
  GeneratedRealColumn _valorFinal;
  @override
  GeneratedRealColumn get valorFinal => _valorFinal ??= _constructValorFinal();
  GeneratedRealColumn _constructValorFinal() {
    return GeneratedRealColumn(
      'VALOR_FINAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorRecebidoMeta =
      const VerificationMeta('valorRecebido');
  GeneratedRealColumn _valorRecebido;
  @override
  GeneratedRealColumn get valorRecebido =>
      _valorRecebido ??= _constructValorRecebido();
  GeneratedRealColumn _constructValorRecebido() {
    return GeneratedRealColumn(
      'VALOR_RECEBIDO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorTrocoMeta = const VerificationMeta('valorTroco');
  GeneratedRealColumn _valorTroco;
  @override
  GeneratedRealColumn get valorTroco => _valorTroco ??= _constructValorTroco();
  GeneratedRealColumn _constructValorTroco() {
    return GeneratedRealColumn(
      'VALOR_TROCO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorCanceladoMeta =
      const VerificationMeta('valorCancelado');
  GeneratedRealColumn _valorCancelado;
  @override
  GeneratedRealColumn get valorCancelado =>
      _valorCancelado ??= _constructValorCancelado();
  GeneratedRealColumn _constructValorCancelado() {
    return GeneratedRealColumn(
      'VALOR_CANCELADO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorTotalProdutosMeta =
      const VerificationMeta('valorTotalProdutos');
  GeneratedRealColumn _valorTotalProdutos;
  @override
  GeneratedRealColumn get valorTotalProdutos =>
      _valorTotalProdutos ??= _constructValorTotalProdutos();
  GeneratedRealColumn _constructValorTotalProdutos() {
    return GeneratedRealColumn(
      'VALOR_TOTAL_PRODUTOS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorTotalDocumentoMeta =
      const VerificationMeta('valorTotalDocumento');
  GeneratedRealColumn _valorTotalDocumento;
  @override
  GeneratedRealColumn get valorTotalDocumento =>
      _valorTotalDocumento ??= _constructValorTotalDocumento();
  GeneratedRealColumn _constructValorTotalDocumento() {
    return GeneratedRealColumn(
      'VALOR_TOTAL_DOCUMENTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorBaseIcmsMeta =
      const VerificationMeta('valorBaseIcms');
  GeneratedRealColumn _valorBaseIcms;
  @override
  GeneratedRealColumn get valorBaseIcms =>
      _valorBaseIcms ??= _constructValorBaseIcms();
  GeneratedRealColumn _constructValorBaseIcms() {
    return GeneratedRealColumn(
      'VALOR_BASE_ICMS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorIcmsMeta = const VerificationMeta('valorIcms');
  GeneratedRealColumn _valorIcms;
  @override
  GeneratedRealColumn get valorIcms => _valorIcms ??= _constructValorIcms();
  GeneratedRealColumn _constructValorIcms() {
    return GeneratedRealColumn(
      'VALOR_ICMS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorIcmsOutrasMeta =
      const VerificationMeta('valorIcmsOutras');
  GeneratedRealColumn _valorIcmsOutras;
  @override
  GeneratedRealColumn get valorIcmsOutras =>
      _valorIcmsOutras ??= _constructValorIcmsOutras();
  GeneratedRealColumn _constructValorIcmsOutras() {
    return GeneratedRealColumn(
      'VALOR_ICMS_OUTRAS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorIssqnMeta = const VerificationMeta('valorIssqn');
  GeneratedRealColumn _valorIssqn;
  @override
  GeneratedRealColumn get valorIssqn => _valorIssqn ??= _constructValorIssqn();
  GeneratedRealColumn _constructValorIssqn() {
    return GeneratedRealColumn(
      'VALOR_ISSQN',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorPisMeta = const VerificationMeta('valorPis');
  GeneratedRealColumn _valorPis;
  @override
  GeneratedRealColumn get valorPis => _valorPis ??= _constructValorPis();
  GeneratedRealColumn _constructValorPis() {
    return GeneratedRealColumn(
      'VALOR_PIS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorCofinsMeta =
      const VerificationMeta('valorCofins');
  GeneratedRealColumn _valorCofins;
  @override
  GeneratedRealColumn get valorCofins =>
      _valorCofins ??= _constructValorCofins();
  GeneratedRealColumn _constructValorCofins() {
    return GeneratedRealColumn(
      'VALOR_COFINS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorAcrescimoItensMeta =
      const VerificationMeta('valorAcrescimoItens');
  GeneratedRealColumn _valorAcrescimoItens;
  @override
  GeneratedRealColumn get valorAcrescimoItens =>
      _valorAcrescimoItens ??= _constructValorAcrescimoItens();
  GeneratedRealColumn _constructValorAcrescimoItens() {
    return GeneratedRealColumn(
      'VALOR_ACRESCIMO_ITENS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorDescontoItensMeta =
      const VerificationMeta('valorDescontoItens');
  GeneratedRealColumn _valorDescontoItens;
  @override
  GeneratedRealColumn get valorDescontoItens =>
      _valorDescontoItens ??= _constructValorDescontoItens();
  GeneratedRealColumn _constructValorDescontoItens() {
    return GeneratedRealColumn(
      'VALOR_DESCONTO_ITENS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _statusVendaMeta =
      const VerificationMeta('statusVenda');
  GeneratedTextColumn _statusVenda;
  @override
  GeneratedTextColumn get statusVenda =>
      _statusVenda ??= _constructStatusVenda();
  GeneratedTextColumn _constructStatusVenda() {
    return GeneratedTextColumn('STATUS_VENDA', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _nomeClienteMeta =
      const VerificationMeta('nomeCliente');
  GeneratedTextColumn _nomeCliente;
  @override
  GeneratedTextColumn get nomeCliente =>
      _nomeCliente ??= _constructNomeCliente();
  GeneratedTextColumn _constructNomeCliente() {
    return GeneratedTextColumn('NOME_CLIENTE', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _cpfCnpjClienteMeta =
      const VerificationMeta('cpfCnpjCliente');
  GeneratedTextColumn _cpfCnpjCliente;
  @override
  GeneratedTextColumn get cpfCnpjCliente =>
      _cpfCnpjCliente ??= _constructCpfCnpjCliente();
  GeneratedTextColumn _constructCpfCnpjCliente() {
    return GeneratedTextColumn('CPF_CNPJ_CLIENTE', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _cupomCanceladoMeta =
      const VerificationMeta('cupomCancelado');
  GeneratedTextColumn _cupomCancelado;
  @override
  GeneratedTextColumn get cupomCancelado =>
      _cupomCancelado ??= _constructCupomCancelado();
  GeneratedTextColumn _constructCupomCancelado() {
    return GeneratedTextColumn('CUPOM_CANCELADO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  GeneratedTextColumn _hashRegistro;
  @override
  GeneratedTextColumn get hashRegistro =>
      _hashRegistro ??= _constructHashRegistro();
  GeneratedTextColumn _constructHashRegistro() {
    return GeneratedTextColumn('HASH_REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idCliente,
        idColaborador,
        idPdvMovimento,
        idEcfDav,
        idEcfPreVendaCabecalho,
        serieEcf,
        cfop,
        coo,
        ccf,
        dataVenda,
        horaVenda,
        valorVenda,
        taxaDesconto,
        valorDesconto,
        taxaAcrescimo,
        valorAcrescimo,
        valorFinal,
        valorRecebido,
        valorTroco,
        valorCancelado,
        valorTotalProdutos,
        valorTotalDocumento,
        valorBaseIcms,
        valorIcms,
        valorIcmsOutras,
        valorIssqn,
        valorPis,
        valorCofins,
        valorAcrescimoItens,
        valorDescontoItens,
        statusVenda,
        nomeCliente,
        cpfCnpjCliente,
        cupomCancelado,
        hashRegistro
      ];
  @override
  $PdvVendaCabecalhosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_VENDA_CABECALHO';
  @override
  final String actualTableName = 'PDV_VENDA_CABECALHO';
  @override
  VerificationContext validateIntegrity(Insertable<PdvVendaCabecalho> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_CLIENTE')) {
      context.handle(_idClienteMeta,
          idCliente.isAcceptableOrUnknown(data['ID_CLIENTE'], _idClienteMeta));
    }
    if (data.containsKey('ID_COLABORADOR')) {
      context.handle(
          _idColaboradorMeta,
          idColaborador.isAcceptableOrUnknown(
              data['ID_COLABORADOR'], _idColaboradorMeta));
    }
    if (data.containsKey('ID_PDV_MOVIMENTO')) {
      context.handle(
          _idPdvMovimentoMeta,
          idPdvMovimento.isAcceptableOrUnknown(
              data['ID_PDV_MOVIMENTO'], _idPdvMovimentoMeta));
    }
    if (data.containsKey('ID_ECF_DAV')) {
      context.handle(_idEcfDavMeta,
          idEcfDav.isAcceptableOrUnknown(data['ID_ECF_DAV'], _idEcfDavMeta));
    }
    if (data.containsKey('ID_ECF_PRE_VENDA_CABECALHO')) {
      context.handle(
          _idEcfPreVendaCabecalhoMeta,
          idEcfPreVendaCabecalho.isAcceptableOrUnknown(
              data['ID_ECF_PRE_VENDA_CABECALHO'], _idEcfPreVendaCabecalhoMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF'], _serieEcfMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP'], _cfopMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO'], _cooMeta));
    }
    if (data.containsKey('CCF')) {
      context.handle(
          _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF'], _ccfMeta));
    }
    if (data.containsKey('DATA_VENDA')) {
      context.handle(_dataVendaMeta,
          dataVenda.isAcceptableOrUnknown(data['DATA_VENDA'], _dataVendaMeta));
    }
    if (data.containsKey('HORA_VENDA')) {
      context.handle(_horaVendaMeta,
          horaVenda.isAcceptableOrUnknown(data['HORA_VENDA'], _horaVendaMeta));
    }
    if (data.containsKey('VALOR_VENDA')) {
      context.handle(
          _valorVendaMeta,
          valorVenda.isAcceptableOrUnknown(
              data['VALOR_VENDA'], _valorVendaMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO'], _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO'], _valorDescontoMeta));
    }
    if (data.containsKey('TAXA_ACRESCIMO')) {
      context.handle(
          _taxaAcrescimoMeta,
          taxaAcrescimo.isAcceptableOrUnknown(
              data['TAXA_ACRESCIMO'], _taxaAcrescimoMeta));
    }
    if (data.containsKey('VALOR_ACRESCIMO')) {
      context.handle(
          _valorAcrescimoMeta,
          valorAcrescimo.isAcceptableOrUnknown(
              data['VALOR_ACRESCIMO'], _valorAcrescimoMeta));
    }
    if (data.containsKey('VALOR_FINAL')) {
      context.handle(
          _valorFinalMeta,
          valorFinal.isAcceptableOrUnknown(
              data['VALOR_FINAL'], _valorFinalMeta));
    }
    if (data.containsKey('VALOR_RECEBIDO')) {
      context.handle(
          _valorRecebidoMeta,
          valorRecebido.isAcceptableOrUnknown(
              data['VALOR_RECEBIDO'], _valorRecebidoMeta));
    }
    if (data.containsKey('VALOR_TROCO')) {
      context.handle(
          _valorTrocoMeta,
          valorTroco.isAcceptableOrUnknown(
              data['VALOR_TROCO'], _valorTrocoMeta));
    }
    if (data.containsKey('VALOR_CANCELADO')) {
      context.handle(
          _valorCanceladoMeta,
          valorCancelado.isAcceptableOrUnknown(
              data['VALOR_CANCELADO'], _valorCanceladoMeta));
    }
    if (data.containsKey('VALOR_TOTAL_PRODUTOS')) {
      context.handle(
          _valorTotalProdutosMeta,
          valorTotalProdutos.isAcceptableOrUnknown(
              data['VALOR_TOTAL_PRODUTOS'], _valorTotalProdutosMeta));
    }
    if (data.containsKey('VALOR_TOTAL_DOCUMENTO')) {
      context.handle(
          _valorTotalDocumentoMeta,
          valorTotalDocumento.isAcceptableOrUnknown(
              data['VALOR_TOTAL_DOCUMENTO'], _valorTotalDocumentoMeta));
    }
    if (data.containsKey('VALOR_BASE_ICMS')) {
      context.handle(
          _valorBaseIcmsMeta,
          valorBaseIcms.isAcceptableOrUnknown(
              data['VALOR_BASE_ICMS'], _valorBaseIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS')) {
      context.handle(_valorIcmsMeta,
          valorIcms.isAcceptableOrUnknown(data['VALOR_ICMS'], _valorIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS_OUTRAS')) {
      context.handle(
          _valorIcmsOutrasMeta,
          valorIcmsOutras.isAcceptableOrUnknown(
              data['VALOR_ICMS_OUTRAS'], _valorIcmsOutrasMeta));
    }
    if (data.containsKey('VALOR_ISSQN')) {
      context.handle(
          _valorIssqnMeta,
          valorIssqn.isAcceptableOrUnknown(
              data['VALOR_ISSQN'], _valorIssqnMeta));
    }
    if (data.containsKey('VALOR_PIS')) {
      context.handle(_valorPisMeta,
          valorPis.isAcceptableOrUnknown(data['VALOR_PIS'], _valorPisMeta));
    }
    if (data.containsKey('VALOR_COFINS')) {
      context.handle(
          _valorCofinsMeta,
          valorCofins.isAcceptableOrUnknown(
              data['VALOR_COFINS'], _valorCofinsMeta));
    }
    if (data.containsKey('VALOR_ACRESCIMO_ITENS')) {
      context.handle(
          _valorAcrescimoItensMeta,
          valorAcrescimoItens.isAcceptableOrUnknown(
              data['VALOR_ACRESCIMO_ITENS'], _valorAcrescimoItensMeta));
    }
    if (data.containsKey('VALOR_DESCONTO_ITENS')) {
      context.handle(
          _valorDescontoItensMeta,
          valorDescontoItens.isAcceptableOrUnknown(
              data['VALOR_DESCONTO_ITENS'], _valorDescontoItensMeta));
    }
    if (data.containsKey('STATUS_VENDA')) {
      context.handle(
          _statusVendaMeta,
          statusVenda.isAcceptableOrUnknown(
              data['STATUS_VENDA'], _statusVendaMeta));
    }
    if (data.containsKey('NOME_CLIENTE')) {
      context.handle(
          _nomeClienteMeta,
          nomeCliente.isAcceptableOrUnknown(
              data['NOME_CLIENTE'], _nomeClienteMeta));
    }
    if (data.containsKey('CPF_CNPJ_CLIENTE')) {
      context.handle(
          _cpfCnpjClienteMeta,
          cpfCnpjCliente.isAcceptableOrUnknown(
              data['CPF_CNPJ_CLIENTE'], _cpfCnpjClienteMeta));
    }
    if (data.containsKey('CUPOM_CANCELADO')) {
      context.handle(
          _cupomCanceladoMeta,
          cupomCancelado.isAcceptableOrUnknown(
              data['CUPOM_CANCELADO'], _cupomCanceladoMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO'], _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvVendaCabecalho map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvVendaCabecalho.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvVendaCabecalhosTable createAlias(String alias) {
    return $PdvVendaCabecalhosTable(_db, alias);
  }
}

class PdvVendaDetalhe extends DataClass implements Insertable<PdvVendaDetalhe> {
  final int id;
  final int idProduto;
  final int idPdvVendaCabecalho;
  final int cfop;
  final String gtin;
  final int ccf;
  final int coo;
  final String serieEcf;
  final int item;
  final double quantidade;
  final double valorUnitario;
  final double valorTotal;
  final double valorTotalItem;
  final double valorBaseIcms;
  final double taxaIcms;
  final double valorIcms;
  final double taxaDesconto;
  final double valorDesconto;
  final double taxaIssqn;
  final double valorIssqn;
  final double taxaPis;
  final double valorPis;
  final double taxaCofins;
  final double valorCofins;
  final double taxaAcrescimo;
  final double valorAcrescimo;
  final String totalizadorParcial;
  final String cst;
  final String cancelado;
  final String movimentaEstoque;
  final String ecfIcmsSt;
  final double valorImpostoFederal;
  final double valorImpostoEstadual;
  final double valorImpostoMunicipal;
  final String hashRegistro;
  PdvVendaDetalhe(
      {@required this.id,
      this.idProduto,
      this.idPdvVendaCabecalho,
      this.cfop,
      this.gtin,
      this.ccf,
      this.coo,
      this.serieEcf,
      this.item,
      this.quantidade,
      this.valorUnitario,
      this.valorTotal,
      this.valorTotalItem,
      this.valorBaseIcms,
      this.taxaIcms,
      this.valorIcms,
      this.taxaDesconto,
      this.valorDesconto,
      this.taxaIssqn,
      this.valorIssqn,
      this.taxaPis,
      this.valorPis,
      this.taxaCofins,
      this.valorCofins,
      this.taxaAcrescimo,
      this.valorAcrescimo,
      this.totalizadorParcial,
      this.cst,
      this.cancelado,
      this.movimentaEstoque,
      this.ecfIcmsSt,
      this.valorImpostoFederal,
      this.valorImpostoEstadual,
      this.valorImpostoMunicipal,
      this.hashRegistro});
  factory PdvVendaDetalhe.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return PdvVendaDetalhe(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idProduto:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
      idPdvVendaCabecalho: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_PDV_VENDA_CABECALHO']),
      cfop: intType.mapFromDatabaseResponse(data['${effectivePrefix}CFOP']),
      gtin: stringType.mapFromDatabaseResponse(data['${effectivePrefix}GTIN']),
      ccf: intType.mapFromDatabaseResponse(data['${effectivePrefix}CCF']),
      coo: intType.mapFromDatabaseResponse(data['${effectivePrefix}COO']),
      serieEcf: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}SERIE_ECF']),
      item: intType.mapFromDatabaseResponse(data['${effectivePrefix}ITEM']),
      quantidade: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
      valorUnitario: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_UNITARIO']),
      valorTotal: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL']),
      valorTotalItem: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_TOTAL_ITEM']),
      valorBaseIcms: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_BASE_ICMS']),
      taxaIcms: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ICMS']),
      valorIcms: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ICMS']),
      taxaDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_DESCONTO']),
      valorDesconto: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_DESCONTO']),
      taxaIssqn: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ISSQN']),
      valorIssqn: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ISSQN']),
      taxaPis: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_PIS']),
      valorPis: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_PIS']),
      taxaCofins: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_COFINS']),
      valorCofins: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_COFINS']),
      taxaAcrescimo: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ACRESCIMO']),
      valorAcrescimo: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_ACRESCIMO']),
      totalizadorParcial: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
      cst: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CST']),
      cancelado: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CANCELADO']),
      movimentaEstoque: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}MOVIMENTA_ESTOQUE']),
      ecfIcmsSt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}ECF_ICMS_ST']),
      valorImpostoFederal: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}VALOR_IMPOSTO_FEDERAL']),
      valorImpostoEstadual: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}VALOR_IMPOSTO_ESTADUAL']),
      valorImpostoMunicipal: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}VALOR_IMPOSTO_MUNICIPAL']),
      hashRegistro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || idPdvVendaCabecalho != null) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho);
    }
    if (!nullToAbsent || cfop != null) {
      map['CFOP'] = Variable<int>(cfop);
    }
    if (!nullToAbsent || gtin != null) {
      map['GTIN'] = Variable<String>(gtin);
    }
    if (!nullToAbsent || ccf != null) {
      map['CCF'] = Variable<int>(ccf);
    }
    if (!nullToAbsent || coo != null) {
      map['COO'] = Variable<int>(coo);
    }
    if (!nullToAbsent || serieEcf != null) {
      map['SERIE_ECF'] = Variable<String>(serieEcf);
    }
    if (!nullToAbsent || item != null) {
      map['ITEM'] = Variable<int>(item);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<double>(quantidade);
    }
    if (!nullToAbsent || valorUnitario != null) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario);
    }
    if (!nullToAbsent || valorTotal != null) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal);
    }
    if (!nullToAbsent || valorTotalItem != null) {
      map['VALOR_TOTAL_ITEM'] = Variable<double>(valorTotalItem);
    }
    if (!nullToAbsent || valorBaseIcms != null) {
      map['VALOR_BASE_ICMS'] = Variable<double>(valorBaseIcms);
    }
    if (!nullToAbsent || taxaIcms != null) {
      map['TAXA_ICMS'] = Variable<double>(taxaIcms);
    }
    if (!nullToAbsent || valorIcms != null) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms);
    }
    if (!nullToAbsent || taxaDesconto != null) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto);
    }
    if (!nullToAbsent || valorDesconto != null) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto);
    }
    if (!nullToAbsent || taxaIssqn != null) {
      map['TAXA_ISSQN'] = Variable<double>(taxaIssqn);
    }
    if (!nullToAbsent || valorIssqn != null) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn);
    }
    if (!nullToAbsent || taxaPis != null) {
      map['TAXA_PIS'] = Variable<double>(taxaPis);
    }
    if (!nullToAbsent || valorPis != null) {
      map['VALOR_PIS'] = Variable<double>(valorPis);
    }
    if (!nullToAbsent || taxaCofins != null) {
      map['TAXA_COFINS'] = Variable<double>(taxaCofins);
    }
    if (!nullToAbsent || valorCofins != null) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins);
    }
    if (!nullToAbsent || taxaAcrescimo != null) {
      map['TAXA_ACRESCIMO'] = Variable<double>(taxaAcrescimo);
    }
    if (!nullToAbsent || valorAcrescimo != null) {
      map['VALOR_ACRESCIMO'] = Variable<double>(valorAcrescimo);
    }
    if (!nullToAbsent || totalizadorParcial != null) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial);
    }
    if (!nullToAbsent || cst != null) {
      map['CST'] = Variable<String>(cst);
    }
    if (!nullToAbsent || cancelado != null) {
      map['CANCELADO'] = Variable<String>(cancelado);
    }
    if (!nullToAbsent || movimentaEstoque != null) {
      map['MOVIMENTA_ESTOQUE'] = Variable<String>(movimentaEstoque);
    }
    if (!nullToAbsent || ecfIcmsSt != null) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt);
    }
    if (!nullToAbsent || valorImpostoFederal != null) {
      map['VALOR_IMPOSTO_FEDERAL'] = Variable<double>(valorImpostoFederal);
    }
    if (!nullToAbsent || valorImpostoEstadual != null) {
      map['VALOR_IMPOSTO_ESTADUAL'] = Variable<double>(valorImpostoEstadual);
    }
    if (!nullToAbsent || valorImpostoMunicipal != null) {
      map['VALOR_IMPOSTO_MUNICIPAL'] = Variable<double>(valorImpostoMunicipal);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  PdvVendaDetalhesCompanion toCompanion(bool nullToAbsent) {
    return PdvVendaDetalhesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      idPdvVendaCabecalho: idPdvVendaCabecalho == null && nullToAbsent
          ? const Value.absent()
          : Value(idPdvVendaCabecalho),
      cfop: cfop == null && nullToAbsent ? const Value.absent() : Value(cfop),
      gtin: gtin == null && nullToAbsent ? const Value.absent() : Value(gtin),
      ccf: ccf == null && nullToAbsent ? const Value.absent() : Value(ccf),
      coo: coo == null && nullToAbsent ? const Value.absent() : Value(coo),
      serieEcf: serieEcf == null && nullToAbsent
          ? const Value.absent()
          : Value(serieEcf),
      item: item == null && nullToAbsent ? const Value.absent() : Value(item),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
      valorUnitario: valorUnitario == null && nullToAbsent
          ? const Value.absent()
          : Value(valorUnitario),
      valorTotal: valorTotal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotal),
      valorTotalItem: valorTotalItem == null && nullToAbsent
          ? const Value.absent()
          : Value(valorTotalItem),
      valorBaseIcms: valorBaseIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorBaseIcms),
      taxaIcms: taxaIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaIcms),
      valorIcms: valorIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIcms),
      taxaDesconto: taxaDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaDesconto),
      valorDesconto: valorDesconto == null && nullToAbsent
          ? const Value.absent()
          : Value(valorDesconto),
      taxaIssqn: taxaIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaIssqn),
      valorIssqn: valorIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(valorIssqn),
      taxaPis: taxaPis == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaPis),
      valorPis: valorPis == null && nullToAbsent
          ? const Value.absent()
          : Value(valorPis),
      taxaCofins: taxaCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaCofins),
      valorCofins: valorCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCofins),
      taxaAcrescimo: taxaAcrescimo == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaAcrescimo),
      valorAcrescimo: valorAcrescimo == null && nullToAbsent
          ? const Value.absent()
          : Value(valorAcrescimo),
      totalizadorParcial: totalizadorParcial == null && nullToAbsent
          ? const Value.absent()
          : Value(totalizadorParcial),
      cst: cst == null && nullToAbsent ? const Value.absent() : Value(cst),
      cancelado: cancelado == null && nullToAbsent
          ? const Value.absent()
          : Value(cancelado),
      movimentaEstoque: movimentaEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(movimentaEstoque),
      ecfIcmsSt: ecfIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(ecfIcmsSt),
      valorImpostoFederal: valorImpostoFederal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorImpostoFederal),
      valorImpostoEstadual: valorImpostoEstadual == null && nullToAbsent
          ? const Value.absent()
          : Value(valorImpostoEstadual),
      valorImpostoMunicipal: valorImpostoMunicipal == null && nullToAbsent
          ? const Value.absent()
          : Value(valorImpostoMunicipal),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory PdvVendaDetalhe.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return PdvVendaDetalhe(
      id: serializer.fromJson<int>(json['id']),
      idProduto: serializer.fromJson<int>(json['idProduto']),
      idPdvVendaCabecalho:
          serializer.fromJson<int>(json['idPdvVendaCabecalho']),
      cfop: serializer.fromJson<int>(json['cfop']),
      gtin: serializer.fromJson<String>(json['gtin']),
      ccf: serializer.fromJson<int>(json['ccf']),
      coo: serializer.fromJson<int>(json['coo']),
      serieEcf: serializer.fromJson<String>(json['serieEcf']),
      item: serializer.fromJson<int>(json['item']),
      quantidade: serializer.fromJson<double>(json['quantidade']),
      valorUnitario: serializer.fromJson<double>(json['valorUnitario']),
      valorTotal: serializer.fromJson<double>(json['valorTotal']),
      valorTotalItem: serializer.fromJson<double>(json['valorTotalItem']),
      valorBaseIcms: serializer.fromJson<double>(json['valorBaseIcms']),
      taxaIcms: serializer.fromJson<double>(json['taxaIcms']),
      valorIcms: serializer.fromJson<double>(json['valorIcms']),
      taxaDesconto: serializer.fromJson<double>(json['taxaDesconto']),
      valorDesconto: serializer.fromJson<double>(json['valorDesconto']),
      taxaIssqn: serializer.fromJson<double>(json['taxaIssqn']),
      valorIssqn: serializer.fromJson<double>(json['valorIssqn']),
      taxaPis: serializer.fromJson<double>(json['taxaPis']),
      valorPis: serializer.fromJson<double>(json['valorPis']),
      taxaCofins: serializer.fromJson<double>(json['taxaCofins']),
      valorCofins: serializer.fromJson<double>(json['valorCofins']),
      taxaAcrescimo: serializer.fromJson<double>(json['taxaAcrescimo']),
      valorAcrescimo: serializer.fromJson<double>(json['valorAcrescimo']),
      totalizadorParcial:
          serializer.fromJson<String>(json['totalizadorParcial']),
      cst: serializer.fromJson<String>(json['cst']),
      cancelado: serializer.fromJson<String>(json['cancelado']),
      movimentaEstoque: serializer.fromJson<String>(json['movimentaEstoque']),
      ecfIcmsSt: serializer.fromJson<String>(json['ecfIcmsSt']),
      valorImpostoFederal:
          serializer.fromJson<double>(json['valorImpostoFederal']),
      valorImpostoEstadual:
          serializer.fromJson<double>(json['valorImpostoEstadual']),
      valorImpostoMunicipal:
          serializer.fromJson<double>(json['valorImpostoMunicipal']),
      hashRegistro: serializer.fromJson<String>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idProduto': serializer.toJson<int>(idProduto),
      'idPdvVendaCabecalho': serializer.toJson<int>(idPdvVendaCabecalho),
      'cfop': serializer.toJson<int>(cfop),
      'gtin': serializer.toJson<String>(gtin),
      'ccf': serializer.toJson<int>(ccf),
      'coo': serializer.toJson<int>(coo),
      'serieEcf': serializer.toJson<String>(serieEcf),
      'item': serializer.toJson<int>(item),
      'quantidade': serializer.toJson<double>(quantidade),
      'valorUnitario': serializer.toJson<double>(valorUnitario),
      'valorTotal': serializer.toJson<double>(valorTotal),
      'valorTotalItem': serializer.toJson<double>(valorTotalItem),
      'valorBaseIcms': serializer.toJson<double>(valorBaseIcms),
      'taxaIcms': serializer.toJson<double>(taxaIcms),
      'valorIcms': serializer.toJson<double>(valorIcms),
      'taxaDesconto': serializer.toJson<double>(taxaDesconto),
      'valorDesconto': serializer.toJson<double>(valorDesconto),
      'taxaIssqn': serializer.toJson<double>(taxaIssqn),
      'valorIssqn': serializer.toJson<double>(valorIssqn),
      'taxaPis': serializer.toJson<double>(taxaPis),
      'valorPis': serializer.toJson<double>(valorPis),
      'taxaCofins': serializer.toJson<double>(taxaCofins),
      'valorCofins': serializer.toJson<double>(valorCofins),
      'taxaAcrescimo': serializer.toJson<double>(taxaAcrescimo),
      'valorAcrescimo': serializer.toJson<double>(valorAcrescimo),
      'totalizadorParcial': serializer.toJson<String>(totalizadorParcial),
      'cst': serializer.toJson<String>(cst),
      'cancelado': serializer.toJson<String>(cancelado),
      'movimentaEstoque': serializer.toJson<String>(movimentaEstoque),
      'ecfIcmsSt': serializer.toJson<String>(ecfIcmsSt),
      'valorImpostoFederal': serializer.toJson<double>(valorImpostoFederal),
      'valorImpostoEstadual': serializer.toJson<double>(valorImpostoEstadual),
      'valorImpostoMunicipal': serializer.toJson<double>(valorImpostoMunicipal),
      'hashRegistro': serializer.toJson<String>(hashRegistro),
    };
  }

  PdvVendaDetalhe copyWith(
          {int id,
          int idProduto,
          int idPdvVendaCabecalho,
          int cfop,
          String gtin,
          int ccf,
          int coo,
          String serieEcf,
          int item,
          double quantidade,
          double valorUnitario,
          double valorTotal,
          double valorTotalItem,
          double valorBaseIcms,
          double taxaIcms,
          double valorIcms,
          double taxaDesconto,
          double valorDesconto,
          double taxaIssqn,
          double valorIssqn,
          double taxaPis,
          double valorPis,
          double taxaCofins,
          double valorCofins,
          double taxaAcrescimo,
          double valorAcrescimo,
          String totalizadorParcial,
          String cst,
          String cancelado,
          String movimentaEstoque,
          String ecfIcmsSt,
          double valorImpostoFederal,
          double valorImpostoEstadual,
          double valorImpostoMunicipal,
          String hashRegistro}) =>
      PdvVendaDetalhe(
        id: id ?? this.id,
        idProduto: idProduto ?? this.idProduto,
        idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
        cfop: cfop ?? this.cfop,
        gtin: gtin ?? this.gtin,
        ccf: ccf ?? this.ccf,
        coo: coo ?? this.coo,
        serieEcf: serieEcf ?? this.serieEcf,
        item: item ?? this.item,
        quantidade: quantidade ?? this.quantidade,
        valorUnitario: valorUnitario ?? this.valorUnitario,
        valorTotal: valorTotal ?? this.valorTotal,
        valorTotalItem: valorTotalItem ?? this.valorTotalItem,
        valorBaseIcms: valorBaseIcms ?? this.valorBaseIcms,
        taxaIcms: taxaIcms ?? this.taxaIcms,
        valorIcms: valorIcms ?? this.valorIcms,
        taxaDesconto: taxaDesconto ?? this.taxaDesconto,
        valorDesconto: valorDesconto ?? this.valorDesconto,
        taxaIssqn: taxaIssqn ?? this.taxaIssqn,
        valorIssqn: valorIssqn ?? this.valorIssqn,
        taxaPis: taxaPis ?? this.taxaPis,
        valorPis: valorPis ?? this.valorPis,
        taxaCofins: taxaCofins ?? this.taxaCofins,
        valorCofins: valorCofins ?? this.valorCofins,
        taxaAcrescimo: taxaAcrescimo ?? this.taxaAcrescimo,
        valorAcrescimo: valorAcrescimo ?? this.valorAcrescimo,
        totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
        cst: cst ?? this.cst,
        cancelado: cancelado ?? this.cancelado,
        movimentaEstoque: movimentaEstoque ?? this.movimentaEstoque,
        ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
        valorImpostoFederal: valorImpostoFederal ?? this.valorImpostoFederal,
        valorImpostoEstadual: valorImpostoEstadual ?? this.valorImpostoEstadual,
        valorImpostoMunicipal:
            valorImpostoMunicipal ?? this.valorImpostoMunicipal,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('PdvVendaDetalhe(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('cfop: $cfop, ')
          ..write('gtin: $gtin, ')
          ..write('ccf: $ccf, ')
          ..write('coo: $coo, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('item: $item, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('valorTotalItem: $valorTotalItem, ')
          ..write('valorBaseIcms: $valorBaseIcms, ')
          ..write('taxaIcms: $taxaIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('taxaIssqn: $taxaIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('taxaPis: $taxaPis, ')
          ..write('valorPis: $valorPis, ')
          ..write('taxaCofins: $taxaCofins, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('taxaAcrescimo: $taxaAcrescimo, ')
          ..write('valorAcrescimo: $valorAcrescimo, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('cst: $cst, ')
          ..write('cancelado: $cancelado, ')
          ..write('movimentaEstoque: $movimentaEstoque, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('valorImpostoFederal: $valorImpostoFederal, ')
          ..write('valorImpostoEstadual: $valorImpostoEstadual, ')
          ..write('valorImpostoMunicipal: $valorImpostoMunicipal, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idProduto.hashCode,
          $mrjc(
              idPdvVendaCabecalho.hashCode,
              $mrjc(
                  cfop.hashCode,
                  $mrjc(
                      gtin.hashCode,
                      $mrjc(
                          ccf.hashCode,
                          $mrjc(
                              coo.hashCode,
                              $mrjc(
                                  serieEcf.hashCode,
                                  $mrjc(
                                      item.hashCode,
                                      $mrjc(
                                          quantidade.hashCode,
                                          $mrjc(
                                              valorUnitario.hashCode,
                                              $mrjc(
                                                  valorTotal.hashCode,
                                                  $mrjc(
                                                      valorTotalItem.hashCode,
                                                      $mrjc(
                                                          valorBaseIcms
                                                              .hashCode,
                                                          $mrjc(
                                                              taxaIcms.hashCode,
                                                              $mrjc(
                                                                  valorIcms
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      taxaDesconto
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          valorDesconto
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              taxaIssqn.hashCode,
                                                                              $mrjc(valorIssqn.hashCode, $mrjc(taxaPis.hashCode, $mrjc(valorPis.hashCode, $mrjc(taxaCofins.hashCode, $mrjc(valorCofins.hashCode, $mrjc(taxaAcrescimo.hashCode, $mrjc(valorAcrescimo.hashCode, $mrjc(totalizadorParcial.hashCode, $mrjc(cst.hashCode, $mrjc(cancelado.hashCode, $mrjc(movimentaEstoque.hashCode, $mrjc(ecfIcmsSt.hashCode, $mrjc(valorImpostoFederal.hashCode, $mrjc(valorImpostoEstadual.hashCode, $mrjc(valorImpostoMunicipal.hashCode, hashRegistro.hashCode)))))))))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is PdvVendaDetalhe &&
          other.id == this.id &&
          other.idProduto == this.idProduto &&
          other.idPdvVendaCabecalho == this.idPdvVendaCabecalho &&
          other.cfop == this.cfop &&
          other.gtin == this.gtin &&
          other.ccf == this.ccf &&
          other.coo == this.coo &&
          other.serieEcf == this.serieEcf &&
          other.item == this.item &&
          other.quantidade == this.quantidade &&
          other.valorUnitario == this.valorUnitario &&
          other.valorTotal == this.valorTotal &&
          other.valorTotalItem == this.valorTotalItem &&
          other.valorBaseIcms == this.valorBaseIcms &&
          other.taxaIcms == this.taxaIcms &&
          other.valorIcms == this.valorIcms &&
          other.taxaDesconto == this.taxaDesconto &&
          other.valorDesconto == this.valorDesconto &&
          other.taxaIssqn == this.taxaIssqn &&
          other.valorIssqn == this.valorIssqn &&
          other.taxaPis == this.taxaPis &&
          other.valorPis == this.valorPis &&
          other.taxaCofins == this.taxaCofins &&
          other.valorCofins == this.valorCofins &&
          other.taxaAcrescimo == this.taxaAcrescimo &&
          other.valorAcrescimo == this.valorAcrescimo &&
          other.totalizadorParcial == this.totalizadorParcial &&
          other.cst == this.cst &&
          other.cancelado == this.cancelado &&
          other.movimentaEstoque == this.movimentaEstoque &&
          other.ecfIcmsSt == this.ecfIcmsSt &&
          other.valorImpostoFederal == this.valorImpostoFederal &&
          other.valorImpostoEstadual == this.valorImpostoEstadual &&
          other.valorImpostoMunicipal == this.valorImpostoMunicipal &&
          other.hashRegistro == this.hashRegistro);
}

class PdvVendaDetalhesCompanion extends UpdateCompanion<PdvVendaDetalhe> {
  final Value<int> id;
  final Value<int> idProduto;
  final Value<int> idPdvVendaCabecalho;
  final Value<int> cfop;
  final Value<String> gtin;
  final Value<int> ccf;
  final Value<int> coo;
  final Value<String> serieEcf;
  final Value<int> item;
  final Value<double> quantidade;
  final Value<double> valorUnitario;
  final Value<double> valorTotal;
  final Value<double> valorTotalItem;
  final Value<double> valorBaseIcms;
  final Value<double> taxaIcms;
  final Value<double> valorIcms;
  final Value<double> taxaDesconto;
  final Value<double> valorDesconto;
  final Value<double> taxaIssqn;
  final Value<double> valorIssqn;
  final Value<double> taxaPis;
  final Value<double> valorPis;
  final Value<double> taxaCofins;
  final Value<double> valorCofins;
  final Value<double> taxaAcrescimo;
  final Value<double> valorAcrescimo;
  final Value<String> totalizadorParcial;
  final Value<String> cst;
  final Value<String> cancelado;
  final Value<String> movimentaEstoque;
  final Value<String> ecfIcmsSt;
  final Value<double> valorImpostoFederal;
  final Value<double> valorImpostoEstadual;
  final Value<double> valorImpostoMunicipal;
  final Value<String> hashRegistro;
  const PdvVendaDetalhesCompanion({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.cfop = const Value.absent(),
    this.gtin = const Value.absent(),
    this.ccf = const Value.absent(),
    this.coo = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.item = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.valorTotalItem = const Value.absent(),
    this.valorBaseIcms = const Value.absent(),
    this.taxaIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.taxaIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.taxaPis = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.taxaCofins = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.taxaAcrescimo = const Value.absent(),
    this.valorAcrescimo = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.cst = const Value.absent(),
    this.cancelado = const Value.absent(),
    this.movimentaEstoque = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.valorImpostoFederal = const Value.absent(),
    this.valorImpostoEstadual = const Value.absent(),
    this.valorImpostoMunicipal = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  PdvVendaDetalhesCompanion.insert({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.idPdvVendaCabecalho = const Value.absent(),
    this.cfop = const Value.absent(),
    this.gtin = const Value.absent(),
    this.ccf = const Value.absent(),
    this.coo = const Value.absent(),
    this.serieEcf = const Value.absent(),
    this.item = const Value.absent(),
    this.quantidade = const Value.absent(),
    this.valorUnitario = const Value.absent(),
    this.valorTotal = const Value.absent(),
    this.valorTotalItem = const Value.absent(),
    this.valorBaseIcms = const Value.absent(),
    this.taxaIcms = const Value.absent(),
    this.valorIcms = const Value.absent(),
    this.taxaDesconto = const Value.absent(),
    this.valorDesconto = const Value.absent(),
    this.taxaIssqn = const Value.absent(),
    this.valorIssqn = const Value.absent(),
    this.taxaPis = const Value.absent(),
    this.valorPis = const Value.absent(),
    this.taxaCofins = const Value.absent(),
    this.valorCofins = const Value.absent(),
    this.taxaAcrescimo = const Value.absent(),
    this.valorAcrescimo = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.cst = const Value.absent(),
    this.cancelado = const Value.absent(),
    this.movimentaEstoque = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.valorImpostoFederal = const Value.absent(),
    this.valorImpostoEstadual = const Value.absent(),
    this.valorImpostoMunicipal = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<PdvVendaDetalhe> custom({
    Expression<int> id,
    Expression<int> idProduto,
    Expression<int> idPdvVendaCabecalho,
    Expression<int> cfop,
    Expression<String> gtin,
    Expression<int> ccf,
    Expression<int> coo,
    Expression<String> serieEcf,
    Expression<int> item,
    Expression<double> quantidade,
    Expression<double> valorUnitario,
    Expression<double> valorTotal,
    Expression<double> valorTotalItem,
    Expression<double> valorBaseIcms,
    Expression<double> taxaIcms,
    Expression<double> valorIcms,
    Expression<double> taxaDesconto,
    Expression<double> valorDesconto,
    Expression<double> taxaIssqn,
    Expression<double> valorIssqn,
    Expression<double> taxaPis,
    Expression<double> valorPis,
    Expression<double> taxaCofins,
    Expression<double> valorCofins,
    Expression<double> taxaAcrescimo,
    Expression<double> valorAcrescimo,
    Expression<String> totalizadorParcial,
    Expression<String> cst,
    Expression<String> cancelado,
    Expression<String> movimentaEstoque,
    Expression<String> ecfIcmsSt,
    Expression<double> valorImpostoFederal,
    Expression<double> valorImpostoEstadual,
    Expression<double> valorImpostoMunicipal,
    Expression<String> hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (idPdvVendaCabecalho != null)
        'ID_PDV_VENDA_CABECALHO': idPdvVendaCabecalho,
      if (cfop != null) 'CFOP': cfop,
      if (gtin != null) 'GTIN': gtin,
      if (ccf != null) 'CCF': ccf,
      if (coo != null) 'COO': coo,
      if (serieEcf != null) 'SERIE_ECF': serieEcf,
      if (item != null) 'ITEM': item,
      if (quantidade != null) 'QUANTIDADE': quantidade,
      if (valorUnitario != null) 'VALOR_UNITARIO': valorUnitario,
      if (valorTotal != null) 'VALOR_TOTAL': valorTotal,
      if (valorTotalItem != null) 'VALOR_TOTAL_ITEM': valorTotalItem,
      if (valorBaseIcms != null) 'VALOR_BASE_ICMS': valorBaseIcms,
      if (taxaIcms != null) 'TAXA_ICMS': taxaIcms,
      if (valorIcms != null) 'VALOR_ICMS': valorIcms,
      if (taxaDesconto != null) 'TAXA_DESCONTO': taxaDesconto,
      if (valorDesconto != null) 'VALOR_DESCONTO': valorDesconto,
      if (taxaIssqn != null) 'TAXA_ISSQN': taxaIssqn,
      if (valorIssqn != null) 'VALOR_ISSQN': valorIssqn,
      if (taxaPis != null) 'TAXA_PIS': taxaPis,
      if (valorPis != null) 'VALOR_PIS': valorPis,
      if (taxaCofins != null) 'TAXA_COFINS': taxaCofins,
      if (valorCofins != null) 'VALOR_COFINS': valorCofins,
      if (taxaAcrescimo != null) 'TAXA_ACRESCIMO': taxaAcrescimo,
      if (valorAcrescimo != null) 'VALOR_ACRESCIMO': valorAcrescimo,
      if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
      if (cst != null) 'CST': cst,
      if (cancelado != null) 'CANCELADO': cancelado,
      if (movimentaEstoque != null) 'MOVIMENTA_ESTOQUE': movimentaEstoque,
      if (ecfIcmsSt != null) 'ECF_ICMS_ST': ecfIcmsSt,
      if (valorImpostoFederal != null)
        'VALOR_IMPOSTO_FEDERAL': valorImpostoFederal,
      if (valorImpostoEstadual != null)
        'VALOR_IMPOSTO_ESTADUAL': valorImpostoEstadual,
      if (valorImpostoMunicipal != null)
        'VALOR_IMPOSTO_MUNICIPAL': valorImpostoMunicipal,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  PdvVendaDetalhesCompanion copyWith(
      {Value<int> id,
      Value<int> idProduto,
      Value<int> idPdvVendaCabecalho,
      Value<int> cfop,
      Value<String> gtin,
      Value<int> ccf,
      Value<int> coo,
      Value<String> serieEcf,
      Value<int> item,
      Value<double> quantidade,
      Value<double> valorUnitario,
      Value<double> valorTotal,
      Value<double> valorTotalItem,
      Value<double> valorBaseIcms,
      Value<double> taxaIcms,
      Value<double> valorIcms,
      Value<double> taxaDesconto,
      Value<double> valorDesconto,
      Value<double> taxaIssqn,
      Value<double> valorIssqn,
      Value<double> taxaPis,
      Value<double> valorPis,
      Value<double> taxaCofins,
      Value<double> valorCofins,
      Value<double> taxaAcrescimo,
      Value<double> valorAcrescimo,
      Value<String> totalizadorParcial,
      Value<String> cst,
      Value<String> cancelado,
      Value<String> movimentaEstoque,
      Value<String> ecfIcmsSt,
      Value<double> valorImpostoFederal,
      Value<double> valorImpostoEstadual,
      Value<double> valorImpostoMunicipal,
      Value<String> hashRegistro}) {
    return PdvVendaDetalhesCompanion(
      id: id ?? this.id,
      idProduto: idProduto ?? this.idProduto,
      idPdvVendaCabecalho: idPdvVendaCabecalho ?? this.idPdvVendaCabecalho,
      cfop: cfop ?? this.cfop,
      gtin: gtin ?? this.gtin,
      ccf: ccf ?? this.ccf,
      coo: coo ?? this.coo,
      serieEcf: serieEcf ?? this.serieEcf,
      item: item ?? this.item,
      quantidade: quantidade ?? this.quantidade,
      valorUnitario: valorUnitario ?? this.valorUnitario,
      valorTotal: valorTotal ?? this.valorTotal,
      valorTotalItem: valorTotalItem ?? this.valorTotalItem,
      valorBaseIcms: valorBaseIcms ?? this.valorBaseIcms,
      taxaIcms: taxaIcms ?? this.taxaIcms,
      valorIcms: valorIcms ?? this.valorIcms,
      taxaDesconto: taxaDesconto ?? this.taxaDesconto,
      valorDesconto: valorDesconto ?? this.valorDesconto,
      taxaIssqn: taxaIssqn ?? this.taxaIssqn,
      valorIssqn: valorIssqn ?? this.valorIssqn,
      taxaPis: taxaPis ?? this.taxaPis,
      valorPis: valorPis ?? this.valorPis,
      taxaCofins: taxaCofins ?? this.taxaCofins,
      valorCofins: valorCofins ?? this.valorCofins,
      taxaAcrescimo: taxaAcrescimo ?? this.taxaAcrescimo,
      valorAcrescimo: valorAcrescimo ?? this.valorAcrescimo,
      totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
      cst: cst ?? this.cst,
      cancelado: cancelado ?? this.cancelado,
      movimentaEstoque: movimentaEstoque ?? this.movimentaEstoque,
      ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
      valorImpostoFederal: valorImpostoFederal ?? this.valorImpostoFederal,
      valorImpostoEstadual: valorImpostoEstadual ?? this.valorImpostoEstadual,
      valorImpostoMunicipal:
          valorImpostoMunicipal ?? this.valorImpostoMunicipal,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (idPdvVendaCabecalho.present) {
      map['ID_PDV_VENDA_CABECALHO'] = Variable<int>(idPdvVendaCabecalho.value);
    }
    if (cfop.present) {
      map['CFOP'] = Variable<int>(cfop.value);
    }
    if (gtin.present) {
      map['GTIN'] = Variable<String>(gtin.value);
    }
    if (ccf.present) {
      map['CCF'] = Variable<int>(ccf.value);
    }
    if (coo.present) {
      map['COO'] = Variable<int>(coo.value);
    }
    if (serieEcf.present) {
      map['SERIE_ECF'] = Variable<String>(serieEcf.value);
    }
    if (item.present) {
      map['ITEM'] = Variable<int>(item.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<double>(quantidade.value);
    }
    if (valorUnitario.present) {
      map['VALOR_UNITARIO'] = Variable<double>(valorUnitario.value);
    }
    if (valorTotal.present) {
      map['VALOR_TOTAL'] = Variable<double>(valorTotal.value);
    }
    if (valorTotalItem.present) {
      map['VALOR_TOTAL_ITEM'] = Variable<double>(valorTotalItem.value);
    }
    if (valorBaseIcms.present) {
      map['VALOR_BASE_ICMS'] = Variable<double>(valorBaseIcms.value);
    }
    if (taxaIcms.present) {
      map['TAXA_ICMS'] = Variable<double>(taxaIcms.value);
    }
    if (valorIcms.present) {
      map['VALOR_ICMS'] = Variable<double>(valorIcms.value);
    }
    if (taxaDesconto.present) {
      map['TAXA_DESCONTO'] = Variable<double>(taxaDesconto.value);
    }
    if (valorDesconto.present) {
      map['VALOR_DESCONTO'] = Variable<double>(valorDesconto.value);
    }
    if (taxaIssqn.present) {
      map['TAXA_ISSQN'] = Variable<double>(taxaIssqn.value);
    }
    if (valorIssqn.present) {
      map['VALOR_ISSQN'] = Variable<double>(valorIssqn.value);
    }
    if (taxaPis.present) {
      map['TAXA_PIS'] = Variable<double>(taxaPis.value);
    }
    if (valorPis.present) {
      map['VALOR_PIS'] = Variable<double>(valorPis.value);
    }
    if (taxaCofins.present) {
      map['TAXA_COFINS'] = Variable<double>(taxaCofins.value);
    }
    if (valorCofins.present) {
      map['VALOR_COFINS'] = Variable<double>(valorCofins.value);
    }
    if (taxaAcrescimo.present) {
      map['TAXA_ACRESCIMO'] = Variable<double>(taxaAcrescimo.value);
    }
    if (valorAcrescimo.present) {
      map['VALOR_ACRESCIMO'] = Variable<double>(valorAcrescimo.value);
    }
    if (totalizadorParcial.present) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial.value);
    }
    if (cst.present) {
      map['CST'] = Variable<String>(cst.value);
    }
    if (cancelado.present) {
      map['CANCELADO'] = Variable<String>(cancelado.value);
    }
    if (movimentaEstoque.present) {
      map['MOVIMENTA_ESTOQUE'] = Variable<String>(movimentaEstoque.value);
    }
    if (ecfIcmsSt.present) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt.value);
    }
    if (valorImpostoFederal.present) {
      map['VALOR_IMPOSTO_FEDERAL'] =
          Variable<double>(valorImpostoFederal.value);
    }
    if (valorImpostoEstadual.present) {
      map['VALOR_IMPOSTO_ESTADUAL'] =
          Variable<double>(valorImpostoEstadual.value);
    }
    if (valorImpostoMunicipal.present) {
      map['VALOR_IMPOSTO_MUNICIPAL'] =
          Variable<double>(valorImpostoMunicipal.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('PdvVendaDetalhesCompanion(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('idPdvVendaCabecalho: $idPdvVendaCabecalho, ')
          ..write('cfop: $cfop, ')
          ..write('gtin: $gtin, ')
          ..write('ccf: $ccf, ')
          ..write('coo: $coo, ')
          ..write('serieEcf: $serieEcf, ')
          ..write('item: $item, ')
          ..write('quantidade: $quantidade, ')
          ..write('valorUnitario: $valorUnitario, ')
          ..write('valorTotal: $valorTotal, ')
          ..write('valorTotalItem: $valorTotalItem, ')
          ..write('valorBaseIcms: $valorBaseIcms, ')
          ..write('taxaIcms: $taxaIcms, ')
          ..write('valorIcms: $valorIcms, ')
          ..write('taxaDesconto: $taxaDesconto, ')
          ..write('valorDesconto: $valorDesconto, ')
          ..write('taxaIssqn: $taxaIssqn, ')
          ..write('valorIssqn: $valorIssqn, ')
          ..write('taxaPis: $taxaPis, ')
          ..write('valorPis: $valorPis, ')
          ..write('taxaCofins: $taxaCofins, ')
          ..write('valorCofins: $valorCofins, ')
          ..write('taxaAcrescimo: $taxaAcrescimo, ')
          ..write('valorAcrescimo: $valorAcrescimo, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('cst: $cst, ')
          ..write('cancelado: $cancelado, ')
          ..write('movimentaEstoque: $movimentaEstoque, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('valorImpostoFederal: $valorImpostoFederal, ')
          ..write('valorImpostoEstadual: $valorImpostoEstadual, ')
          ..write('valorImpostoMunicipal: $valorImpostoMunicipal, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $PdvVendaDetalhesTable extends PdvVendaDetalhes
    with TableInfo<$PdvVendaDetalhesTable, PdvVendaDetalhe> {
  final GeneratedDatabase _db;
  final String _alias;
  $PdvVendaDetalhesTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  GeneratedIntColumn _idProduto;
  @override
  GeneratedIntColumn get idProduto => _idProduto ??= _constructIdProduto();
  GeneratedIntColumn _constructIdProduto() {
    return GeneratedIntColumn('ID_PRODUTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  }

  final VerificationMeta _idPdvVendaCabecalhoMeta =
      const VerificationMeta('idPdvVendaCabecalho');
  GeneratedIntColumn _idPdvVendaCabecalho;
  @override
  GeneratedIntColumn get idPdvVendaCabecalho =>
      _idPdvVendaCabecalho ??= _constructIdPdvVendaCabecalho();
  GeneratedIntColumn _constructIdPdvVendaCabecalho() {
    return GeneratedIntColumn('ID_PDV_VENDA_CABECALHO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PDV_VENDA_CABECALHO(ID)');
  }

  final VerificationMeta _cfopMeta = const VerificationMeta('cfop');
  GeneratedIntColumn _cfop;
  @override
  GeneratedIntColumn get cfop => _cfop ??= _constructCfop();
  GeneratedIntColumn _constructCfop() {
    return GeneratedIntColumn(
      'CFOP',
      $tableName,
      true,
    );
  }

  final VerificationMeta _gtinMeta = const VerificationMeta('gtin');
  GeneratedTextColumn _gtin;
  @override
  GeneratedTextColumn get gtin => _gtin ??= _constructGtin();
  GeneratedTextColumn _constructGtin() {
    return GeneratedTextColumn('GTIN', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _ccfMeta = const VerificationMeta('ccf');
  GeneratedIntColumn _ccf;
  @override
  GeneratedIntColumn get ccf => _ccf ??= _constructCcf();
  GeneratedIntColumn _constructCcf() {
    return GeneratedIntColumn(
      'CCF',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cooMeta = const VerificationMeta('coo');
  GeneratedIntColumn _coo;
  @override
  GeneratedIntColumn get coo => _coo ??= _constructCoo();
  GeneratedIntColumn _constructCoo() {
    return GeneratedIntColumn(
      'COO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _serieEcfMeta = const VerificationMeta('serieEcf');
  GeneratedTextColumn _serieEcf;
  @override
  GeneratedTextColumn get serieEcf => _serieEcf ??= _constructSerieEcf();
  GeneratedTextColumn _constructSerieEcf() {
    return GeneratedTextColumn('SERIE_ECF', $tableName, true,
        minTextLength: 1, maxTextLength: 20);
  }

  final VerificationMeta _itemMeta = const VerificationMeta('item');
  GeneratedIntColumn _item;
  @override
  GeneratedIntColumn get item => _item ??= _constructItem();
  GeneratedIntColumn _constructItem() {
    return GeneratedIntColumn(
      'ITEM',
      $tableName,
      true,
    );
  }

  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  GeneratedRealColumn _quantidade;
  @override
  GeneratedRealColumn get quantidade => _quantidade ??= _constructQuantidade();
  GeneratedRealColumn _constructQuantidade() {
    return GeneratedRealColumn(
      'QUANTIDADE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorUnitarioMeta =
      const VerificationMeta('valorUnitario');
  GeneratedRealColumn _valorUnitario;
  @override
  GeneratedRealColumn get valorUnitario =>
      _valorUnitario ??= _constructValorUnitario();
  GeneratedRealColumn _constructValorUnitario() {
    return GeneratedRealColumn(
      'VALOR_UNITARIO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorTotalMeta = const VerificationMeta('valorTotal');
  GeneratedRealColumn _valorTotal;
  @override
  GeneratedRealColumn get valorTotal => _valorTotal ??= _constructValorTotal();
  GeneratedRealColumn _constructValorTotal() {
    return GeneratedRealColumn(
      'VALOR_TOTAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorTotalItemMeta =
      const VerificationMeta('valorTotalItem');
  GeneratedRealColumn _valorTotalItem;
  @override
  GeneratedRealColumn get valorTotalItem =>
      _valorTotalItem ??= _constructValorTotalItem();
  GeneratedRealColumn _constructValorTotalItem() {
    return GeneratedRealColumn(
      'VALOR_TOTAL_ITEM',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorBaseIcmsMeta =
      const VerificationMeta('valorBaseIcms');
  GeneratedRealColumn _valorBaseIcms;
  @override
  GeneratedRealColumn get valorBaseIcms =>
      _valorBaseIcms ??= _constructValorBaseIcms();
  GeneratedRealColumn _constructValorBaseIcms() {
    return GeneratedRealColumn(
      'VALOR_BASE_ICMS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaIcmsMeta = const VerificationMeta('taxaIcms');
  GeneratedRealColumn _taxaIcms;
  @override
  GeneratedRealColumn get taxaIcms => _taxaIcms ??= _constructTaxaIcms();
  GeneratedRealColumn _constructTaxaIcms() {
    return GeneratedRealColumn(
      'TAXA_ICMS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorIcmsMeta = const VerificationMeta('valorIcms');
  GeneratedRealColumn _valorIcms;
  @override
  GeneratedRealColumn get valorIcms => _valorIcms ??= _constructValorIcms();
  GeneratedRealColumn _constructValorIcms() {
    return GeneratedRealColumn(
      'VALOR_ICMS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaDescontoMeta =
      const VerificationMeta('taxaDesconto');
  GeneratedRealColumn _taxaDesconto;
  @override
  GeneratedRealColumn get taxaDesconto =>
      _taxaDesconto ??= _constructTaxaDesconto();
  GeneratedRealColumn _constructTaxaDesconto() {
    return GeneratedRealColumn(
      'TAXA_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorDescontoMeta =
      const VerificationMeta('valorDesconto');
  GeneratedRealColumn _valorDesconto;
  @override
  GeneratedRealColumn get valorDesconto =>
      _valorDesconto ??= _constructValorDesconto();
  GeneratedRealColumn _constructValorDesconto() {
    return GeneratedRealColumn(
      'VALOR_DESCONTO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaIssqnMeta = const VerificationMeta('taxaIssqn');
  GeneratedRealColumn _taxaIssqn;
  @override
  GeneratedRealColumn get taxaIssqn => _taxaIssqn ??= _constructTaxaIssqn();
  GeneratedRealColumn _constructTaxaIssqn() {
    return GeneratedRealColumn(
      'TAXA_ISSQN',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorIssqnMeta = const VerificationMeta('valorIssqn');
  GeneratedRealColumn _valorIssqn;
  @override
  GeneratedRealColumn get valorIssqn => _valorIssqn ??= _constructValorIssqn();
  GeneratedRealColumn _constructValorIssqn() {
    return GeneratedRealColumn(
      'VALOR_ISSQN',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaPisMeta = const VerificationMeta('taxaPis');
  GeneratedRealColumn _taxaPis;
  @override
  GeneratedRealColumn get taxaPis => _taxaPis ??= _constructTaxaPis();
  GeneratedRealColumn _constructTaxaPis() {
    return GeneratedRealColumn(
      'TAXA_PIS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorPisMeta = const VerificationMeta('valorPis');
  GeneratedRealColumn _valorPis;
  @override
  GeneratedRealColumn get valorPis => _valorPis ??= _constructValorPis();
  GeneratedRealColumn _constructValorPis() {
    return GeneratedRealColumn(
      'VALOR_PIS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaCofinsMeta = const VerificationMeta('taxaCofins');
  GeneratedRealColumn _taxaCofins;
  @override
  GeneratedRealColumn get taxaCofins => _taxaCofins ??= _constructTaxaCofins();
  GeneratedRealColumn _constructTaxaCofins() {
    return GeneratedRealColumn(
      'TAXA_COFINS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorCofinsMeta =
      const VerificationMeta('valorCofins');
  GeneratedRealColumn _valorCofins;
  @override
  GeneratedRealColumn get valorCofins =>
      _valorCofins ??= _constructValorCofins();
  GeneratedRealColumn _constructValorCofins() {
    return GeneratedRealColumn(
      'VALOR_COFINS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaAcrescimoMeta =
      const VerificationMeta('taxaAcrescimo');
  GeneratedRealColumn _taxaAcrescimo;
  @override
  GeneratedRealColumn get taxaAcrescimo =>
      _taxaAcrescimo ??= _constructTaxaAcrescimo();
  GeneratedRealColumn _constructTaxaAcrescimo() {
    return GeneratedRealColumn(
      'TAXA_ACRESCIMO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorAcrescimoMeta =
      const VerificationMeta('valorAcrescimo');
  GeneratedRealColumn _valorAcrescimo;
  @override
  GeneratedRealColumn get valorAcrescimo =>
      _valorAcrescimo ??= _constructValorAcrescimo();
  GeneratedRealColumn _constructValorAcrescimo() {
    return GeneratedRealColumn(
      'VALOR_ACRESCIMO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _totalizadorParcialMeta =
      const VerificationMeta('totalizadorParcial');
  GeneratedTextColumn _totalizadorParcial;
  @override
  GeneratedTextColumn get totalizadorParcial =>
      _totalizadorParcial ??= _constructTotalizadorParcial();
  GeneratedTextColumn _constructTotalizadorParcial() {
    return GeneratedTextColumn('TOTALIZADOR_PARCIAL', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _cstMeta = const VerificationMeta('cst');
  GeneratedTextColumn _cst;
  @override
  GeneratedTextColumn get cst => _cst ??= _constructCst();
  GeneratedTextColumn _constructCst() {
    return GeneratedTextColumn('CST', $tableName, true,
        minTextLength: 1, maxTextLength: 3);
  }

  final VerificationMeta _canceladoMeta = const VerificationMeta('cancelado');
  GeneratedTextColumn _cancelado;
  @override
  GeneratedTextColumn get cancelado => _cancelado ??= _constructCancelado();
  GeneratedTextColumn _constructCancelado() {
    return GeneratedTextColumn('CANCELADO', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _movimentaEstoqueMeta =
      const VerificationMeta('movimentaEstoque');
  GeneratedTextColumn _movimentaEstoque;
  @override
  GeneratedTextColumn get movimentaEstoque =>
      _movimentaEstoque ??= _constructMovimentaEstoque();
  GeneratedTextColumn _constructMovimentaEstoque() {
    return GeneratedTextColumn('MOVIMENTA_ESTOQUE', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _ecfIcmsStMeta = const VerificationMeta('ecfIcmsSt');
  GeneratedTextColumn _ecfIcmsSt;
  @override
  GeneratedTextColumn get ecfIcmsSt => _ecfIcmsSt ??= _constructEcfIcmsSt();
  GeneratedTextColumn _constructEcfIcmsSt() {
    return GeneratedTextColumn('ECF_ICMS_ST', $tableName, true,
        minTextLength: 1, maxTextLength: 4);
  }

  final VerificationMeta _valorImpostoFederalMeta =
      const VerificationMeta('valorImpostoFederal');
  GeneratedRealColumn _valorImpostoFederal;
  @override
  GeneratedRealColumn get valorImpostoFederal =>
      _valorImpostoFederal ??= _constructValorImpostoFederal();
  GeneratedRealColumn _constructValorImpostoFederal() {
    return GeneratedRealColumn(
      'VALOR_IMPOSTO_FEDERAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorImpostoEstadualMeta =
      const VerificationMeta('valorImpostoEstadual');
  GeneratedRealColumn _valorImpostoEstadual;
  @override
  GeneratedRealColumn get valorImpostoEstadual =>
      _valorImpostoEstadual ??= _constructValorImpostoEstadual();
  GeneratedRealColumn _constructValorImpostoEstadual() {
    return GeneratedRealColumn(
      'VALOR_IMPOSTO_ESTADUAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorImpostoMunicipalMeta =
      const VerificationMeta('valorImpostoMunicipal');
  GeneratedRealColumn _valorImpostoMunicipal;
  @override
  GeneratedRealColumn get valorImpostoMunicipal =>
      _valorImpostoMunicipal ??= _constructValorImpostoMunicipal();
  GeneratedRealColumn _constructValorImpostoMunicipal() {
    return GeneratedRealColumn(
      'VALOR_IMPOSTO_MUNICIPAL',
      $tableName,
      true,
    );
  }

  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  GeneratedTextColumn _hashRegistro;
  @override
  GeneratedTextColumn get hashRegistro =>
      _hashRegistro ??= _constructHashRegistro();
  GeneratedTextColumn _constructHashRegistro() {
    return GeneratedTextColumn('HASH_REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idProduto,
        idPdvVendaCabecalho,
        cfop,
        gtin,
        ccf,
        coo,
        serieEcf,
        item,
        quantidade,
        valorUnitario,
        valorTotal,
        valorTotalItem,
        valorBaseIcms,
        taxaIcms,
        valorIcms,
        taxaDesconto,
        valorDesconto,
        taxaIssqn,
        valorIssqn,
        taxaPis,
        valorPis,
        taxaCofins,
        valorCofins,
        taxaAcrescimo,
        valorAcrescimo,
        totalizadorParcial,
        cst,
        cancelado,
        movimentaEstoque,
        ecfIcmsSt,
        valorImpostoFederal,
        valorImpostoEstadual,
        valorImpostoMunicipal,
        hashRegistro
      ];
  @override
  $PdvVendaDetalhesTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PDV_VENDA_DETALHE';
  @override
  final String actualTableName = 'PDV_VENDA_DETALHE';
  @override
  VerificationContext validateIntegrity(Insertable<PdvVendaDetalhe> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO'], _idProdutoMeta));
    }
    if (data.containsKey('ID_PDV_VENDA_CABECALHO')) {
      context.handle(
          _idPdvVendaCabecalhoMeta,
          idPdvVendaCabecalho.isAcceptableOrUnknown(
              data['ID_PDV_VENDA_CABECALHO'], _idPdvVendaCabecalhoMeta));
    }
    if (data.containsKey('CFOP')) {
      context.handle(
          _cfopMeta, cfop.isAcceptableOrUnknown(data['CFOP'], _cfopMeta));
    }
    if (data.containsKey('GTIN')) {
      context.handle(
          _gtinMeta, gtin.isAcceptableOrUnknown(data['GTIN'], _gtinMeta));
    }
    if (data.containsKey('CCF')) {
      context.handle(
          _ccfMeta, ccf.isAcceptableOrUnknown(data['CCF'], _ccfMeta));
    }
    if (data.containsKey('COO')) {
      context.handle(
          _cooMeta, coo.isAcceptableOrUnknown(data['COO'], _cooMeta));
    }
    if (data.containsKey('SERIE_ECF')) {
      context.handle(_serieEcfMeta,
          serieEcf.isAcceptableOrUnknown(data['SERIE_ECF'], _serieEcfMeta));
    }
    if (data.containsKey('ITEM')) {
      context.handle(
          _itemMeta, item.isAcceptableOrUnknown(data['ITEM'], _itemMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE'], _quantidadeMeta));
    }
    if (data.containsKey('VALOR_UNITARIO')) {
      context.handle(
          _valorUnitarioMeta,
          valorUnitario.isAcceptableOrUnknown(
              data['VALOR_UNITARIO'], _valorUnitarioMeta));
    }
    if (data.containsKey('VALOR_TOTAL')) {
      context.handle(
          _valorTotalMeta,
          valorTotal.isAcceptableOrUnknown(
              data['VALOR_TOTAL'], _valorTotalMeta));
    }
    if (data.containsKey('VALOR_TOTAL_ITEM')) {
      context.handle(
          _valorTotalItemMeta,
          valorTotalItem.isAcceptableOrUnknown(
              data['VALOR_TOTAL_ITEM'], _valorTotalItemMeta));
    }
    if (data.containsKey('VALOR_BASE_ICMS')) {
      context.handle(
          _valorBaseIcmsMeta,
          valorBaseIcms.isAcceptableOrUnknown(
              data['VALOR_BASE_ICMS'], _valorBaseIcmsMeta));
    }
    if (data.containsKey('TAXA_ICMS')) {
      context.handle(_taxaIcmsMeta,
          taxaIcms.isAcceptableOrUnknown(data['TAXA_ICMS'], _taxaIcmsMeta));
    }
    if (data.containsKey('VALOR_ICMS')) {
      context.handle(_valorIcmsMeta,
          valorIcms.isAcceptableOrUnknown(data['VALOR_ICMS'], _valorIcmsMeta));
    }
    if (data.containsKey('TAXA_DESCONTO')) {
      context.handle(
          _taxaDescontoMeta,
          taxaDesconto.isAcceptableOrUnknown(
              data['TAXA_DESCONTO'], _taxaDescontoMeta));
    }
    if (data.containsKey('VALOR_DESCONTO')) {
      context.handle(
          _valorDescontoMeta,
          valorDesconto.isAcceptableOrUnknown(
              data['VALOR_DESCONTO'], _valorDescontoMeta));
    }
    if (data.containsKey('TAXA_ISSQN')) {
      context.handle(_taxaIssqnMeta,
          taxaIssqn.isAcceptableOrUnknown(data['TAXA_ISSQN'], _taxaIssqnMeta));
    }
    if (data.containsKey('VALOR_ISSQN')) {
      context.handle(
          _valorIssqnMeta,
          valorIssqn.isAcceptableOrUnknown(
              data['VALOR_ISSQN'], _valorIssqnMeta));
    }
    if (data.containsKey('TAXA_PIS')) {
      context.handle(_taxaPisMeta,
          taxaPis.isAcceptableOrUnknown(data['TAXA_PIS'], _taxaPisMeta));
    }
    if (data.containsKey('VALOR_PIS')) {
      context.handle(_valorPisMeta,
          valorPis.isAcceptableOrUnknown(data['VALOR_PIS'], _valorPisMeta));
    }
    if (data.containsKey('TAXA_COFINS')) {
      context.handle(
          _taxaCofinsMeta,
          taxaCofins.isAcceptableOrUnknown(
              data['TAXA_COFINS'], _taxaCofinsMeta));
    }
    if (data.containsKey('VALOR_COFINS')) {
      context.handle(
          _valorCofinsMeta,
          valorCofins.isAcceptableOrUnknown(
              data['VALOR_COFINS'], _valorCofinsMeta));
    }
    if (data.containsKey('TAXA_ACRESCIMO')) {
      context.handle(
          _taxaAcrescimoMeta,
          taxaAcrescimo.isAcceptableOrUnknown(
              data['TAXA_ACRESCIMO'], _taxaAcrescimoMeta));
    }
    if (data.containsKey('VALOR_ACRESCIMO')) {
      context.handle(
          _valorAcrescimoMeta,
          valorAcrescimo.isAcceptableOrUnknown(
              data['VALOR_ACRESCIMO'], _valorAcrescimoMeta));
    }
    if (data.containsKey('TOTALIZADOR_PARCIAL')) {
      context.handle(
          _totalizadorParcialMeta,
          totalizadorParcial.isAcceptableOrUnknown(
              data['TOTALIZADOR_PARCIAL'], _totalizadorParcialMeta));
    }
    if (data.containsKey('CST')) {
      context.handle(
          _cstMeta, cst.isAcceptableOrUnknown(data['CST'], _cstMeta));
    }
    if (data.containsKey('CANCELADO')) {
      context.handle(_canceladoMeta,
          cancelado.isAcceptableOrUnknown(data['CANCELADO'], _canceladoMeta));
    }
    if (data.containsKey('MOVIMENTA_ESTOQUE')) {
      context.handle(
          _movimentaEstoqueMeta,
          movimentaEstoque.isAcceptableOrUnknown(
              data['MOVIMENTA_ESTOQUE'], _movimentaEstoqueMeta));
    }
    if (data.containsKey('ECF_ICMS_ST')) {
      context.handle(_ecfIcmsStMeta,
          ecfIcmsSt.isAcceptableOrUnknown(data['ECF_ICMS_ST'], _ecfIcmsStMeta));
    }
    if (data.containsKey('VALOR_IMPOSTO_FEDERAL')) {
      context.handle(
          _valorImpostoFederalMeta,
          valorImpostoFederal.isAcceptableOrUnknown(
              data['VALOR_IMPOSTO_FEDERAL'], _valorImpostoFederalMeta));
    }
    if (data.containsKey('VALOR_IMPOSTO_ESTADUAL')) {
      context.handle(
          _valorImpostoEstadualMeta,
          valorImpostoEstadual.isAcceptableOrUnknown(
              data['VALOR_IMPOSTO_ESTADUAL'], _valorImpostoEstadualMeta));
    }
    if (data.containsKey('VALOR_IMPOSTO_MUNICIPAL')) {
      context.handle(
          _valorImpostoMunicipalMeta,
          valorImpostoMunicipal.isAcceptableOrUnknown(
              data['VALOR_IMPOSTO_MUNICIPAL'], _valorImpostoMunicipalMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO'], _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  PdvVendaDetalhe map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return PdvVendaDetalhe.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $PdvVendaDetalhesTable createAlias(String alias) {
    return $PdvVendaDetalhesTable(_db, alias);
  }
}

class Produto extends DataClass implements Insertable<Produto> {
  final int id;
  final int idProdutoUnidade;
  final String gtin;
  final String codigoInterno;
  final String nome;
  final String descricao;
  final String descricaoPdv;
  final double valorCompra;
  final double valorVenda;
  final double quantidadeEstoque;
  final double estoqueMinimo;
  final double estoqueMaximo;
  final String codigoNcm;
  final String iat;
  final String ippt;
  final String tipoItemSped;
  final double taxaIpi;
  final double taxaIssqn;
  final double taxaPis;
  final double taxaCofins;
  final double taxaIcms;
  final String cst;
  final String csosn;
  final String totalizadorParcial;
  final String ecfIcmsSt;
  final int codigoBalanca;
  final String pafPSt;
  final String hashRegistro;
  Produto(
      {@required this.id,
      this.idProdutoUnidade,
      this.gtin,
      this.codigoInterno,
      this.nome,
      this.descricao,
      this.descricaoPdv,
      this.valorCompra,
      this.valorVenda,
      this.quantidadeEstoque,
      this.estoqueMinimo,
      this.estoqueMaximo,
      this.codigoNcm,
      this.iat,
      this.ippt,
      this.tipoItemSped,
      this.taxaIpi,
      this.taxaIssqn,
      this.taxaPis,
      this.taxaCofins,
      this.taxaIcms,
      this.cst,
      this.csosn,
      this.totalizadorParcial,
      this.ecfIcmsSt,
      this.codigoBalanca,
      this.pafPSt,
      this.hashRegistro});
  factory Produto.fromData(Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return Produto(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idProdutoUnidade: intType.mapFromDatabaseResponse(
          data['${effectivePrefix}ID_PRODUTO_UNIDADE']),
      gtin: stringType.mapFromDatabaseResponse(data['${effectivePrefix}GTIN']),
      codigoInterno: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_INTERNO']),
      nome: stringType.mapFromDatabaseResponse(data['${effectivePrefix}NOME']),
      descricao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
      descricaoPdv: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO_PDV']),
      valorCompra: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_COMPRA']),
      valorVenda: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}VALOR_VENDA']),
      quantidadeEstoque: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}QUANTIDADE_ESTOQUE']),
      estoqueMinimo: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}ESTOQUE_MINIMO']),
      estoqueMaximo: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}ESTOQUE_MAXIMO']),
      codigoNcm: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_NCM']),
      iat: stringType.mapFromDatabaseResponse(data['${effectivePrefix}IAT']),
      ippt: stringType.mapFromDatabaseResponse(data['${effectivePrefix}IPPT']),
      tipoItemSped: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}TIPO_ITEM_SPED']),
      taxaIpi: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_IPI']),
      taxaIssqn: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ISSQN']),
      taxaPis: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_PIS']),
      taxaCofins: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_COFINS']),
      taxaIcms: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}TAXA_ICMS']),
      cst: stringType.mapFromDatabaseResponse(data['${effectivePrefix}CST']),
      csosn:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}CSOSN']),
      totalizadorParcial: stringType.mapFromDatabaseResponse(
          data['${effectivePrefix}TOTALIZADOR_PARCIAL']),
      ecfIcmsSt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}ECF_ICMS_ST']),
      codigoBalanca: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}CODIGO_BALANCA']),
      pafPSt: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}PAF_P_ST']),
      hashRegistro: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}HASH_REGISTRO']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProdutoUnidade != null) {
      map['ID_PRODUTO_UNIDADE'] = Variable<int>(idProdutoUnidade);
    }
    if (!nullToAbsent || gtin != null) {
      map['GTIN'] = Variable<String>(gtin);
    }
    if (!nullToAbsent || codigoInterno != null) {
      map['CODIGO_INTERNO'] = Variable<String>(codigoInterno);
    }
    if (!nullToAbsent || nome != null) {
      map['NOME'] = Variable<String>(nome);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || descricaoPdv != null) {
      map['DESCRICAO_PDV'] = Variable<String>(descricaoPdv);
    }
    if (!nullToAbsent || valorCompra != null) {
      map['VALOR_COMPRA'] = Variable<double>(valorCompra);
    }
    if (!nullToAbsent || valorVenda != null) {
      map['VALOR_VENDA'] = Variable<double>(valorVenda);
    }
    if (!nullToAbsent || quantidadeEstoque != null) {
      map['QUANTIDADE_ESTOQUE'] = Variable<double>(quantidadeEstoque);
    }
    if (!nullToAbsent || estoqueMinimo != null) {
      map['ESTOQUE_MINIMO'] = Variable<double>(estoqueMinimo);
    }
    if (!nullToAbsent || estoqueMaximo != null) {
      map['ESTOQUE_MAXIMO'] = Variable<double>(estoqueMaximo);
    }
    if (!nullToAbsent || codigoNcm != null) {
      map['CODIGO_NCM'] = Variable<String>(codigoNcm);
    }
    if (!nullToAbsent || iat != null) {
      map['IAT'] = Variable<String>(iat);
    }
    if (!nullToAbsent || ippt != null) {
      map['IPPT'] = Variable<String>(ippt);
    }
    if (!nullToAbsent || tipoItemSped != null) {
      map['TIPO_ITEM_SPED'] = Variable<String>(tipoItemSped);
    }
    if (!nullToAbsent || taxaIpi != null) {
      map['TAXA_IPI'] = Variable<double>(taxaIpi);
    }
    if (!nullToAbsent || taxaIssqn != null) {
      map['TAXA_ISSQN'] = Variable<double>(taxaIssqn);
    }
    if (!nullToAbsent || taxaPis != null) {
      map['TAXA_PIS'] = Variable<double>(taxaPis);
    }
    if (!nullToAbsent || taxaCofins != null) {
      map['TAXA_COFINS'] = Variable<double>(taxaCofins);
    }
    if (!nullToAbsent || taxaIcms != null) {
      map['TAXA_ICMS'] = Variable<double>(taxaIcms);
    }
    if (!nullToAbsent || cst != null) {
      map['CST'] = Variable<String>(cst);
    }
    if (!nullToAbsent || csosn != null) {
      map['CSOSN'] = Variable<String>(csosn);
    }
    if (!nullToAbsent || totalizadorParcial != null) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial);
    }
    if (!nullToAbsent || ecfIcmsSt != null) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt);
    }
    if (!nullToAbsent || codigoBalanca != null) {
      map['CODIGO_BALANCA'] = Variable<int>(codigoBalanca);
    }
    if (!nullToAbsent || pafPSt != null) {
      map['PAF_P_ST'] = Variable<String>(pafPSt);
    }
    if (!nullToAbsent || hashRegistro != null) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro);
    }
    return map;
  }

  ProdutosCompanion toCompanion(bool nullToAbsent) {
    return ProdutosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProdutoUnidade: idProdutoUnidade == null && nullToAbsent
          ? const Value.absent()
          : Value(idProdutoUnidade),
      gtin: gtin == null && nullToAbsent ? const Value.absent() : Value(gtin),
      codigoInterno: codigoInterno == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoInterno),
      nome: nome == null && nullToAbsent ? const Value.absent() : Value(nome),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      descricaoPdv: descricaoPdv == null && nullToAbsent
          ? const Value.absent()
          : Value(descricaoPdv),
      valorCompra: valorCompra == null && nullToAbsent
          ? const Value.absent()
          : Value(valorCompra),
      valorVenda: valorVenda == null && nullToAbsent
          ? const Value.absent()
          : Value(valorVenda),
      quantidadeEstoque: quantidadeEstoque == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeEstoque),
      estoqueMinimo: estoqueMinimo == null && nullToAbsent
          ? const Value.absent()
          : Value(estoqueMinimo),
      estoqueMaximo: estoqueMaximo == null && nullToAbsent
          ? const Value.absent()
          : Value(estoqueMaximo),
      codigoNcm: codigoNcm == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoNcm),
      iat: iat == null && nullToAbsent ? const Value.absent() : Value(iat),
      ippt: ippt == null && nullToAbsent ? const Value.absent() : Value(ippt),
      tipoItemSped: tipoItemSped == null && nullToAbsent
          ? const Value.absent()
          : Value(tipoItemSped),
      taxaIpi: taxaIpi == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaIpi),
      taxaIssqn: taxaIssqn == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaIssqn),
      taxaPis: taxaPis == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaPis),
      taxaCofins: taxaCofins == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaCofins),
      taxaIcms: taxaIcms == null && nullToAbsent
          ? const Value.absent()
          : Value(taxaIcms),
      cst: cst == null && nullToAbsent ? const Value.absent() : Value(cst),
      csosn:
          csosn == null && nullToAbsent ? const Value.absent() : Value(csosn),
      totalizadorParcial: totalizadorParcial == null && nullToAbsent
          ? const Value.absent()
          : Value(totalizadorParcial),
      ecfIcmsSt: ecfIcmsSt == null && nullToAbsent
          ? const Value.absent()
          : Value(ecfIcmsSt),
      codigoBalanca: codigoBalanca == null && nullToAbsent
          ? const Value.absent()
          : Value(codigoBalanca),
      pafPSt:
          pafPSt == null && nullToAbsent ? const Value.absent() : Value(pafPSt),
      hashRegistro: hashRegistro == null && nullToAbsent
          ? const Value.absent()
          : Value(hashRegistro),
    );
  }

  factory Produto.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return Produto(
      id: serializer.fromJson<int>(json['id']),
      idProdutoUnidade: serializer.fromJson<int>(json['idProdutoUnidade']),
      gtin: serializer.fromJson<String>(json['gtin']),
      codigoInterno: serializer.fromJson<String>(json['codigoInterno']),
      nome: serializer.fromJson<String>(json['nome']),
      descricao: serializer.fromJson<String>(json['descricao']),
      descricaoPdv: serializer.fromJson<String>(json['descricaoPdv']),
      valorCompra: serializer.fromJson<double>(json['valorCompra']),
      valorVenda: serializer.fromJson<double>(json['valorVenda']),
      quantidadeEstoque: serializer.fromJson<double>(json['quantidadeEstoque']),
      estoqueMinimo: serializer.fromJson<double>(json['estoqueMinimo']),
      estoqueMaximo: serializer.fromJson<double>(json['estoqueMaximo']),
      codigoNcm: serializer.fromJson<String>(json['codigoNcm']),
      iat: serializer.fromJson<String>(json['iat']),
      ippt: serializer.fromJson<String>(json['ippt']),
      tipoItemSped: serializer.fromJson<String>(json['tipoItemSped']),
      taxaIpi: serializer.fromJson<double>(json['taxaIpi']),
      taxaIssqn: serializer.fromJson<double>(json['taxaIssqn']),
      taxaPis: serializer.fromJson<double>(json['taxaPis']),
      taxaCofins: serializer.fromJson<double>(json['taxaCofins']),
      taxaIcms: serializer.fromJson<double>(json['taxaIcms']),
      cst: serializer.fromJson<String>(json['cst']),
      csosn: serializer.fromJson<String>(json['csosn']),
      totalizadorParcial:
          serializer.fromJson<String>(json['totalizadorParcial']),
      ecfIcmsSt: serializer.fromJson<String>(json['ecfIcmsSt']),
      codigoBalanca: serializer.fromJson<int>(json['codigoBalanca']),
      pafPSt: serializer.fromJson<String>(json['pafPSt']),
      hashRegistro: serializer.fromJson<String>(json['hashRegistro']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idProdutoUnidade': serializer.toJson<int>(idProdutoUnidade),
      'gtin': serializer.toJson<String>(gtin),
      'codigoInterno': serializer.toJson<String>(codigoInterno),
      'nome': serializer.toJson<String>(nome),
      'descricao': serializer.toJson<String>(descricao),
      'descricaoPdv': serializer.toJson<String>(descricaoPdv),
      'valorCompra': serializer.toJson<double>(valorCompra),
      'valorVenda': serializer.toJson<double>(valorVenda),
      'quantidadeEstoque': serializer.toJson<double>(quantidadeEstoque),
      'estoqueMinimo': serializer.toJson<double>(estoqueMinimo),
      'estoqueMaximo': serializer.toJson<double>(estoqueMaximo),
      'codigoNcm': serializer.toJson<String>(codigoNcm),
      'iat': serializer.toJson<String>(iat),
      'ippt': serializer.toJson<String>(ippt),
      'tipoItemSped': serializer.toJson<String>(tipoItemSped),
      'taxaIpi': serializer.toJson<double>(taxaIpi),
      'taxaIssqn': serializer.toJson<double>(taxaIssqn),
      'taxaPis': serializer.toJson<double>(taxaPis),
      'taxaCofins': serializer.toJson<double>(taxaCofins),
      'taxaIcms': serializer.toJson<double>(taxaIcms),
      'cst': serializer.toJson<String>(cst),
      'csosn': serializer.toJson<String>(csosn),
      'totalizadorParcial': serializer.toJson<String>(totalizadorParcial),
      'ecfIcmsSt': serializer.toJson<String>(ecfIcmsSt),
      'codigoBalanca': serializer.toJson<int>(codigoBalanca),
      'pafPSt': serializer.toJson<String>(pafPSt),
      'hashRegistro': serializer.toJson<String>(hashRegistro),
    };
  }

  Produto copyWith(
          {int id,
          int idProdutoUnidade,
          String gtin,
          String codigoInterno,
          String nome,
          String descricao,
          String descricaoPdv,
          double valorCompra,
          double valorVenda,
          double quantidadeEstoque,
          double estoqueMinimo,
          double estoqueMaximo,
          String codigoNcm,
          String iat,
          String ippt,
          String tipoItemSped,
          double taxaIpi,
          double taxaIssqn,
          double taxaPis,
          double taxaCofins,
          double taxaIcms,
          String cst,
          String csosn,
          String totalizadorParcial,
          String ecfIcmsSt,
          int codigoBalanca,
          String pafPSt,
          String hashRegistro}) =>
      Produto(
        id: id ?? this.id,
        idProdutoUnidade: idProdutoUnidade ?? this.idProdutoUnidade,
        gtin: gtin ?? this.gtin,
        codigoInterno: codigoInterno ?? this.codigoInterno,
        nome: nome ?? this.nome,
        descricao: descricao ?? this.descricao,
        descricaoPdv: descricaoPdv ?? this.descricaoPdv,
        valorCompra: valorCompra ?? this.valorCompra,
        valorVenda: valorVenda ?? this.valorVenda,
        quantidadeEstoque: quantidadeEstoque ?? this.quantidadeEstoque,
        estoqueMinimo: estoqueMinimo ?? this.estoqueMinimo,
        estoqueMaximo: estoqueMaximo ?? this.estoqueMaximo,
        codigoNcm: codigoNcm ?? this.codigoNcm,
        iat: iat ?? this.iat,
        ippt: ippt ?? this.ippt,
        tipoItemSped: tipoItemSped ?? this.tipoItemSped,
        taxaIpi: taxaIpi ?? this.taxaIpi,
        taxaIssqn: taxaIssqn ?? this.taxaIssqn,
        taxaPis: taxaPis ?? this.taxaPis,
        taxaCofins: taxaCofins ?? this.taxaCofins,
        taxaIcms: taxaIcms ?? this.taxaIcms,
        cst: cst ?? this.cst,
        csosn: csosn ?? this.csosn,
        totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
        ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
        codigoBalanca: codigoBalanca ?? this.codigoBalanca,
        pafPSt: pafPSt ?? this.pafPSt,
        hashRegistro: hashRegistro ?? this.hashRegistro,
      );
  @override
  String toString() {
    return (StringBuffer('Produto(')
          ..write('id: $id, ')
          ..write('idProdutoUnidade: $idProdutoUnidade, ')
          ..write('gtin: $gtin, ')
          ..write('codigoInterno: $codigoInterno, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao, ')
          ..write('descricaoPdv: $descricaoPdv, ')
          ..write('valorCompra: $valorCompra, ')
          ..write('valorVenda: $valorVenda, ')
          ..write('quantidadeEstoque: $quantidadeEstoque, ')
          ..write('estoqueMinimo: $estoqueMinimo, ')
          ..write('estoqueMaximo: $estoqueMaximo, ')
          ..write('codigoNcm: $codigoNcm, ')
          ..write('iat: $iat, ')
          ..write('ippt: $ippt, ')
          ..write('tipoItemSped: $tipoItemSped, ')
          ..write('taxaIpi: $taxaIpi, ')
          ..write('taxaIssqn: $taxaIssqn, ')
          ..write('taxaPis: $taxaPis, ')
          ..write('taxaCofins: $taxaCofins, ')
          ..write('taxaIcms: $taxaIcms, ')
          ..write('cst: $cst, ')
          ..write('csosn: $csosn, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('codigoBalanca: $codigoBalanca, ')
          ..write('pafPSt: $pafPSt, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idProdutoUnidade.hashCode,
          $mrjc(
              gtin.hashCode,
              $mrjc(
                  codigoInterno.hashCode,
                  $mrjc(
                      nome.hashCode,
                      $mrjc(
                          descricao.hashCode,
                          $mrjc(
                              descricaoPdv.hashCode,
                              $mrjc(
                                  valorCompra.hashCode,
                                  $mrjc(
                                      valorVenda.hashCode,
                                      $mrjc(
                                          quantidadeEstoque.hashCode,
                                          $mrjc(
                                              estoqueMinimo.hashCode,
                                              $mrjc(
                                                  estoqueMaximo.hashCode,
                                                  $mrjc(
                                                      codigoNcm.hashCode,
                                                      $mrjc(
                                                          iat.hashCode,
                                                          $mrjc(
                                                              ippt.hashCode,
                                                              $mrjc(
                                                                  tipoItemSped
                                                                      .hashCode,
                                                                  $mrjc(
                                                                      taxaIpi
                                                                          .hashCode,
                                                                      $mrjc(
                                                                          taxaIssqn
                                                                              .hashCode,
                                                                          $mrjc(
                                                                              taxaPis.hashCode,
                                                                              $mrjc(taxaCofins.hashCode, $mrjc(taxaIcms.hashCode, $mrjc(cst.hashCode, $mrjc(csosn.hashCode, $mrjc(totalizadorParcial.hashCode, $mrjc(ecfIcmsSt.hashCode, $mrjc(codigoBalanca.hashCode, $mrjc(pafPSt.hashCode, hashRegistro.hashCode))))))))))))))))))))))))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is Produto &&
          other.id == this.id &&
          other.idProdutoUnidade == this.idProdutoUnidade &&
          other.gtin == this.gtin &&
          other.codigoInterno == this.codigoInterno &&
          other.nome == this.nome &&
          other.descricao == this.descricao &&
          other.descricaoPdv == this.descricaoPdv &&
          other.valorCompra == this.valorCompra &&
          other.valorVenda == this.valorVenda &&
          other.quantidadeEstoque == this.quantidadeEstoque &&
          other.estoqueMinimo == this.estoqueMinimo &&
          other.estoqueMaximo == this.estoqueMaximo &&
          other.codigoNcm == this.codigoNcm &&
          other.iat == this.iat &&
          other.ippt == this.ippt &&
          other.tipoItemSped == this.tipoItemSped &&
          other.taxaIpi == this.taxaIpi &&
          other.taxaIssqn == this.taxaIssqn &&
          other.taxaPis == this.taxaPis &&
          other.taxaCofins == this.taxaCofins &&
          other.taxaIcms == this.taxaIcms &&
          other.cst == this.cst &&
          other.csosn == this.csosn &&
          other.totalizadorParcial == this.totalizadorParcial &&
          other.ecfIcmsSt == this.ecfIcmsSt &&
          other.codigoBalanca == this.codigoBalanca &&
          other.pafPSt == this.pafPSt &&
          other.hashRegistro == this.hashRegistro);
}

class ProdutosCompanion extends UpdateCompanion<Produto> {
  final Value<int> id;
  final Value<int> idProdutoUnidade;
  final Value<String> gtin;
  final Value<String> codigoInterno;
  final Value<String> nome;
  final Value<String> descricao;
  final Value<String> descricaoPdv;
  final Value<double> valorCompra;
  final Value<double> valorVenda;
  final Value<double> quantidadeEstoque;
  final Value<double> estoqueMinimo;
  final Value<double> estoqueMaximo;
  final Value<String> codigoNcm;
  final Value<String> iat;
  final Value<String> ippt;
  final Value<String> tipoItemSped;
  final Value<double> taxaIpi;
  final Value<double> taxaIssqn;
  final Value<double> taxaPis;
  final Value<double> taxaCofins;
  final Value<double> taxaIcms;
  final Value<String> cst;
  final Value<String> csosn;
  final Value<String> totalizadorParcial;
  final Value<String> ecfIcmsSt;
  final Value<int> codigoBalanca;
  final Value<String> pafPSt;
  final Value<String> hashRegistro;
  const ProdutosCompanion({
    this.id = const Value.absent(),
    this.idProdutoUnidade = const Value.absent(),
    this.gtin = const Value.absent(),
    this.codigoInterno = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
    this.descricaoPdv = const Value.absent(),
    this.valorCompra = const Value.absent(),
    this.valorVenda = const Value.absent(),
    this.quantidadeEstoque = const Value.absent(),
    this.estoqueMinimo = const Value.absent(),
    this.estoqueMaximo = const Value.absent(),
    this.codigoNcm = const Value.absent(),
    this.iat = const Value.absent(),
    this.ippt = const Value.absent(),
    this.tipoItemSped = const Value.absent(),
    this.taxaIpi = const Value.absent(),
    this.taxaIssqn = const Value.absent(),
    this.taxaPis = const Value.absent(),
    this.taxaCofins = const Value.absent(),
    this.taxaIcms = const Value.absent(),
    this.cst = const Value.absent(),
    this.csosn = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.codigoBalanca = const Value.absent(),
    this.pafPSt = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  ProdutosCompanion.insert({
    this.id = const Value.absent(),
    this.idProdutoUnidade = const Value.absent(),
    this.gtin = const Value.absent(),
    this.codigoInterno = const Value.absent(),
    this.nome = const Value.absent(),
    this.descricao = const Value.absent(),
    this.descricaoPdv = const Value.absent(),
    this.valorCompra = const Value.absent(),
    this.valorVenda = const Value.absent(),
    this.quantidadeEstoque = const Value.absent(),
    this.estoqueMinimo = const Value.absent(),
    this.estoqueMaximo = const Value.absent(),
    this.codigoNcm = const Value.absent(),
    this.iat = const Value.absent(),
    this.ippt = const Value.absent(),
    this.tipoItemSped = const Value.absent(),
    this.taxaIpi = const Value.absent(),
    this.taxaIssqn = const Value.absent(),
    this.taxaPis = const Value.absent(),
    this.taxaCofins = const Value.absent(),
    this.taxaIcms = const Value.absent(),
    this.cst = const Value.absent(),
    this.csosn = const Value.absent(),
    this.totalizadorParcial = const Value.absent(),
    this.ecfIcmsSt = const Value.absent(),
    this.codigoBalanca = const Value.absent(),
    this.pafPSt = const Value.absent(),
    this.hashRegistro = const Value.absent(),
  });
  static Insertable<Produto> custom({
    Expression<int> id,
    Expression<int> idProdutoUnidade,
    Expression<String> gtin,
    Expression<String> codigoInterno,
    Expression<String> nome,
    Expression<String> descricao,
    Expression<String> descricaoPdv,
    Expression<double> valorCompra,
    Expression<double> valorVenda,
    Expression<double> quantidadeEstoque,
    Expression<double> estoqueMinimo,
    Expression<double> estoqueMaximo,
    Expression<String> codigoNcm,
    Expression<String> iat,
    Expression<String> ippt,
    Expression<String> tipoItemSped,
    Expression<double> taxaIpi,
    Expression<double> taxaIssqn,
    Expression<double> taxaPis,
    Expression<double> taxaCofins,
    Expression<double> taxaIcms,
    Expression<String> cst,
    Expression<String> csosn,
    Expression<String> totalizadorParcial,
    Expression<String> ecfIcmsSt,
    Expression<int> codigoBalanca,
    Expression<String> pafPSt,
    Expression<String> hashRegistro,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProdutoUnidade != null) 'ID_PRODUTO_UNIDADE': idProdutoUnidade,
      if (gtin != null) 'GTIN': gtin,
      if (codigoInterno != null) 'CODIGO_INTERNO': codigoInterno,
      if (nome != null) 'NOME': nome,
      if (descricao != null) 'DESCRICAO': descricao,
      if (descricaoPdv != null) 'DESCRICAO_PDV': descricaoPdv,
      if (valorCompra != null) 'VALOR_COMPRA': valorCompra,
      if (valorVenda != null) 'VALOR_VENDA': valorVenda,
      if (quantidadeEstoque != null) 'QUANTIDADE_ESTOQUE': quantidadeEstoque,
      if (estoqueMinimo != null) 'ESTOQUE_MINIMO': estoqueMinimo,
      if (estoqueMaximo != null) 'ESTOQUE_MAXIMO': estoqueMaximo,
      if (codigoNcm != null) 'CODIGO_NCM': codigoNcm,
      if (iat != null) 'IAT': iat,
      if (ippt != null) 'IPPT': ippt,
      if (tipoItemSped != null) 'TIPO_ITEM_SPED': tipoItemSped,
      if (taxaIpi != null) 'TAXA_IPI': taxaIpi,
      if (taxaIssqn != null) 'TAXA_ISSQN': taxaIssqn,
      if (taxaPis != null) 'TAXA_PIS': taxaPis,
      if (taxaCofins != null) 'TAXA_COFINS': taxaCofins,
      if (taxaIcms != null) 'TAXA_ICMS': taxaIcms,
      if (cst != null) 'CST': cst,
      if (csosn != null) 'CSOSN': csosn,
      if (totalizadorParcial != null) 'TOTALIZADOR_PARCIAL': totalizadorParcial,
      if (ecfIcmsSt != null) 'ECF_ICMS_ST': ecfIcmsSt,
      if (codigoBalanca != null) 'CODIGO_BALANCA': codigoBalanca,
      if (pafPSt != null) 'PAF_P_ST': pafPSt,
      if (hashRegistro != null) 'HASH_REGISTRO': hashRegistro,
    });
  }

  ProdutosCompanion copyWith(
      {Value<int> id,
      Value<int> idProdutoUnidade,
      Value<String> gtin,
      Value<String> codigoInterno,
      Value<String> nome,
      Value<String> descricao,
      Value<String> descricaoPdv,
      Value<double> valorCompra,
      Value<double> valorVenda,
      Value<double> quantidadeEstoque,
      Value<double> estoqueMinimo,
      Value<double> estoqueMaximo,
      Value<String> codigoNcm,
      Value<String> iat,
      Value<String> ippt,
      Value<String> tipoItemSped,
      Value<double> taxaIpi,
      Value<double> taxaIssqn,
      Value<double> taxaPis,
      Value<double> taxaCofins,
      Value<double> taxaIcms,
      Value<String> cst,
      Value<String> csosn,
      Value<String> totalizadorParcial,
      Value<String> ecfIcmsSt,
      Value<int> codigoBalanca,
      Value<String> pafPSt,
      Value<String> hashRegistro}) {
    return ProdutosCompanion(
      id: id ?? this.id,
      idProdutoUnidade: idProdutoUnidade ?? this.idProdutoUnidade,
      gtin: gtin ?? this.gtin,
      codigoInterno: codigoInterno ?? this.codigoInterno,
      nome: nome ?? this.nome,
      descricao: descricao ?? this.descricao,
      descricaoPdv: descricaoPdv ?? this.descricaoPdv,
      valorCompra: valorCompra ?? this.valorCompra,
      valorVenda: valorVenda ?? this.valorVenda,
      quantidadeEstoque: quantidadeEstoque ?? this.quantidadeEstoque,
      estoqueMinimo: estoqueMinimo ?? this.estoqueMinimo,
      estoqueMaximo: estoqueMaximo ?? this.estoqueMaximo,
      codigoNcm: codigoNcm ?? this.codigoNcm,
      iat: iat ?? this.iat,
      ippt: ippt ?? this.ippt,
      tipoItemSped: tipoItemSped ?? this.tipoItemSped,
      taxaIpi: taxaIpi ?? this.taxaIpi,
      taxaIssqn: taxaIssqn ?? this.taxaIssqn,
      taxaPis: taxaPis ?? this.taxaPis,
      taxaCofins: taxaCofins ?? this.taxaCofins,
      taxaIcms: taxaIcms ?? this.taxaIcms,
      cst: cst ?? this.cst,
      csosn: csosn ?? this.csosn,
      totalizadorParcial: totalizadorParcial ?? this.totalizadorParcial,
      ecfIcmsSt: ecfIcmsSt ?? this.ecfIcmsSt,
      codigoBalanca: codigoBalanca ?? this.codigoBalanca,
      pafPSt: pafPSt ?? this.pafPSt,
      hashRegistro: hashRegistro ?? this.hashRegistro,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProdutoUnidade.present) {
      map['ID_PRODUTO_UNIDADE'] = Variable<int>(idProdutoUnidade.value);
    }
    if (gtin.present) {
      map['GTIN'] = Variable<String>(gtin.value);
    }
    if (codigoInterno.present) {
      map['CODIGO_INTERNO'] = Variable<String>(codigoInterno.value);
    }
    if (nome.present) {
      map['NOME'] = Variable<String>(nome.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (descricaoPdv.present) {
      map['DESCRICAO_PDV'] = Variable<String>(descricaoPdv.value);
    }
    if (valorCompra.present) {
      map['VALOR_COMPRA'] = Variable<double>(valorCompra.value);
    }
    if (valorVenda.present) {
      map['VALOR_VENDA'] = Variable<double>(valorVenda.value);
    }
    if (quantidadeEstoque.present) {
      map['QUANTIDADE_ESTOQUE'] = Variable<double>(quantidadeEstoque.value);
    }
    if (estoqueMinimo.present) {
      map['ESTOQUE_MINIMO'] = Variable<double>(estoqueMinimo.value);
    }
    if (estoqueMaximo.present) {
      map['ESTOQUE_MAXIMO'] = Variable<double>(estoqueMaximo.value);
    }
    if (codigoNcm.present) {
      map['CODIGO_NCM'] = Variable<String>(codigoNcm.value);
    }
    if (iat.present) {
      map['IAT'] = Variable<String>(iat.value);
    }
    if (ippt.present) {
      map['IPPT'] = Variable<String>(ippt.value);
    }
    if (tipoItemSped.present) {
      map['TIPO_ITEM_SPED'] = Variable<String>(tipoItemSped.value);
    }
    if (taxaIpi.present) {
      map['TAXA_IPI'] = Variable<double>(taxaIpi.value);
    }
    if (taxaIssqn.present) {
      map['TAXA_ISSQN'] = Variable<double>(taxaIssqn.value);
    }
    if (taxaPis.present) {
      map['TAXA_PIS'] = Variable<double>(taxaPis.value);
    }
    if (taxaCofins.present) {
      map['TAXA_COFINS'] = Variable<double>(taxaCofins.value);
    }
    if (taxaIcms.present) {
      map['TAXA_ICMS'] = Variable<double>(taxaIcms.value);
    }
    if (cst.present) {
      map['CST'] = Variable<String>(cst.value);
    }
    if (csosn.present) {
      map['CSOSN'] = Variable<String>(csosn.value);
    }
    if (totalizadorParcial.present) {
      map['TOTALIZADOR_PARCIAL'] = Variable<String>(totalizadorParcial.value);
    }
    if (ecfIcmsSt.present) {
      map['ECF_ICMS_ST'] = Variable<String>(ecfIcmsSt.value);
    }
    if (codigoBalanca.present) {
      map['CODIGO_BALANCA'] = Variable<int>(codigoBalanca.value);
    }
    if (pafPSt.present) {
      map['PAF_P_ST'] = Variable<String>(pafPSt.value);
    }
    if (hashRegistro.present) {
      map['HASH_REGISTRO'] = Variable<String>(hashRegistro.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutosCompanion(')
          ..write('id: $id, ')
          ..write('idProdutoUnidade: $idProdutoUnidade, ')
          ..write('gtin: $gtin, ')
          ..write('codigoInterno: $codigoInterno, ')
          ..write('nome: $nome, ')
          ..write('descricao: $descricao, ')
          ..write('descricaoPdv: $descricaoPdv, ')
          ..write('valorCompra: $valorCompra, ')
          ..write('valorVenda: $valorVenda, ')
          ..write('quantidadeEstoque: $quantidadeEstoque, ')
          ..write('estoqueMinimo: $estoqueMinimo, ')
          ..write('estoqueMaximo: $estoqueMaximo, ')
          ..write('codigoNcm: $codigoNcm, ')
          ..write('iat: $iat, ')
          ..write('ippt: $ippt, ')
          ..write('tipoItemSped: $tipoItemSped, ')
          ..write('taxaIpi: $taxaIpi, ')
          ..write('taxaIssqn: $taxaIssqn, ')
          ..write('taxaPis: $taxaPis, ')
          ..write('taxaCofins: $taxaCofins, ')
          ..write('taxaIcms: $taxaIcms, ')
          ..write('cst: $cst, ')
          ..write('csosn: $csosn, ')
          ..write('totalizadorParcial: $totalizadorParcial, ')
          ..write('ecfIcmsSt: $ecfIcmsSt, ')
          ..write('codigoBalanca: $codigoBalanca, ')
          ..write('pafPSt: $pafPSt, ')
          ..write('hashRegistro: $hashRegistro')
          ..write(')'))
        .toString();
  }
}

class $ProdutosTable extends Produtos with TableInfo<$ProdutosTable, Produto> {
  final GeneratedDatabase _db;
  final String _alias;
  $ProdutosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idProdutoUnidadeMeta =
      const VerificationMeta('idProdutoUnidade');
  GeneratedIntColumn _idProdutoUnidade;
  @override
  GeneratedIntColumn get idProdutoUnidade =>
      _idProdutoUnidade ??= _constructIdProdutoUnidade();
  GeneratedIntColumn _constructIdProdutoUnidade() {
    return GeneratedIntColumn('ID_PRODUTO_UNIDADE', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PRODUTO_UNIDADE(ID)');
  }

  final VerificationMeta _gtinMeta = const VerificationMeta('gtin');
  GeneratedTextColumn _gtin;
  @override
  GeneratedTextColumn get gtin => _gtin ??= _constructGtin();
  GeneratedTextColumn _constructGtin() {
    return GeneratedTextColumn('GTIN', $tableName, true,
        minTextLength: 1, maxTextLength: 14);
  }

  final VerificationMeta _codigoInternoMeta =
      const VerificationMeta('codigoInterno');
  GeneratedTextColumn _codigoInterno;
  @override
  GeneratedTextColumn get codigoInterno =>
      _codigoInterno ??= _constructCodigoInterno();
  GeneratedTextColumn _constructCodigoInterno() {
    return GeneratedTextColumn('CODIGO_INTERNO', $tableName, true,
        minTextLength: 1, maxTextLength: 50);
  }

  final VerificationMeta _nomeMeta = const VerificationMeta('nome');
  GeneratedTextColumn _nome;
  @override
  GeneratedTextColumn get nome => _nome ??= _constructNome();
  GeneratedTextColumn _constructNome() {
    return GeneratedTextColumn('NOME', $tableName, true,
        minTextLength: 1, maxTextLength: 100);
  }

  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  GeneratedTextColumn _descricao;
  @override
  GeneratedTextColumn get descricao => _descricao ??= _constructDescricao();
  GeneratedTextColumn _constructDescricao() {
    return GeneratedTextColumn('DESCRICAO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _descricaoPdvMeta =
      const VerificationMeta('descricaoPdv');
  GeneratedTextColumn _descricaoPdv;
  @override
  GeneratedTextColumn get descricaoPdv =>
      _descricaoPdv ??= _constructDescricaoPdv();
  GeneratedTextColumn _constructDescricaoPdv() {
    return GeneratedTextColumn('DESCRICAO_PDV', $tableName, true,
        minTextLength: 1, maxTextLength: 30);
  }

  final VerificationMeta _valorCompraMeta =
      const VerificationMeta('valorCompra');
  GeneratedRealColumn _valorCompra;
  @override
  GeneratedRealColumn get valorCompra =>
      _valorCompra ??= _constructValorCompra();
  GeneratedRealColumn _constructValorCompra() {
    return GeneratedRealColumn(
      'VALOR_COMPRA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorVendaMeta = const VerificationMeta('valorVenda');
  GeneratedRealColumn _valorVenda;
  @override
  GeneratedRealColumn get valorVenda => _valorVenda ??= _constructValorVenda();
  GeneratedRealColumn _constructValorVenda() {
    return GeneratedRealColumn(
      'VALOR_VENDA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _quantidadeEstoqueMeta =
      const VerificationMeta('quantidadeEstoque');
  GeneratedRealColumn _quantidadeEstoque;
  @override
  GeneratedRealColumn get quantidadeEstoque =>
      _quantidadeEstoque ??= _constructQuantidadeEstoque();
  GeneratedRealColumn _constructQuantidadeEstoque() {
    return GeneratedRealColumn(
      'QUANTIDADE_ESTOQUE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _estoqueMinimoMeta =
      const VerificationMeta('estoqueMinimo');
  GeneratedRealColumn _estoqueMinimo;
  @override
  GeneratedRealColumn get estoqueMinimo =>
      _estoqueMinimo ??= _constructEstoqueMinimo();
  GeneratedRealColumn _constructEstoqueMinimo() {
    return GeneratedRealColumn(
      'ESTOQUE_MINIMO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _estoqueMaximoMeta =
      const VerificationMeta('estoqueMaximo');
  GeneratedRealColumn _estoqueMaximo;
  @override
  GeneratedRealColumn get estoqueMaximo =>
      _estoqueMaximo ??= _constructEstoqueMaximo();
  GeneratedRealColumn _constructEstoqueMaximo() {
    return GeneratedRealColumn(
      'ESTOQUE_MAXIMO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _codigoNcmMeta = const VerificationMeta('codigoNcm');
  GeneratedTextColumn _codigoNcm;
  @override
  GeneratedTextColumn get codigoNcm => _codigoNcm ??= _constructCodigoNcm();
  GeneratedTextColumn _constructCodigoNcm() {
    return GeneratedTextColumn('CODIGO_NCM', $tableName, true,
        minTextLength: 1, maxTextLength: 8);
  }

  final VerificationMeta _iatMeta = const VerificationMeta('iat');
  GeneratedTextColumn _iat;
  @override
  GeneratedTextColumn get iat => _iat ??= _constructIat();
  GeneratedTextColumn _constructIat() {
    return GeneratedTextColumn('IAT', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _ipptMeta = const VerificationMeta('ippt');
  GeneratedTextColumn _ippt;
  @override
  GeneratedTextColumn get ippt => _ippt ??= _constructIppt();
  GeneratedTextColumn _constructIppt() {
    return GeneratedTextColumn('IPPT', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _tipoItemSpedMeta =
      const VerificationMeta('tipoItemSped');
  GeneratedTextColumn _tipoItemSped;
  @override
  GeneratedTextColumn get tipoItemSped =>
      _tipoItemSped ??= _constructTipoItemSped();
  GeneratedTextColumn _constructTipoItemSped() {
    return GeneratedTextColumn('TIPO_ITEM_SPED', $tableName, true,
        minTextLength: 1, maxTextLength: 2);
  }

  final VerificationMeta _taxaIpiMeta = const VerificationMeta('taxaIpi');
  GeneratedRealColumn _taxaIpi;
  @override
  GeneratedRealColumn get taxaIpi => _taxaIpi ??= _constructTaxaIpi();
  GeneratedRealColumn _constructTaxaIpi() {
    return GeneratedRealColumn(
      'TAXA_IPI',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaIssqnMeta = const VerificationMeta('taxaIssqn');
  GeneratedRealColumn _taxaIssqn;
  @override
  GeneratedRealColumn get taxaIssqn => _taxaIssqn ??= _constructTaxaIssqn();
  GeneratedRealColumn _constructTaxaIssqn() {
    return GeneratedRealColumn(
      'TAXA_ISSQN',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaPisMeta = const VerificationMeta('taxaPis');
  GeneratedRealColumn _taxaPis;
  @override
  GeneratedRealColumn get taxaPis => _taxaPis ??= _constructTaxaPis();
  GeneratedRealColumn _constructTaxaPis() {
    return GeneratedRealColumn(
      'TAXA_PIS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaCofinsMeta = const VerificationMeta('taxaCofins');
  GeneratedRealColumn _taxaCofins;
  @override
  GeneratedRealColumn get taxaCofins => _taxaCofins ??= _constructTaxaCofins();
  GeneratedRealColumn _constructTaxaCofins() {
    return GeneratedRealColumn(
      'TAXA_COFINS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _taxaIcmsMeta = const VerificationMeta('taxaIcms');
  GeneratedRealColumn _taxaIcms;
  @override
  GeneratedRealColumn get taxaIcms => _taxaIcms ??= _constructTaxaIcms();
  GeneratedRealColumn _constructTaxaIcms() {
    return GeneratedRealColumn(
      'TAXA_ICMS',
      $tableName,
      true,
    );
  }

  final VerificationMeta _cstMeta = const VerificationMeta('cst');
  GeneratedTextColumn _cst;
  @override
  GeneratedTextColumn get cst => _cst ??= _constructCst();
  GeneratedTextColumn _constructCst() {
    return GeneratedTextColumn('CST', $tableName, true,
        minTextLength: 1, maxTextLength: 3);
  }

  final VerificationMeta _csosnMeta = const VerificationMeta('csosn');
  GeneratedTextColumn _csosn;
  @override
  GeneratedTextColumn get csosn => _csosn ??= _constructCsosn();
  GeneratedTextColumn _constructCsosn() {
    return GeneratedTextColumn('CSOSN', $tableName, true,
        minTextLength: 1, maxTextLength: 4);
  }

  final VerificationMeta _totalizadorParcialMeta =
      const VerificationMeta('totalizadorParcial');
  GeneratedTextColumn _totalizadorParcial;
  @override
  GeneratedTextColumn get totalizadorParcial =>
      _totalizadorParcial ??= _constructTotalizadorParcial();
  GeneratedTextColumn _constructTotalizadorParcial() {
    return GeneratedTextColumn('TOTALIZADOR_PARCIAL', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _ecfIcmsStMeta = const VerificationMeta('ecfIcmsSt');
  GeneratedTextColumn _ecfIcmsSt;
  @override
  GeneratedTextColumn get ecfIcmsSt => _ecfIcmsSt ??= _constructEcfIcmsSt();
  GeneratedTextColumn _constructEcfIcmsSt() {
    return GeneratedTextColumn('ECF_ICMS_ST', $tableName, true,
        minTextLength: 1, maxTextLength: 4);
  }

  final VerificationMeta _codigoBalancaMeta =
      const VerificationMeta('codigoBalanca');
  GeneratedIntColumn _codigoBalanca;
  @override
  GeneratedIntColumn get codigoBalanca =>
      _codigoBalanca ??= _constructCodigoBalanca();
  GeneratedIntColumn _constructCodigoBalanca() {
    return GeneratedIntColumn(
      'CODIGO_BALANCA',
      $tableName,
      true,
    );
  }

  final VerificationMeta _pafPStMeta = const VerificationMeta('pafPSt');
  GeneratedTextColumn _pafPSt;
  @override
  GeneratedTextColumn get pafPSt => _pafPSt ??= _constructPafPSt();
  GeneratedTextColumn _constructPafPSt() {
    return GeneratedTextColumn('PAF_P_ST', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  final VerificationMeta _hashRegistroMeta =
      const VerificationMeta('hashRegistro');
  GeneratedTextColumn _hashRegistro;
  @override
  GeneratedTextColumn get hashRegistro =>
      _hashRegistro ??= _constructHashRegistro();
  GeneratedTextColumn _constructHashRegistro() {
    return GeneratedTextColumn('HASH_REGISTRO', $tableName, true,
        minTextLength: 1, maxTextLength: 32);
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idProdutoUnidade,
        gtin,
        codigoInterno,
        nome,
        descricao,
        descricaoPdv,
        valorCompra,
        valorVenda,
        quantidadeEstoque,
        estoqueMinimo,
        estoqueMaximo,
        codigoNcm,
        iat,
        ippt,
        tipoItemSped,
        taxaIpi,
        taxaIssqn,
        taxaPis,
        taxaCofins,
        taxaIcms,
        cst,
        csosn,
        totalizadorParcial,
        ecfIcmsSt,
        codigoBalanca,
        pafPSt,
        hashRegistro
      ];
  @override
  $ProdutosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PRODUTO';
  @override
  final String actualTableName = 'PRODUTO';
  @override
  VerificationContext validateIntegrity(Insertable<Produto> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PRODUTO_UNIDADE')) {
      context.handle(
          _idProdutoUnidadeMeta,
          idProdutoUnidade.isAcceptableOrUnknown(
              data['ID_PRODUTO_UNIDADE'], _idProdutoUnidadeMeta));
    }
    if (data.containsKey('GTIN')) {
      context.handle(
          _gtinMeta, gtin.isAcceptableOrUnknown(data['GTIN'], _gtinMeta));
    }
    if (data.containsKey('CODIGO_INTERNO')) {
      context.handle(
          _codigoInternoMeta,
          codigoInterno.isAcceptableOrUnknown(
              data['CODIGO_INTERNO'], _codigoInternoMeta));
    }
    if (data.containsKey('NOME')) {
      context.handle(
          _nomeMeta, nome.isAcceptableOrUnknown(data['NOME'], _nomeMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO'], _descricaoMeta));
    }
    if (data.containsKey('DESCRICAO_PDV')) {
      context.handle(
          _descricaoPdvMeta,
          descricaoPdv.isAcceptableOrUnknown(
              data['DESCRICAO_PDV'], _descricaoPdvMeta));
    }
    if (data.containsKey('VALOR_COMPRA')) {
      context.handle(
          _valorCompraMeta,
          valorCompra.isAcceptableOrUnknown(
              data['VALOR_COMPRA'], _valorCompraMeta));
    }
    if (data.containsKey('VALOR_VENDA')) {
      context.handle(
          _valorVendaMeta,
          valorVenda.isAcceptableOrUnknown(
              data['VALOR_VENDA'], _valorVendaMeta));
    }
    if (data.containsKey('QUANTIDADE_ESTOQUE')) {
      context.handle(
          _quantidadeEstoqueMeta,
          quantidadeEstoque.isAcceptableOrUnknown(
              data['QUANTIDADE_ESTOQUE'], _quantidadeEstoqueMeta));
    }
    if (data.containsKey('ESTOQUE_MINIMO')) {
      context.handle(
          _estoqueMinimoMeta,
          estoqueMinimo.isAcceptableOrUnknown(
              data['ESTOQUE_MINIMO'], _estoqueMinimoMeta));
    }
    if (data.containsKey('ESTOQUE_MAXIMO')) {
      context.handle(
          _estoqueMaximoMeta,
          estoqueMaximo.isAcceptableOrUnknown(
              data['ESTOQUE_MAXIMO'], _estoqueMaximoMeta));
    }
    if (data.containsKey('CODIGO_NCM')) {
      context.handle(_codigoNcmMeta,
          codigoNcm.isAcceptableOrUnknown(data['CODIGO_NCM'], _codigoNcmMeta));
    }
    if (data.containsKey('IAT')) {
      context.handle(
          _iatMeta, iat.isAcceptableOrUnknown(data['IAT'], _iatMeta));
    }
    if (data.containsKey('IPPT')) {
      context.handle(
          _ipptMeta, ippt.isAcceptableOrUnknown(data['IPPT'], _ipptMeta));
    }
    if (data.containsKey('TIPO_ITEM_SPED')) {
      context.handle(
          _tipoItemSpedMeta,
          tipoItemSped.isAcceptableOrUnknown(
              data['TIPO_ITEM_SPED'], _tipoItemSpedMeta));
    }
    if (data.containsKey('TAXA_IPI')) {
      context.handle(_taxaIpiMeta,
          taxaIpi.isAcceptableOrUnknown(data['TAXA_IPI'], _taxaIpiMeta));
    }
    if (data.containsKey('TAXA_ISSQN')) {
      context.handle(_taxaIssqnMeta,
          taxaIssqn.isAcceptableOrUnknown(data['TAXA_ISSQN'], _taxaIssqnMeta));
    }
    if (data.containsKey('TAXA_PIS')) {
      context.handle(_taxaPisMeta,
          taxaPis.isAcceptableOrUnknown(data['TAXA_PIS'], _taxaPisMeta));
    }
    if (data.containsKey('TAXA_COFINS')) {
      context.handle(
          _taxaCofinsMeta,
          taxaCofins.isAcceptableOrUnknown(
              data['TAXA_COFINS'], _taxaCofinsMeta));
    }
    if (data.containsKey('TAXA_ICMS')) {
      context.handle(_taxaIcmsMeta,
          taxaIcms.isAcceptableOrUnknown(data['TAXA_ICMS'], _taxaIcmsMeta));
    }
    if (data.containsKey('CST')) {
      context.handle(
          _cstMeta, cst.isAcceptableOrUnknown(data['CST'], _cstMeta));
    }
    if (data.containsKey('CSOSN')) {
      context.handle(
          _csosnMeta, csosn.isAcceptableOrUnknown(data['CSOSN'], _csosnMeta));
    }
    if (data.containsKey('TOTALIZADOR_PARCIAL')) {
      context.handle(
          _totalizadorParcialMeta,
          totalizadorParcial.isAcceptableOrUnknown(
              data['TOTALIZADOR_PARCIAL'], _totalizadorParcialMeta));
    }
    if (data.containsKey('ECF_ICMS_ST')) {
      context.handle(_ecfIcmsStMeta,
          ecfIcmsSt.isAcceptableOrUnknown(data['ECF_ICMS_ST'], _ecfIcmsStMeta));
    }
    if (data.containsKey('CODIGO_BALANCA')) {
      context.handle(
          _codigoBalancaMeta,
          codigoBalanca.isAcceptableOrUnknown(
              data['CODIGO_BALANCA'], _codigoBalancaMeta));
    }
    if (data.containsKey('PAF_P_ST')) {
      context.handle(_pafPStMeta,
          pafPSt.isAcceptableOrUnknown(data['PAF_P_ST'], _pafPStMeta));
    }
    if (data.containsKey('HASH_REGISTRO')) {
      context.handle(
          _hashRegistroMeta,
          hashRegistro.isAcceptableOrUnknown(
              data['HASH_REGISTRO'], _hashRegistroMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  Produto map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return Produto.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $ProdutosTable createAlias(String alias) {
    return $ProdutosTable(_db, alias);
  }
}

class ProdutoFichaTecnica extends DataClass
    implements Insertable<ProdutoFichaTecnica> {
  final int id;
  final int idProduto;
  final String descricao;
  final int idProdutoFilho;
  final double quantidade;
  ProdutoFichaTecnica(
      {@required this.id,
      this.idProduto,
      this.descricao,
      this.idProdutoFilho,
      this.quantidade});
  factory ProdutoFichaTecnica.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    final doubleType = db.typeSystem.forDartType<double>();
    return ProdutoFichaTecnica(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idProduto:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
      descricao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
      idProdutoFilho: intType
          .mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO_FILHO']),
      quantidade: doubleType
          .mapFromDatabaseResponse(data['${effectivePrefix}QUANTIDADE']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || idProdutoFilho != null) {
      map['ID_PRODUTO_FILHO'] = Variable<int>(idProdutoFilho);
    }
    if (!nullToAbsent || quantidade != null) {
      map['QUANTIDADE'] = Variable<double>(quantidade);
    }
    return map;
  }

  ProdutoFichaTecnicasCompanion toCompanion(bool nullToAbsent) {
    return ProdutoFichaTecnicasCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      idProdutoFilho: idProdutoFilho == null && nullToAbsent
          ? const Value.absent()
          : Value(idProdutoFilho),
      quantidade: quantidade == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidade),
    );
  }

  factory ProdutoFichaTecnica.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ProdutoFichaTecnica(
      id: serializer.fromJson<int>(json['id']),
      idProduto: serializer.fromJson<int>(json['idProduto']),
      descricao: serializer.fromJson<String>(json['descricao']),
      idProdutoFilho: serializer.fromJson<int>(json['idProdutoFilho']),
      quantidade: serializer.fromJson<double>(json['quantidade']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idProduto': serializer.toJson<int>(idProduto),
      'descricao': serializer.toJson<String>(descricao),
      'idProdutoFilho': serializer.toJson<int>(idProdutoFilho),
      'quantidade': serializer.toJson<double>(quantidade),
    };
  }

  ProdutoFichaTecnica copyWith(
          {int id,
          int idProduto,
          String descricao,
          int idProdutoFilho,
          double quantidade}) =>
      ProdutoFichaTecnica(
        id: id ?? this.id,
        idProduto: idProduto ?? this.idProduto,
        descricao: descricao ?? this.descricao,
        idProdutoFilho: idProdutoFilho ?? this.idProdutoFilho,
        quantidade: quantidade ?? this.quantidade,
      );
  @override
  String toString() {
    return (StringBuffer('ProdutoFichaTecnica(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('descricao: $descricao, ')
          ..write('idProdutoFilho: $idProdutoFilho, ')
          ..write('quantidade: $quantidade')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idProduto.hashCode,
          $mrjc(descricao.hashCode,
              $mrjc(idProdutoFilho.hashCode, quantidade.hashCode)))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is ProdutoFichaTecnica &&
          other.id == this.id &&
          other.idProduto == this.idProduto &&
          other.descricao == this.descricao &&
          other.idProdutoFilho == this.idProdutoFilho &&
          other.quantidade == this.quantidade);
}

class ProdutoFichaTecnicasCompanion
    extends UpdateCompanion<ProdutoFichaTecnica> {
  final Value<int> id;
  final Value<int> idProduto;
  final Value<String> descricao;
  final Value<int> idProdutoFilho;
  final Value<double> quantidade;
  const ProdutoFichaTecnicasCompanion({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.descricao = const Value.absent(),
    this.idProdutoFilho = const Value.absent(),
    this.quantidade = const Value.absent(),
  });
  ProdutoFichaTecnicasCompanion.insert({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.descricao = const Value.absent(),
    this.idProdutoFilho = const Value.absent(),
    this.quantidade = const Value.absent(),
  });
  static Insertable<ProdutoFichaTecnica> custom({
    Expression<int> id,
    Expression<int> idProduto,
    Expression<String> descricao,
    Expression<int> idProdutoFilho,
    Expression<double> quantidade,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (descricao != null) 'DESCRICAO': descricao,
      if (idProdutoFilho != null) 'ID_PRODUTO_FILHO': idProdutoFilho,
      if (quantidade != null) 'QUANTIDADE': quantidade,
    });
  }

  ProdutoFichaTecnicasCompanion copyWith(
      {Value<int> id,
      Value<int> idProduto,
      Value<String> descricao,
      Value<int> idProdutoFilho,
      Value<double> quantidade}) {
    return ProdutoFichaTecnicasCompanion(
      id: id ?? this.id,
      idProduto: idProduto ?? this.idProduto,
      descricao: descricao ?? this.descricao,
      idProdutoFilho: idProdutoFilho ?? this.idProdutoFilho,
      quantidade: quantidade ?? this.quantidade,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (idProdutoFilho.present) {
      map['ID_PRODUTO_FILHO'] = Variable<int>(idProdutoFilho.value);
    }
    if (quantidade.present) {
      map['QUANTIDADE'] = Variable<double>(quantidade.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoFichaTecnicasCompanion(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('descricao: $descricao, ')
          ..write('idProdutoFilho: $idProdutoFilho, ')
          ..write('quantidade: $quantidade')
          ..write(')'))
        .toString();
  }
}

class $ProdutoFichaTecnicasTable extends ProdutoFichaTecnicas
    with TableInfo<$ProdutoFichaTecnicasTable, ProdutoFichaTecnica> {
  final GeneratedDatabase _db;
  final String _alias;
  $ProdutoFichaTecnicasTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  GeneratedIntColumn _idProduto;
  @override
  GeneratedIntColumn get idProduto => _idProduto ??= _constructIdProduto();
  GeneratedIntColumn _constructIdProduto() {
    return GeneratedIntColumn('ID_PRODUTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  }

  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  GeneratedTextColumn _descricao;
  @override
  GeneratedTextColumn get descricao => _descricao ??= _constructDescricao();
  GeneratedTextColumn _constructDescricao() {
    return GeneratedTextColumn('DESCRICAO', $tableName, true,
        minTextLength: 1, maxTextLength: 50);
  }

  final VerificationMeta _idProdutoFilhoMeta =
      const VerificationMeta('idProdutoFilho');
  GeneratedIntColumn _idProdutoFilho;
  @override
  GeneratedIntColumn get idProdutoFilho =>
      _idProdutoFilho ??= _constructIdProdutoFilho();
  GeneratedIntColumn _constructIdProdutoFilho() {
    return GeneratedIntColumn('ID_PRODUTO_FILHO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PRODUTO_FILHO(ID)');
  }

  final VerificationMeta _quantidadeMeta = const VerificationMeta('quantidade');
  GeneratedRealColumn _quantidade;
  @override
  GeneratedRealColumn get quantidade => _quantidade ??= _constructQuantidade();
  GeneratedRealColumn _constructQuantidade() {
    return GeneratedRealColumn(
      'QUANTIDADE',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns =>
      [id, idProduto, descricao, idProdutoFilho, quantidade];
  @override
  $ProdutoFichaTecnicasTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PRODUTO_FICHA_TECNICA';
  @override
  final String actualTableName = 'PRODUTO_FICHA_TECNICA';
  @override
  VerificationContext validateIntegrity(
      Insertable<ProdutoFichaTecnica> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO'], _idProdutoMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO'], _descricaoMeta));
    }
    if (data.containsKey('ID_PRODUTO_FILHO')) {
      context.handle(
          _idProdutoFilhoMeta,
          idProdutoFilho.isAcceptableOrUnknown(
              data['ID_PRODUTO_FILHO'], _idProdutoFilhoMeta));
    }
    if (data.containsKey('QUANTIDADE')) {
      context.handle(
          _quantidadeMeta,
          quantidade.isAcceptableOrUnknown(
              data['QUANTIDADE'], _quantidadeMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoFichaTecnica map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return ProdutoFichaTecnica.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $ProdutoFichaTecnicasTable createAlias(String alias) {
    return $ProdutoFichaTecnicasTable(_db, alias);
  }
}

class ProdutoPromocao extends DataClass implements Insertable<ProdutoPromocao> {
  final int id;
  final int idProduto;
  final DateTime dataInicio;
  final DateTime dataFim;
  final double quantidadeEmPromocao;
  final double quantidadeMaximaCliente;
  final double valor;
  ProdutoPromocao(
      {@required this.id,
      this.idProduto,
      this.dataInicio,
      this.dataFim,
      this.quantidadeEmPromocao,
      this.quantidadeMaximaCliente,
      this.valor});
  factory ProdutoPromocao.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final dateTimeType = db.typeSystem.forDartType<DateTime>();
    final doubleType = db.typeSystem.forDartType<double>();
    return ProdutoPromocao(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      idProduto:
          intType.mapFromDatabaseResponse(data['${effectivePrefix}ID_PRODUTO']),
      dataInicio: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_INICIO']),
      dataFim: dateTimeType
          .mapFromDatabaseResponse(data['${effectivePrefix}DATA_FIM']),
      quantidadeEmPromocao: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}QUANTIDADE_EM_PROMOCAO']),
      quantidadeMaximaCliente: doubleType.mapFromDatabaseResponse(
          data['${effectivePrefix}QUANTIDADE_MAXIMA_CLIENTE']),
      valor:
          doubleType.mapFromDatabaseResponse(data['${effectivePrefix}VALOR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || idProduto != null) {
      map['ID_PRODUTO'] = Variable<int>(idProduto);
    }
    if (!nullToAbsent || dataInicio != null) {
      map['DATA_INICIO'] = Variable<DateTime>(dataInicio);
    }
    if (!nullToAbsent || dataFim != null) {
      map['DATA_FIM'] = Variable<DateTime>(dataFim);
    }
    if (!nullToAbsent || quantidadeEmPromocao != null) {
      map['QUANTIDADE_EM_PROMOCAO'] = Variable<double>(quantidadeEmPromocao);
    }
    if (!nullToAbsent || quantidadeMaximaCliente != null) {
      map['QUANTIDADE_MAXIMA_CLIENTE'] =
          Variable<double>(quantidadeMaximaCliente);
    }
    if (!nullToAbsent || valor != null) {
      map['VALOR'] = Variable<double>(valor);
    }
    return map;
  }

  ProdutoPromocaosCompanion toCompanion(bool nullToAbsent) {
    return ProdutoPromocaosCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      idProduto: idProduto == null && nullToAbsent
          ? const Value.absent()
          : Value(idProduto),
      dataInicio: dataInicio == null && nullToAbsent
          ? const Value.absent()
          : Value(dataInicio),
      dataFim: dataFim == null && nullToAbsent
          ? const Value.absent()
          : Value(dataFim),
      quantidadeEmPromocao: quantidadeEmPromocao == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeEmPromocao),
      quantidadeMaximaCliente: quantidadeMaximaCliente == null && nullToAbsent
          ? const Value.absent()
          : Value(quantidadeMaximaCliente),
      valor:
          valor == null && nullToAbsent ? const Value.absent() : Value(valor),
    );
  }

  factory ProdutoPromocao.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ProdutoPromocao(
      id: serializer.fromJson<int>(json['id']),
      idProduto: serializer.fromJson<int>(json['idProduto']),
      dataInicio: serializer.fromJson<DateTime>(json['dataInicio']),
      dataFim: serializer.fromJson<DateTime>(json['dataFim']),
      quantidadeEmPromocao:
          serializer.fromJson<double>(json['quantidadeEmPromocao']),
      quantidadeMaximaCliente:
          serializer.fromJson<double>(json['quantidadeMaximaCliente']),
      valor: serializer.fromJson<double>(json['valor']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'idProduto': serializer.toJson<int>(idProduto),
      'dataInicio': serializer.toJson<DateTime>(dataInicio),
      'dataFim': serializer.toJson<DateTime>(dataFim),
      'quantidadeEmPromocao': serializer.toJson<double>(quantidadeEmPromocao),
      'quantidadeMaximaCliente':
          serializer.toJson<double>(quantidadeMaximaCliente),
      'valor': serializer.toJson<double>(valor),
    };
  }

  ProdutoPromocao copyWith(
          {int id,
          int idProduto,
          DateTime dataInicio,
          DateTime dataFim,
          double quantidadeEmPromocao,
          double quantidadeMaximaCliente,
          double valor}) =>
      ProdutoPromocao(
        id: id ?? this.id,
        idProduto: idProduto ?? this.idProduto,
        dataInicio: dataInicio ?? this.dataInicio,
        dataFim: dataFim ?? this.dataFim,
        quantidadeEmPromocao: quantidadeEmPromocao ?? this.quantidadeEmPromocao,
        quantidadeMaximaCliente:
            quantidadeMaximaCliente ?? this.quantidadeMaximaCliente,
        valor: valor ?? this.valor,
      );
  @override
  String toString() {
    return (StringBuffer('ProdutoPromocao(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('dataInicio: $dataInicio, ')
          ..write('dataFim: $dataFim, ')
          ..write('quantidadeEmPromocao: $quantidadeEmPromocao, ')
          ..write('quantidadeMaximaCliente: $quantidadeMaximaCliente, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          idProduto.hashCode,
          $mrjc(
              dataInicio.hashCode,
              $mrjc(
                  dataFim.hashCode,
                  $mrjc(
                      quantidadeEmPromocao.hashCode,
                      $mrjc(quantidadeMaximaCliente.hashCode,
                          valor.hashCode)))))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is ProdutoPromocao &&
          other.id == this.id &&
          other.idProduto == this.idProduto &&
          other.dataInicio == this.dataInicio &&
          other.dataFim == this.dataFim &&
          other.quantidadeEmPromocao == this.quantidadeEmPromocao &&
          other.quantidadeMaximaCliente == this.quantidadeMaximaCliente &&
          other.valor == this.valor);
}

class ProdutoPromocaosCompanion extends UpdateCompanion<ProdutoPromocao> {
  final Value<int> id;
  final Value<int> idProduto;
  final Value<DateTime> dataInicio;
  final Value<DateTime> dataFim;
  final Value<double> quantidadeEmPromocao;
  final Value<double> quantidadeMaximaCliente;
  final Value<double> valor;
  const ProdutoPromocaosCompanion({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.dataInicio = const Value.absent(),
    this.dataFim = const Value.absent(),
    this.quantidadeEmPromocao = const Value.absent(),
    this.quantidadeMaximaCliente = const Value.absent(),
    this.valor = const Value.absent(),
  });
  ProdutoPromocaosCompanion.insert({
    this.id = const Value.absent(),
    this.idProduto = const Value.absent(),
    this.dataInicio = const Value.absent(),
    this.dataFim = const Value.absent(),
    this.quantidadeEmPromocao = const Value.absent(),
    this.quantidadeMaximaCliente = const Value.absent(),
    this.valor = const Value.absent(),
  });
  static Insertable<ProdutoPromocao> custom({
    Expression<int> id,
    Expression<int> idProduto,
    Expression<DateTime> dataInicio,
    Expression<DateTime> dataFim,
    Expression<double> quantidadeEmPromocao,
    Expression<double> quantidadeMaximaCliente,
    Expression<double> valor,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (idProduto != null) 'ID_PRODUTO': idProduto,
      if (dataInicio != null) 'DATA_INICIO': dataInicio,
      if (dataFim != null) 'DATA_FIM': dataFim,
      if (quantidadeEmPromocao != null)
        'QUANTIDADE_EM_PROMOCAO': quantidadeEmPromocao,
      if (quantidadeMaximaCliente != null)
        'QUANTIDADE_MAXIMA_CLIENTE': quantidadeMaximaCliente,
      if (valor != null) 'VALOR': valor,
    });
  }

  ProdutoPromocaosCompanion copyWith(
      {Value<int> id,
      Value<int> idProduto,
      Value<DateTime> dataInicio,
      Value<DateTime> dataFim,
      Value<double> quantidadeEmPromocao,
      Value<double> quantidadeMaximaCliente,
      Value<double> valor}) {
    return ProdutoPromocaosCompanion(
      id: id ?? this.id,
      idProduto: idProduto ?? this.idProduto,
      dataInicio: dataInicio ?? this.dataInicio,
      dataFim: dataFim ?? this.dataFim,
      quantidadeEmPromocao: quantidadeEmPromocao ?? this.quantidadeEmPromocao,
      quantidadeMaximaCliente:
          quantidadeMaximaCliente ?? this.quantidadeMaximaCliente,
      valor: valor ?? this.valor,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (idProduto.present) {
      map['ID_PRODUTO'] = Variable<int>(idProduto.value);
    }
    if (dataInicio.present) {
      map['DATA_INICIO'] = Variable<DateTime>(dataInicio.value);
    }
    if (dataFim.present) {
      map['DATA_FIM'] = Variable<DateTime>(dataFim.value);
    }
    if (quantidadeEmPromocao.present) {
      map['QUANTIDADE_EM_PROMOCAO'] =
          Variable<double>(quantidadeEmPromocao.value);
    }
    if (quantidadeMaximaCliente.present) {
      map['QUANTIDADE_MAXIMA_CLIENTE'] =
          Variable<double>(quantidadeMaximaCliente.value);
    }
    if (valor.present) {
      map['VALOR'] = Variable<double>(valor.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoPromocaosCompanion(')
          ..write('id: $id, ')
          ..write('idProduto: $idProduto, ')
          ..write('dataInicio: $dataInicio, ')
          ..write('dataFim: $dataFim, ')
          ..write('quantidadeEmPromocao: $quantidadeEmPromocao, ')
          ..write('quantidadeMaximaCliente: $quantidadeMaximaCliente, ')
          ..write('valor: $valor')
          ..write(')'))
        .toString();
  }
}

class $ProdutoPromocaosTable extends ProdutoPromocaos
    with TableInfo<$ProdutoPromocaosTable, ProdutoPromocao> {
  final GeneratedDatabase _db;
  final String _alias;
  $ProdutoPromocaosTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _idProdutoMeta = const VerificationMeta('idProduto');
  GeneratedIntColumn _idProduto;
  @override
  GeneratedIntColumn get idProduto => _idProduto ??= _constructIdProduto();
  GeneratedIntColumn _constructIdProduto() {
    return GeneratedIntColumn('ID_PRODUTO', $tableName, true,
        $customConstraints: 'NULLABLE REFERENCES PRODUTO(ID)');
  }

  final VerificationMeta _dataInicioMeta = const VerificationMeta('dataInicio');
  GeneratedDateTimeColumn _dataInicio;
  @override
  GeneratedDateTimeColumn get dataInicio =>
      _dataInicio ??= _constructDataInicio();
  GeneratedDateTimeColumn _constructDataInicio() {
    return GeneratedDateTimeColumn(
      'DATA_INICIO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _dataFimMeta = const VerificationMeta('dataFim');
  GeneratedDateTimeColumn _dataFim;
  @override
  GeneratedDateTimeColumn get dataFim => _dataFim ??= _constructDataFim();
  GeneratedDateTimeColumn _constructDataFim() {
    return GeneratedDateTimeColumn(
      'DATA_FIM',
      $tableName,
      true,
    );
  }

  final VerificationMeta _quantidadeEmPromocaoMeta =
      const VerificationMeta('quantidadeEmPromocao');
  GeneratedRealColumn _quantidadeEmPromocao;
  @override
  GeneratedRealColumn get quantidadeEmPromocao =>
      _quantidadeEmPromocao ??= _constructQuantidadeEmPromocao();
  GeneratedRealColumn _constructQuantidadeEmPromocao() {
    return GeneratedRealColumn(
      'QUANTIDADE_EM_PROMOCAO',
      $tableName,
      true,
    );
  }

  final VerificationMeta _quantidadeMaximaClienteMeta =
      const VerificationMeta('quantidadeMaximaCliente');
  GeneratedRealColumn _quantidadeMaximaCliente;
  @override
  GeneratedRealColumn get quantidadeMaximaCliente =>
      _quantidadeMaximaCliente ??= _constructQuantidadeMaximaCliente();
  GeneratedRealColumn _constructQuantidadeMaximaCliente() {
    return GeneratedRealColumn(
      'QUANTIDADE_MAXIMA_CLIENTE',
      $tableName,
      true,
    );
  }

  final VerificationMeta _valorMeta = const VerificationMeta('valor');
  GeneratedRealColumn _valor;
  @override
  GeneratedRealColumn get valor => _valor ??= _constructValor();
  GeneratedRealColumn _constructValor() {
    return GeneratedRealColumn(
      'VALOR',
      $tableName,
      true,
    );
  }

  @override
  List<GeneratedColumn> get $columns => [
        id,
        idProduto,
        dataInicio,
        dataFim,
        quantidadeEmPromocao,
        quantidadeMaximaCliente,
        valor
      ];
  @override
  $ProdutoPromocaosTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PRODUTO_PROMOCAO';
  @override
  final String actualTableName = 'PRODUTO_PROMOCAO';
  @override
  VerificationContext validateIntegrity(Insertable<ProdutoPromocao> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('ID_PRODUTO')) {
      context.handle(_idProdutoMeta,
          idProduto.isAcceptableOrUnknown(data['ID_PRODUTO'], _idProdutoMeta));
    }
    if (data.containsKey('DATA_INICIO')) {
      context.handle(
          _dataInicioMeta,
          dataInicio.isAcceptableOrUnknown(
              data['DATA_INICIO'], _dataInicioMeta));
    }
    if (data.containsKey('DATA_FIM')) {
      context.handle(_dataFimMeta,
          dataFim.isAcceptableOrUnknown(data['DATA_FIM'], _dataFimMeta));
    }
    if (data.containsKey('QUANTIDADE_EM_PROMOCAO')) {
      context.handle(
          _quantidadeEmPromocaoMeta,
          quantidadeEmPromocao.isAcceptableOrUnknown(
              data['QUANTIDADE_EM_PROMOCAO'], _quantidadeEmPromocaoMeta));
    }
    if (data.containsKey('QUANTIDADE_MAXIMA_CLIENTE')) {
      context.handle(
          _quantidadeMaximaClienteMeta,
          quantidadeMaximaCliente.isAcceptableOrUnknown(
              data['QUANTIDADE_MAXIMA_CLIENTE'], _quantidadeMaximaClienteMeta));
    }
    if (data.containsKey('VALOR')) {
      context.handle(
          _valorMeta, valor.isAcceptableOrUnknown(data['VALOR'], _valorMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoPromocao map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return ProdutoPromocao.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $ProdutoPromocaosTable createAlias(String alias) {
    return $ProdutoPromocaosTable(_db, alias);
  }
}

class ProdutoUnidade extends DataClass implements Insertable<ProdutoUnidade> {
  final int id;
  final String sigla;
  final String descricao;
  final String podeFracionar;
  ProdutoUnidade(
      {@required this.id, this.sigla, this.descricao, this.podeFracionar});
  factory ProdutoUnidade.fromData(
      Map<String, dynamic> data, GeneratedDatabase db,
      {String prefix}) {
    final effectivePrefix = prefix ?? '';
    final intType = db.typeSystem.forDartType<int>();
    final stringType = db.typeSystem.forDartType<String>();
    return ProdutoUnidade(
      id: intType.mapFromDatabaseResponse(data['${effectivePrefix}ID']),
      sigla:
          stringType.mapFromDatabaseResponse(data['${effectivePrefix}SIGLA']),
      descricao: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}DESCRICAO']),
      podeFracionar: stringType
          .mapFromDatabaseResponse(data['${effectivePrefix}PODE_FRACIONAR']),
    );
  }
  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (!nullToAbsent || id != null) {
      map['ID'] = Variable<int>(id);
    }
    if (!nullToAbsent || sigla != null) {
      map['SIGLA'] = Variable<String>(sigla);
    }
    if (!nullToAbsent || descricao != null) {
      map['DESCRICAO'] = Variable<String>(descricao);
    }
    if (!nullToAbsent || podeFracionar != null) {
      map['PODE_FRACIONAR'] = Variable<String>(podeFracionar);
    }
    return map;
  }

  ProdutoUnidadesCompanion toCompanion(bool nullToAbsent) {
    return ProdutoUnidadesCompanion(
      id: id == null && nullToAbsent ? const Value.absent() : Value(id),
      sigla:
          sigla == null && nullToAbsent ? const Value.absent() : Value(sigla),
      descricao: descricao == null && nullToAbsent
          ? const Value.absent()
          : Value(descricao),
      podeFracionar: podeFracionar == null && nullToAbsent
          ? const Value.absent()
          : Value(podeFracionar),
    );
  }

  factory ProdutoUnidade.fromJson(Map<String, dynamic> json,
      {ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return ProdutoUnidade(
      id: serializer.fromJson<int>(json['id']),
      sigla: serializer.fromJson<String>(json['sigla']),
      descricao: serializer.fromJson<String>(json['descricao']),
      podeFracionar: serializer.fromJson<String>(json['podeFracionar']),
    );
  }
  @override
  Map<String, dynamic> toJson({ValueSerializer serializer}) {
    serializer ??= moorRuntimeOptions.defaultSerializer;
    return <String, dynamic>{
      'id': serializer.toJson<int>(id),
      'sigla': serializer.toJson<String>(sigla),
      'descricao': serializer.toJson<String>(descricao),
      'podeFracionar': serializer.toJson<String>(podeFracionar),
    };
  }

  ProdutoUnidade copyWith(
          {int id, String sigla, String descricao, String podeFracionar}) =>
      ProdutoUnidade(
        id: id ?? this.id,
        sigla: sigla ?? this.sigla,
        descricao: descricao ?? this.descricao,
        podeFracionar: podeFracionar ?? this.podeFracionar,
      );
  @override
  String toString() {
    return (StringBuffer('ProdutoUnidade(')
          ..write('id: $id, ')
          ..write('sigla: $sigla, ')
          ..write('descricao: $descricao, ')
          ..write('podeFracionar: $podeFracionar')
          ..write(')'))
        .toString();
  }

  @override
  int get hashCode => $mrjf($mrjc(
      id.hashCode,
      $mrjc(
          sigla.hashCode, $mrjc(descricao.hashCode, podeFracionar.hashCode))));
  @override
  bool operator ==(dynamic other) =>
      identical(this, other) ||
      (other is ProdutoUnidade &&
          other.id == this.id &&
          other.sigla == this.sigla &&
          other.descricao == this.descricao &&
          other.podeFracionar == this.podeFracionar);
}

class ProdutoUnidadesCompanion extends UpdateCompanion<ProdutoUnidade> {
  final Value<int> id;
  final Value<String> sigla;
  final Value<String> descricao;
  final Value<String> podeFracionar;
  const ProdutoUnidadesCompanion({
    this.id = const Value.absent(),
    this.sigla = const Value.absent(),
    this.descricao = const Value.absent(),
    this.podeFracionar = const Value.absent(),
  });
  ProdutoUnidadesCompanion.insert({
    this.id = const Value.absent(),
    this.sigla = const Value.absent(),
    this.descricao = const Value.absent(),
    this.podeFracionar = const Value.absent(),
  });
  static Insertable<ProdutoUnidade> custom({
    Expression<int> id,
    Expression<String> sigla,
    Expression<String> descricao,
    Expression<String> podeFracionar,
  }) {
    return RawValuesInsertable({
      if (id != null) 'ID': id,
      if (sigla != null) 'SIGLA': sigla,
      if (descricao != null) 'DESCRICAO': descricao,
      if (podeFracionar != null) 'PODE_FRACIONAR': podeFracionar,
    });
  }

  ProdutoUnidadesCompanion copyWith(
      {Value<int> id,
      Value<String> sigla,
      Value<String> descricao,
      Value<String> podeFracionar}) {
    return ProdutoUnidadesCompanion(
      id: id ?? this.id,
      sigla: sigla ?? this.sigla,
      descricao: descricao ?? this.descricao,
      podeFracionar: podeFracionar ?? this.podeFracionar,
    );
  }

  @override
  Map<String, Expression> toColumns(bool nullToAbsent) {
    final map = <String, Expression>{};
    if (id.present) {
      map['ID'] = Variable<int>(id.value);
    }
    if (sigla.present) {
      map['SIGLA'] = Variable<String>(sigla.value);
    }
    if (descricao.present) {
      map['DESCRICAO'] = Variable<String>(descricao.value);
    }
    if (podeFracionar.present) {
      map['PODE_FRACIONAR'] = Variable<String>(podeFracionar.value);
    }
    return map;
  }

  @override
  String toString() {
    return (StringBuffer('ProdutoUnidadesCompanion(')
          ..write('id: $id, ')
          ..write('sigla: $sigla, ')
          ..write('descricao: $descricao, ')
          ..write('podeFracionar: $podeFracionar')
          ..write(')'))
        .toString();
  }
}

class $ProdutoUnidadesTable extends ProdutoUnidades
    with TableInfo<$ProdutoUnidadesTable, ProdutoUnidade> {
  final GeneratedDatabase _db;
  final String _alias;
  $ProdutoUnidadesTable(this._db, [this._alias]);
  final VerificationMeta _idMeta = const VerificationMeta('id');
  GeneratedIntColumn _id;
  @override
  GeneratedIntColumn get id => _id ??= _constructId();
  GeneratedIntColumn _constructId() {
    return GeneratedIntColumn('ID', $tableName, false,
        hasAutoIncrement: true, declaredAsPrimaryKey: true);
  }

  final VerificationMeta _siglaMeta = const VerificationMeta('sigla');
  GeneratedTextColumn _sigla;
  @override
  GeneratedTextColumn get sigla => _sigla ??= _constructSigla();
  GeneratedTextColumn _constructSigla() {
    return GeneratedTextColumn('SIGLA', $tableName, true,
        minTextLength: 1, maxTextLength: 10);
  }

  final VerificationMeta _descricaoMeta = const VerificationMeta('descricao');
  GeneratedTextColumn _descricao;
  @override
  GeneratedTextColumn get descricao => _descricao ??= _constructDescricao();
  GeneratedTextColumn _constructDescricao() {
    return GeneratedTextColumn('DESCRICAO', $tableName, true,
        minTextLength: 1, maxTextLength: 250);
  }

  final VerificationMeta _podeFracionarMeta =
      const VerificationMeta('podeFracionar');
  GeneratedTextColumn _podeFracionar;
  @override
  GeneratedTextColumn get podeFracionar =>
      _podeFracionar ??= _constructPodeFracionar();
  GeneratedTextColumn _constructPodeFracionar() {
    return GeneratedTextColumn('PODE_FRACIONAR', $tableName, true,
        minTextLength: 1, maxTextLength: 1);
  }

  @override
  List<GeneratedColumn> get $columns => [id, sigla, descricao, podeFracionar];
  @override
  $ProdutoUnidadesTable get asDslTable => this;
  @override
  String get $tableName => _alias ?? 'PRODUTO_UNIDADE';
  @override
  final String actualTableName = 'PRODUTO_UNIDADE';
  @override
  VerificationContext validateIntegrity(Insertable<ProdutoUnidade> instance,
      {bool isInserting = false}) {
    final context = VerificationContext();
    final data = instance.toColumns(true);
    if (data.containsKey('ID')) {
      context.handle(_idMeta, id.isAcceptableOrUnknown(data['ID'], _idMeta));
    }
    if (data.containsKey('SIGLA')) {
      context.handle(
          _siglaMeta, sigla.isAcceptableOrUnknown(data['SIGLA'], _siglaMeta));
    }
    if (data.containsKey('DESCRICAO')) {
      context.handle(_descricaoMeta,
          descricao.isAcceptableOrUnknown(data['DESCRICAO'], _descricaoMeta));
    }
    if (data.containsKey('PODE_FRACIONAR')) {
      context.handle(
          _podeFracionarMeta,
          podeFracionar.isAcceptableOrUnknown(
              data['PODE_FRACIONAR'], _podeFracionarMeta));
    }
    return context;
  }

  @override
  Set<GeneratedColumn> get $primaryKey => {id};
  @override
  ProdutoUnidade map(Map<String, dynamic> data, {String tablePrefix}) {
    final effectivePrefix = tablePrefix != null ? '$tablePrefix.' : null;
    return ProdutoUnidade.fromData(data, _db, prefix: effectivePrefix);
  }

  @override
  $ProdutoUnidadesTable createAlias(String alias) {
    return $ProdutoUnidadesTable(_db, alias);
  }
}

abstract class _$AppDatabase extends GeneratedDatabase {
  _$AppDatabase(QueryExecutor e) : super(SqlTypeSystem.defaultInstance, e);
  $CfopsTable _cfops;
  $CfopsTable get cfops => _cfops ??= $CfopsTable(this);
  $ClientesTable _clientes;
  $ClientesTable get clientes => _clientes ??= $ClientesTable(this);
  $ColaboradorsTable _colaboradors;
  $ColaboradorsTable get colaboradors =>
      _colaboradors ??= $ColaboradorsTable(this);
  $CompraPedidoCabecalhosTable _compraPedidoCabecalhos;
  $CompraPedidoCabecalhosTable get compraPedidoCabecalhos =>
      _compraPedidoCabecalhos ??= $CompraPedidoCabecalhosTable(this);
  $CompraPedidoDetalhesTable _compraPedidoDetalhes;
  $CompraPedidoDetalhesTable get compraPedidoDetalhes =>
      _compraPedidoDetalhes ??= $CompraPedidoDetalhesTable(this);
  $ContadorsTable _contadors;
  $ContadorsTable get contadors => _contadors ??= $ContadorsTable(this);
  $ContasPagarsTable _contasPagars;
  $ContasPagarsTable get contasPagars =>
      _contasPagars ??= $ContasPagarsTable(this);
  $ContasRecebersTable _contasRecebers;
  $ContasRecebersTable get contasRecebers =>
      _contasRecebers ??= $ContasRecebersTable(this);
  $EcfAliquotassTable _ecfAliquotass;
  $EcfAliquotassTable get ecfAliquotass =>
      _ecfAliquotass ??= $EcfAliquotassTable(this);
  $EcfDocumentosEmitidossTable _ecfDocumentosEmitidoss;
  $EcfDocumentosEmitidossTable get ecfDocumentosEmitidoss =>
      _ecfDocumentosEmitidoss ??= $EcfDocumentosEmitidossTable(this);
  $EcfE3sTable _ecfE3s;
  $EcfE3sTable get ecfE3s => _ecfE3s ??= $EcfE3sTable(this);
  $EcfImpressorasTable _ecfImpressoras;
  $EcfImpressorasTable get ecfImpressoras =>
      _ecfImpressoras ??= $EcfImpressorasTable(this);
  $EcfLogTotaissTable _ecfLogTotaiss;
  $EcfLogTotaissTable get ecfLogTotaiss =>
      _ecfLogTotaiss ??= $EcfLogTotaissTable(this);
  $EcfR01sTable _ecfR01s;
  $EcfR01sTable get ecfR01s => _ecfR01s ??= $EcfR01sTable(this);
  $EcfR02sTable _ecfR02s;
  $EcfR02sTable get ecfR02s => _ecfR02s ??= $EcfR02sTable(this);
  $EcfR03sTable _ecfR03s;
  $EcfR03sTable get ecfR03s => _ecfR03s ??= $EcfR03sTable(this);
  $EcfR06sTable _ecfR06s;
  $EcfR06sTable get ecfR06s => _ecfR06s ??= $EcfR06sTable(this);
  $EcfR07sTable _ecfR07s;
  $EcfR07sTable get ecfR07s => _ecfR07s ??= $EcfR07sTable(this);
  $EcfRecebimentoNaoFiscalsTable _ecfRecebimentoNaoFiscals;
  $EcfRecebimentoNaoFiscalsTable get ecfRecebimentoNaoFiscals =>
      _ecfRecebimentoNaoFiscals ??= $EcfRecebimentoNaoFiscalsTable(this);
  $EcfRelatorioGerencialsTable _ecfRelatorioGerencials;
  $EcfRelatorioGerencialsTable get ecfRelatorioGerencials =>
      _ecfRelatorioGerencials ??= $EcfRelatorioGerencialsTable(this);
  $EcfSintegra60AsTable _ecfSintegra60As;
  $EcfSintegra60AsTable get ecfSintegra60As =>
      _ecfSintegra60As ??= $EcfSintegra60AsTable(this);
  $EcfSintegra60MsTable _ecfSintegra60Ms;
  $EcfSintegra60MsTable get ecfSintegra60Ms =>
      _ecfSintegra60Ms ??= $EcfSintegra60MsTable(this);
  $EmpresasTable _empresas;
  $EmpresasTable get empresas => _empresas ??= $EmpresasTable(this);
  $FornecedorsTable _fornecedors;
  $FornecedorsTable get fornecedors => _fornecedors ??= $FornecedorsTable(this);
  $IbptsTable _ibpts;
  $IbptsTable get ibpts => _ibpts ??= $IbptsTable(this);
  $LogImportacaosTable _logImportacaos;
  $LogImportacaosTable get logImportacaos =>
      _logImportacaos ??= $LogImportacaosTable(this);
  $PdvCaixasTable _pdvCaixas;
  $PdvCaixasTable get pdvCaixas => _pdvCaixas ??= $PdvCaixasTable(this);
  $PdvConfiguracaosTable _pdvConfiguracaos;
  $PdvConfiguracaosTable get pdvConfiguracaos =>
      _pdvConfiguracaos ??= $PdvConfiguracaosTable(this);
  $PdvConfiguracaoBalancasTable _pdvConfiguracaoBalancas;
  $PdvConfiguracaoBalancasTable get pdvConfiguracaoBalancas =>
      _pdvConfiguracaoBalancas ??= $PdvConfiguracaoBalancasTable(this);
  $PdvConfiguracaoLeitorSerialsTable _pdvConfiguracaoLeitorSerials;
  $PdvConfiguracaoLeitorSerialsTable get pdvConfiguracaoLeitorSerials =>
      _pdvConfiguracaoLeitorSerials ??=
          $PdvConfiguracaoLeitorSerialsTable(this);
  $PdvFechamentosTable _pdvFechamentos;
  $PdvFechamentosTable get pdvFechamentos =>
      _pdvFechamentos ??= $PdvFechamentosTable(this);
  $PdvMovimentosTable _pdvMovimentos;
  $PdvMovimentosTable get pdvMovimentos =>
      _pdvMovimentos ??= $PdvMovimentosTable(this);
  $PdvOperadorsTable _pdvOperadors;
  $PdvOperadorsTable get pdvOperadors =>
      _pdvOperadors ??= $PdvOperadorsTable(this);
  $PdvSangriasTable _pdvSangrias;
  $PdvSangriasTable get pdvSangrias => _pdvSangrias ??= $PdvSangriasTable(this);
  $PdvSuprimentosTable _pdvSuprimentos;
  $PdvSuprimentosTable get pdvSuprimentos =>
      _pdvSuprimentos ??= $PdvSuprimentosTable(this);
  $PdvTipoPagamentosTable _pdvTipoPagamentos;
  $PdvTipoPagamentosTable get pdvTipoPagamentos =>
      _pdvTipoPagamentos ??= $PdvTipoPagamentosTable(this);
  $PdvTotalTipoPagamentosTable _pdvTotalTipoPagamentos;
  $PdvTotalTipoPagamentosTable get pdvTotalTipoPagamentos =>
      _pdvTotalTipoPagamentos ??= $PdvTotalTipoPagamentosTable(this);
  $PdvVendaCabecalhosTable _pdvVendaCabecalhos;
  $PdvVendaCabecalhosTable get pdvVendaCabecalhos =>
      _pdvVendaCabecalhos ??= $PdvVendaCabecalhosTable(this);
  $PdvVendaDetalhesTable _pdvVendaDetalhes;
  $PdvVendaDetalhesTable get pdvVendaDetalhes =>
      _pdvVendaDetalhes ??= $PdvVendaDetalhesTable(this);
  $ProdutosTable _produtos;
  $ProdutosTable get produtos => _produtos ??= $ProdutosTable(this);
  $ProdutoFichaTecnicasTable _produtoFichaTecnicas;
  $ProdutoFichaTecnicasTable get produtoFichaTecnicas =>
      _produtoFichaTecnicas ??= $ProdutoFichaTecnicasTable(this);
  $ProdutoPromocaosTable _produtoPromocaos;
  $ProdutoPromocaosTable get produtoPromocaos =>
      _produtoPromocaos ??= $ProdutoPromocaosTable(this);
  $ProdutoUnidadesTable _produtoUnidades;
  $ProdutoUnidadesTable get produtoUnidades =>
      _produtoUnidades ??= $ProdutoUnidadesTable(this);
  CfopDao _cfopDao;
  CfopDao get cfopDao => _cfopDao ??= CfopDao(this as AppDatabase);
  ClienteDao _clienteDao;
  ClienteDao get clienteDao => _clienteDao ??= ClienteDao(this as AppDatabase);
  ColaboradorDao _colaboradorDao;
  ColaboradorDao get colaboradorDao =>
      _colaboradorDao ??= ColaboradorDao(this as AppDatabase);
  CompraPedidoCabecalhoDao _compraPedidoCabecalhoDao;
  CompraPedidoCabecalhoDao get compraPedidoCabecalhoDao =>
      _compraPedidoCabecalhoDao ??=
          CompraPedidoCabecalhoDao(this as AppDatabase);
  CompraPedidoDetalheDao _compraPedidoDetalheDao;
  CompraPedidoDetalheDao get compraPedidoDetalheDao =>
      _compraPedidoDetalheDao ??= CompraPedidoDetalheDao(this as AppDatabase);
  ContadorDao _contadorDao;
  ContadorDao get contadorDao =>
      _contadorDao ??= ContadorDao(this as AppDatabase);
  ContasPagarDao _contasPagarDao;
  ContasPagarDao get contasPagarDao =>
      _contasPagarDao ??= ContasPagarDao(this as AppDatabase);
  ContasReceberDao _contasReceberDao;
  ContasReceberDao get contasReceberDao =>
      _contasReceberDao ??= ContasReceberDao(this as AppDatabase);
  EcfAliquotasDao _ecfAliquotasDao;
  EcfAliquotasDao get ecfAliquotasDao =>
      _ecfAliquotasDao ??= EcfAliquotasDao(this as AppDatabase);
  EcfDocumentosEmitidosDao _ecfDocumentosEmitidosDao;
  EcfDocumentosEmitidosDao get ecfDocumentosEmitidosDao =>
      _ecfDocumentosEmitidosDao ??=
          EcfDocumentosEmitidosDao(this as AppDatabase);
  EcfE3Dao _ecfE3Dao;
  EcfE3Dao get ecfE3Dao => _ecfE3Dao ??= EcfE3Dao(this as AppDatabase);
  EcfImpressoraDao _ecfImpressoraDao;
  EcfImpressoraDao get ecfImpressoraDao =>
      _ecfImpressoraDao ??= EcfImpressoraDao(this as AppDatabase);
  EcfLogTotaisDao _ecfLogTotaisDao;
  EcfLogTotaisDao get ecfLogTotaisDao =>
      _ecfLogTotaisDao ??= EcfLogTotaisDao(this as AppDatabase);
  EcfR01Dao _ecfR01Dao;
  EcfR01Dao get ecfR01Dao => _ecfR01Dao ??= EcfR01Dao(this as AppDatabase);
  EcfR02Dao _ecfR02Dao;
  EcfR02Dao get ecfR02Dao => _ecfR02Dao ??= EcfR02Dao(this as AppDatabase);
  EcfR03Dao _ecfR03Dao;
  EcfR03Dao get ecfR03Dao => _ecfR03Dao ??= EcfR03Dao(this as AppDatabase);
  EcfR06Dao _ecfR06Dao;
  EcfR06Dao get ecfR06Dao => _ecfR06Dao ??= EcfR06Dao(this as AppDatabase);
  EcfR07Dao _ecfR07Dao;
  EcfR07Dao get ecfR07Dao => _ecfR07Dao ??= EcfR07Dao(this as AppDatabase);
  EcfRecebimentoNaoFiscalDao _ecfRecebimentoNaoFiscalDao;
  EcfRecebimentoNaoFiscalDao get ecfRecebimentoNaoFiscalDao =>
      _ecfRecebimentoNaoFiscalDao ??=
          EcfRecebimentoNaoFiscalDao(this as AppDatabase);
  EcfRelatorioGerencialDao _ecfRelatorioGerencialDao;
  EcfRelatorioGerencialDao get ecfRelatorioGerencialDao =>
      _ecfRelatorioGerencialDao ??=
          EcfRelatorioGerencialDao(this as AppDatabase);
  EcfSintegra60ADao _ecfSintegra60ADao;
  EcfSintegra60ADao get ecfSintegra60ADao =>
      _ecfSintegra60ADao ??= EcfSintegra60ADao(this as AppDatabase);
  EcfSintegra60MDao _ecfSintegra60MDao;
  EcfSintegra60MDao get ecfSintegra60MDao =>
      _ecfSintegra60MDao ??= EcfSintegra60MDao(this as AppDatabase);
  EmpresaDao _empresaDao;
  EmpresaDao get empresaDao => _empresaDao ??= EmpresaDao(this as AppDatabase);
  FornecedorDao _fornecedorDao;
  FornecedorDao get fornecedorDao =>
      _fornecedorDao ??= FornecedorDao(this as AppDatabase);
  IbptDao _ibptDao;
  IbptDao get ibptDao => _ibptDao ??= IbptDao(this as AppDatabase);
  LogImportacaoDao _logImportacaoDao;
  LogImportacaoDao get logImportacaoDao =>
      _logImportacaoDao ??= LogImportacaoDao(this as AppDatabase);
  PdvCaixaDao _pdvCaixaDao;
  PdvCaixaDao get pdvCaixaDao =>
      _pdvCaixaDao ??= PdvCaixaDao(this as AppDatabase);
  PdvConfiguracaoDao _pdvConfiguracaoDao;
  PdvConfiguracaoDao get pdvConfiguracaoDao =>
      _pdvConfiguracaoDao ??= PdvConfiguracaoDao(this as AppDatabase);
  PdvConfiguracaoBalancaDao _pdvConfiguracaoBalancaDao;
  PdvConfiguracaoBalancaDao get pdvConfiguracaoBalancaDao =>
      _pdvConfiguracaoBalancaDao ??=
          PdvConfiguracaoBalancaDao(this as AppDatabase);
  PdvConfiguracaoLeitorSerialDao _pdvConfiguracaoLeitorSerialDao;
  PdvConfiguracaoLeitorSerialDao get pdvConfiguracaoLeitorSerialDao =>
      _pdvConfiguracaoLeitorSerialDao ??=
          PdvConfiguracaoLeitorSerialDao(this as AppDatabase);
  PdvFechamentoDao _pdvFechamentoDao;
  PdvFechamentoDao get pdvFechamentoDao =>
      _pdvFechamentoDao ??= PdvFechamentoDao(this as AppDatabase);
  PdvMovimentoDao _pdvMovimentoDao;
  PdvMovimentoDao get pdvMovimentoDao =>
      _pdvMovimentoDao ??= PdvMovimentoDao(this as AppDatabase);
  PdvOperadorDao _pdvOperadorDao;
  PdvOperadorDao get pdvOperadorDao =>
      _pdvOperadorDao ??= PdvOperadorDao(this as AppDatabase);
  PdvSangriaDao _pdvSangriaDao;
  PdvSangriaDao get pdvSangriaDao =>
      _pdvSangriaDao ??= PdvSangriaDao(this as AppDatabase);
  PdvSuprimentoDao _pdvSuprimentoDao;
  PdvSuprimentoDao get pdvSuprimentoDao =>
      _pdvSuprimentoDao ??= PdvSuprimentoDao(this as AppDatabase);
  PdvTipoPagamentoDao _pdvTipoPagamentoDao;
  PdvTipoPagamentoDao get pdvTipoPagamentoDao =>
      _pdvTipoPagamentoDao ??= PdvTipoPagamentoDao(this as AppDatabase);
  PdvTotalTipoPagamentoDao _pdvTotalTipoPagamentoDao;
  PdvTotalTipoPagamentoDao get pdvTotalTipoPagamentoDao =>
      _pdvTotalTipoPagamentoDao ??=
          PdvTotalTipoPagamentoDao(this as AppDatabase);
  PdvVendaCabecalhoDao _pdvVendaCabecalhoDao;
  PdvVendaCabecalhoDao get pdvVendaCabecalhoDao =>
      _pdvVendaCabecalhoDao ??= PdvVendaCabecalhoDao(this as AppDatabase);
  PdvVendaDetalheDao _pdvVendaDetalheDao;
  PdvVendaDetalheDao get pdvVendaDetalheDao =>
      _pdvVendaDetalheDao ??= PdvVendaDetalheDao(this as AppDatabase);
  ProdutoDao _produtoDao;
  ProdutoDao get produtoDao => _produtoDao ??= ProdutoDao(this as AppDatabase);
  ProdutoFichaTecnicaDao _produtoFichaTecnicaDao;
  ProdutoFichaTecnicaDao get produtoFichaTecnicaDao =>
      _produtoFichaTecnicaDao ??= ProdutoFichaTecnicaDao(this as AppDatabase);
  ProdutoPromocaoDao _produtoPromocaoDao;
  ProdutoPromocaoDao get produtoPromocaoDao =>
      _produtoPromocaoDao ??= ProdutoPromocaoDao(this as AppDatabase);
  ProdutoUnidadeDao _produtoUnidadeDao;
  ProdutoUnidadeDao get produtoUnidadeDao =>
      _produtoUnidadeDao ??= ProdutoUnidadeDao(this as AppDatabase);
  @override
  Iterable<TableInfo> get allTables => allSchemaEntities.whereType<TableInfo>();
  @override
  List<DatabaseSchemaEntity> get allSchemaEntities => [
        cfops,
        clientes,
        colaboradors,
        compraPedidoCabecalhos,
        compraPedidoDetalhes,
        contadors,
        contasPagars,
        contasRecebers,
        ecfAliquotass,
        ecfDocumentosEmitidoss,
        ecfE3s,
        ecfImpressoras,
        ecfLogTotaiss,
        ecfR01s,
        ecfR02s,
        ecfR03s,
        ecfR06s,
        ecfR07s,
        ecfRecebimentoNaoFiscals,
        ecfRelatorioGerencials,
        ecfSintegra60As,
        ecfSintegra60Ms,
        empresas,
        fornecedors,
        ibpts,
        logImportacaos,
        pdvCaixas,
        pdvConfiguracaos,
        pdvConfiguracaoBalancas,
        pdvConfiguracaoLeitorSerials,
        pdvFechamentos,
        pdvMovimentos,
        pdvOperadors,
        pdvSangrias,
        pdvSuprimentos,
        pdvTipoPagamentos,
        pdvTotalTipoPagamentos,
        pdvVendaCabecalhos,
        pdvVendaDetalhes,
        produtos,
        produtoFichaTecnicas,
        produtoPromocaos,
        produtoUnidades
      ];
}
